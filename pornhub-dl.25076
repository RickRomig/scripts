#!/usr/bin/env bash
###############################################################################
# Script Name  : pornhub-dl
# Description  : Download videos from PornHub.com with best quality
# Dependencies : yt-dlp fzf
# Arguments    : Video URL or ID number
# Author       : Copyright Â© 2019, Richard B. Romig, 05 April 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Apr 2019
# Updated      : 17 Mar 2025
# Comments     : Accepts either full URL or video id such as ph5ccfa07f0e2a6
#              : Downloads to ~/Videos/Pornography/<category>
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="4.2.25076"
readonly updated="17 Mar 2025"
FMENU="fzf --header=$(basename "$0") \
           --layout=reverse \
           --exact \
           --border=bold \
           --border=rounded \
           --margin=5% \
           --color=dark \
           --height=95% \
           --info=hidden \
           --header-first \
           --bind change:top \
           --prompt"

## Functions ##

display_title() {
  local site="$1"
  clear
  box "${site^} Download" "="
  echo "$script v$version"
}

help() {
  local errcode="${1:-2}"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Dowload videos from Pornhub.com.

${green}Usage:${normal} $script [video_URL] [video_ID]
  $script https://www.pornhub.com/view_video.php?viewkey=ph5ccfa07f0e2a6
  $script ph5ccfa07f0e2a6

${orange}Available options:${normal}
  -h | --help  displays these instructions.
  -i | --info  displays information about the script.
_HELP_
  exit "$errcode"
}

script_info() {
  cat << _INFO_
  $script uses yt-dlp to download videos from the PornHub adult site.
  The video URL or ID is passed to the script on the command line. The default
  URL is https://www.pornhub.com if only the video ID is passed to the script.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos/Pornography/. Select the category (subdirectory).

  The the video will be downloaded to the selected sub-directory  The script is
  hard-coded to save the file as title.ext. Spaces in the title will be replaced
  by underscores. Metadata will also be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $script <video-url>
    $script <video-ID>

  Version: $version
  Updated: $updated
_INFO_
  exit
}

check_dependencies() {
  local packages=(ffmpeg fzf)
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
    printf '\e[A\e[K'
    check_packages "${packages[@]}"
  else
    die "yt-dlp is not installed." 1
  fi
}

extract_domain() {
  local domain fullurl
  fullurl="$1"
  domain=$(echo "$fullurl" | sed 's|^[^/]*//||;s|^www\.||;s|/.*$||;s|\..*$||')
  echo "$domain"
}

select_directory() {
	local video_dir vid_d selected_directory
	video_dir=$HOME"/Videos/Pornography"
  local directories=()
  for vid_d in $video_dir; do
    [[ -d "$vid_d" ]] && directories+=("$(find "$video_dir" -type d -print | sort -d)")
  done
  selected_directory=$($FMENU "Select destination directory: " < <(printf "%s\n" "${directories[@]}"))
	printf "%s" "$selected_directory"
}

download_video() {
  local site url destination
  url="$1"
  site="$2"
  display_title "$site"
	destination=$(select_directory)
  printf "\n%s%sDownloading video from %s to " "$bold" "$blue" "${site^}"
	printf "%s...%s\n" "$destination" "$normal"
	dl_2_video "$url" "$destination"
}

dl_2_video() {
  local url dest_dir
  url="$1"
  dest_dir="$2"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$dest_dir/%(title)s.%(ext)s" "$url"
  then
    leave "Download successful."
  else
    ec="$?"
    die "Download failed. Error: $ec" "$ec"
  fi
}

main() {
  local site url
  # Check arguments and fetch URL
  if [[ $# -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 2
  elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
    script_info
  elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help 2
  elif [[ "$1" =~ ^https?:\/\/.* ]]; then
    # match by regex, starts with http:// or https://
    url=$*
  else
    # match by video ID
    url="https://www.pornhub.com/view_video.php?viewkey=$*"
  fi
  check_dependencies
  site=$(extract_domain "$url")
  download_video "$url" "$site"
}

## Execution ##

main "$@"
