#!/usr/bin/env bash
##########################################################################
# Script Name  : randpic
# Description  : Copies random image file from ~/Pictures to ~/tmp/pics
# Dependencies : imagemagick
# Arguments    : None
# Author       : Copyright (C) 2019, Richard Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 02 Jun 2019
# Updated      : 10 Aug 2025
# Comments     :
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

##  Variables ##

readonly script="${0##*/}"
readonly version="3.10.25222"
readonly tmp_pics=$HOME"/tmp/journal"

## Functions ##

# check_package and leave functions and colors declared in functionlib

valid_folder() {
  local folder="$1"
  case "$folder" in
    album-art|DCIM|Facebook|Tech-pics|unsorted|wallpaper|web-site-pics/Zipped )
      return "$FALSE" ;;
    * )
      return "$TRUE"
  esac
}

valid_image() {
  local filename="$1"
  local ext="${filename##*.}"
  ext="${ext,,}"
  case $ext in
    bmp|gif|jpeg|jpg|png|tiff )
      return "$TRUE" ;;
    * )
      return "$FALSE"
  esac
}

all_done() {
  printf "\nFinished selecting images.\n"
  over_line "$script $version"
  leave ""
}

## Execution ##

# Create temporary picture directory if it doesn't already exist
[[ -d "$tmp_pics" ]] || mkdir -p "$tmp_pics"

check_package imagemagick
clear
while true; do
  # Randomly select an image folder from ~/Pictures/
  pic_dir=$(find ~/Pictures -maxdepth 1 -type d | shuf -n1)
  sel_dir="${pic_dir##*/}"
  valid_folder "$sel_dir" || continue

  # Choose a random image file from the selected folder
  random_file=$(find "$pic_dir" -maxdepth 1 -type f | shuf -n1)
  pic_file="${random_file##*/}"
  valid_image "$pic_file" || continue

  # Accept or reject selected file
  clear
  box "Random Image Selector ($script v$version)"
  printf "Selects a random image from ~/Pictures\n"
  printf "%sSelected image: %s%s/%s%s\n" "$blue" "$orange" "$sel_dir" "$pic_file" "$normal"
  cp -p "$pic_dir/$pic_file" "$tmp_pics"
  # /usr/bin/display -geometry +600+20 "$tmp_pics/$pic_file" &
  /usr/bin/display -geometry +1000+20 -resize 800x600 "$tmp_pics/$pic_file" &
  # kitten icat --clear --place 60x30@80x1 --scale-up "$tmp_pics/$pic_file"
  pic_pid="$!"
  printf "\n%sOptions:%s\n" "$blue" "$normal"
  COLUMNS=12
  options=( "Accept the selected image and select another image." \
    "Accept the selected image and exit." \
    "Reject the selected image and select another image." \
    "Reject the selected image and exit." \
    "Delete the selected image and select another image." )
  PS3="Chose an option: "
  select _opt in "${options[@]}"; do
    case $REPLY in
      1 )
        printf "\n%sAccepted image:%s %s/%s\n" "$blue" "$normal" "$sel_dir" "$pic_file"
        printf "\nSelecting another random image...\n"
        kill $pic_pid
        sleep 2
        break
        ;;
      2 )
        printf "\n%sAccepted image:%s %s/%s\n" "$blue" "$normal" "$sel_dir" "$pic_file"
        kill $pic_pid
        all_done
        ;;
      3 )
        printf "\n%sRejected image:%s %s/%s\n" "$blue" "$normal" "$sel_dir" "$pic_file"
        printf "\nSelecting another random image...\n"
        kill $pic_pid
        rm "$tmp_pics/$pic_file"
        sleep 2
        break
        ;;
      4 )
        printf "\n%sRejected image:%s %s/%s\n" "$blue" "$normal" "$sel_dir" "$pic_file"
        kill $pic_pid
        rm "$tmp_pics/$pic_file"
        all_done
        ;;
      5 )
        printf "\n%sImage deleted:%s %s/%s\n" "$blue" "$normal" "$sel_dir" "$pic_file"
        printf "\nSelecting another random image...\n"
        # kill $pic_pid
        rm "$tmp_pics/$pic_file"
        rm "$pic_dir/$pic_file"
        sleep 2
        break
        ;;
      * )
        printf "\n%sInvalid option. Try again.%s\n" "$lightred" "$normal"
    esac
  done
done
