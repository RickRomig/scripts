#!/usr/bin/env bash
###############################################################################
# Script Name  : randpic
# Description  : Copies random image file from ~/Pictures to ~/tmp/pics
# Dependencies : imagemagick
# Arguments    : None
# Author       : Copyright (C) 2019, Richard Romig, 2 June 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     :
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034,SC2119

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

##  Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.4.0"
readonly _updated="25 Sep 2023"
readonly tmp_dir=$HOME"/tmp/journal"

## Functions ##

# check_package and leave functions and colors declared in functionlib

valid_image() {
  local filename="$1"
  local ext="${filename##*.}"
  ext="${ext,,}"
  case $ext in
    bmp|gif|jpeg|jpg|png|tiff )
      return "$TRUE"
    ;;
    * )
      return "$FALSE"
  esac
}

valid_folder() {
  local folder="$1"
  case "$folder" in
    DCIM|Tech-pics|unsorted|wallpaper )
      return "$FALSE"
    ;;
    * )
      return "$TRUE"
  esac
}

## Execution ##

# Create temporary picture directory if it doesn't already exist
[[ -d "$tmp_dir" ]] || mkdir -p "$tmp_dir"

check_package imagemagick
clear
while true; do
  # Randomly select an image folder from ~/Pictures/
  # pic_dir="$(shuf -en1 "$HOME/Pictures"/*)/"
  pic_dir=$(find ~/Pictures -maxdepth 1 -type d | shuf -n1)
  [[ -d "$pic_dir" ]] || continue

  # Reject invalid image folder
  sel_dir=$(basename "$pic_dir")
  valid_folder "$sel_dir" || continue

  # Choose a random image file from the selected folder
  # random_file=$(shuf -en1 "$pic_dir"*)
  random_file=$(find "$pic_dir" -maxdepth 1 -type f | shuf -n1)

  # Validate the randomly selected file
  pic_file="$(basename "$random_file")"
  valid_image "$pic_file" || continue

  # Accept or reject selected file
  clear
  box "Random Image Selector"
  echo "$_script v$_version ($_updated)"
  echo -e "Selects a random image from ~/Pictures\n"
  echo "${blue}Selected image: ${orange}$sel_dir/$pic_file${normal}"
  cp -p "$pic_dir/$pic_file" "$tmp_dir"
  /usr/bin/display -geometry +600+20 "$tmp_dir/$pic_file" &
  pic_pid="$!"
  echo $'\n'$"${blue}Options:${normal}"
  COLUMNS=12
  options=( "Accept the selected image and select another image." \
    "Accept the selected image and exit." \
    "Reject the selected image and select another image." \
    "Reject the selected image and exit." \
    "Delete the selected image and select another image." )
  PS3="Chose an option: "
  select opt in "${options[@]}"; do
    case $REPLY in
      1 )
        echo $'\n'$"${blue}Accepted image:${normal} $sel_dir/$pic_file"
        echo $'\n'$"Selecting another random image..."
        kill $pic_pid
        sleep 2
        break
      ;;
      2 )
        echo -e "\n${blue}Accepted image:${normal} $sel_dir/$pic_file\n"
        kill $pic_pid
        leave
      ;;
      3 )
        echo $'\n'$"${blue}Rejected image:${normal} $sel_dir/$pic_file"
        kill $pic_pid
        echo $'\n'$"Selecting another random image..."
        rm "$tmp_dir/$pic_file"
        sleep 2
        break
      ;;
      4 )
        echo -e "\n${blue}Rejected image:${normal} $sel_dir/$pic_file\n"
        kill $pic_pid
        rm "$tmp_dir/$pic_file"
        leave
      ;;
      5 )
        echo -e $'\n'$"${blue}Image deleted:${normal} $sel_dir/$pic_file"
        kill $pic_pid
        echo $'\n'$"Selecting another random image..."
        rm "$tmp_dir/$pic_file"
        rm "$pic_dir/$pic_file"
        sleep 2
        break
      ;;
      * )
        echo $'\n'$"${lightred}Invalid option. Try again.${normal}"
    esac
  done
done
