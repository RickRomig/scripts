#!/usr/bin/env bash
##########################################################################
# Script Name  : lm20-snaps
# Description  : Enables or disables Snaps on Linux Mint 20+
# Dependencies : None
# Arguments    : [-e] [-d] [-h] [-s] (See help function)
# Author       : Richard B. Romig, 30 Jun 2020
# Email        : rick.romig@gmail.com
# Comments     : See EZNix snapkill script
#              : /home/rick/Downloads/Utilities/snapkill.d/snapkill
# TODO (Rick)  : Incorporate elements from snapkill
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

# Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

readonly _script=$(basename "$0")
readonly _version="0.2.0"
readonly _updated="07 Jul 2022"
readonly pref_file="/etc/apt/preferences.d/nosnap.pref"

## Functions ##

snap_status() {
  if [[ -f "$pref_file" ]]; then
    snap_state=$(grep -q '^# Package:' "$pref_file")
    [[ -n "$snap_state" ]] && return "$TRUE" || return "$FALSE"
  else
    return "$TRUE"
  fi
}

enable_snaps() {
  if [[ -f "$pref_file" ]]; then
    if grep -q '^Package:' "$pref_file"; then
      sudo sed -i '/^Package/s/^/# /;/^Pin/s/^/# /' "$pref_file"
      printf "\nThe installation of Snapd and Snap packages is now enabled.\n"
    else
      printf "\nSnaps are already enabled by %s.\n" "$pref_file"
    fi
  else
    printf "\n%s does not exist. Snaps are enabled by default." "$pref_file"
  fi
}

disable_snaps() {
  if [[ -f "$pref_file" ]]; then
    if grep -q '^# Package:' "$pref_file"; then
      sudo sed -i '/Package/s/^# //;/Pin/s/^# //' "$pref_file"
      printf "\nThe installation of Snapd and Snap packages is now disabled.\n"
    else
      printf "\nSnaps are already disabled and forbidden.\n"
    fi
  else
    create_nosnap
    printf "%s has been created. Snaps are now disabled.\n" "$pref_file"
  fi
}

create_nosnaps() {
  cat << EOT sudo tee "$pref_file"
# To prevent repository packages from triggering the installation of Snap,
# this file forbids snapd from being installed by APT.
# For more information: https://linuxmint-user-guide.readthedocs.io/en/latest/snap.html

Package: snapd
Pin: release a=*
Pin-Priority: -10
EOT
}

is_lm20() {
  ver_code=$(awk -F= '/VERSION_CODENAME/ {print $2}' /etc/os-release)
  case "$ver_code" in
    ulyana|ulyssa|uma|una ) return "$TRUE" ;;
    * ) return "$FALSE" ;;
  esac
}

help() {
  local errcode="${1:=2}"
  cat << EOL
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -e    Enable the installation of snapd and snap packages
  -d    Disable the installation of snapd and snap packages
  -h    Help
  -s    Status of snapd and snap package installation
EOL
  exit "$errcode"
}

## Execution ##

clear
box "$_script v$_version ($_updated)"
printf "Enables or disables the installation of snapd and Snap packages in Linux Mint 20+.\n"

if is_lm20; then
  if [[ $# -eq 0 ]]; then
    printf "\n\e[91mERROR:\e[0m No argument passed\n" >&2
    help 2
  else
    optstr=":edhs"
    while getopts "$optstr" opt; do
      case "$opt" in
        e )
          user_in_sudo
          enable_snaps
          break ;;
        d )
          user_in_sudo
          disable_snaps
          break ;;
        h )
          help 0
          break ;;
        s )
          printf "\nStatus of snapd and snap packages: "
          snap_status && printf "Snaps are enabled.\n" || printf "Snaps are disabled.\n"
          break ;;
        ? )
          printf "\n\e[91mERROR:\e[0m Invalid option -%s\n" "$OPTARG" >&2
          help 2 ;;
      esac
    done
  fi
  exit
else
  die "This script is only for use with Linux Mint 20+." 1
fi
