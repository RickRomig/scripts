#!/usr/bin/env bash
##########################################################################
# Script Name  : meditation-timer
# Description  : Counts down remaining time of a meditation session.
# Dependencies : aplay (alsa-utils)
# Arguments    : Time in minutes to count down from. Optional volume setting (0-100%)
# Author       : Copyright (C) 2021, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 06 Jul 2021
# Updated      : 13 Sep 2025
# Comments     : Original script found on Reddit r/dharmmawheel, posted by u/Jhanna4
#              : Sound does not work with Pipewire audio.
# TODO (Rick)  : Work on getting sound functions to work on Pipewire.
# License      : GNU General Public License, version 2.0
# GNU General Public License for more details.
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Global Variables ##

script_dir=$(dirname "$(readlink -f "${0}")"); readonly script_dir

## Functions ##

# dpms_enabled() {
#   xset -q | grep -w Enabled || return 0 || return 1
# }

is_valid_integer() {
  local value="$1"
  [[ "$value" =~ ^[0-9]+$ ]] || return 1
  [[ "$value" -ge 0 || "$value" -le 100 ]] && return 0 || return 1
}

usage() {
  local script="$1"
  local version="$2"
   printf "%sUsage:%s %s <minutes> [volume 0-100]\n" "$orange" "$normal" "$script"
  printf "Meditation time is set in minutes. Only enter integers greater than 0. The default is 20 minutes.\n"
   printf "Volume is a percentage of the output volume. The default is 50%%.\n"
   printf "If no arguments or incorrect values are entered, the default values will be used.\n"
  exit_script "$script" "$version"
}

get_volume() {
  # Get the cuurent volume setting (percentage, ie 50%)
  local volume
  volume=$(amixer get Master | awk -F'[][]' 'END{print $2}')
  echo "$volume"
}

set_volume() {
  # Set the volume for sounds played or reset to original volume (volume is a percentage, ie 60%)
  local volume="$1"
  amixer set Master "$volume" >/dev/null
}

play_sound() {
  # Play a sound as a background process.
  local sound="$1"
  /usr/bin/aplay "$sound" > /dev/null 2>&1 &
}

screensaver_off() {
  xset s off      # turns screensaver off
  xset s noblank  # set blanking off
  xset -dpms      # turns DPMS off
  tput civis      # hides cursor
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function.
# Shellcheck may incorrectly believe that code is unreachable if it's invoked by a variable or in a trap.
screensaver_on() {
  xset s on     # turns screesaver on
  xset s blank  # allows screen blanking
  xset +dpms    # turns DPMS on
  tput cnorm    # restores cursor
}

prep_countdown() {
  # Allow 10 seconds before meditation begins.
  local count
  for count in {10..1}; do printf "\t%02d\r" "$count"; sleep 1; done
}

meditation_timer() {
  local hours interval min minutes seconds sec_rem
  min="$1"
  sec_rem=$(( 60 * min ))
  # local -r audio_file="$script_dir/files/Low-Wood-Block.wav"
  while [[ "$sec_rem" -gt 0 ]]; do

    sec_rem=$(( sec_rem - 1 ))
    interval="$sec_rem"
    seconds=$(( interval % 60 ))
    interval=$(( interval - seconds ))
    minutes=$(( interval % 3600 / 60 ))
    interval=$(( interval - minutes ))
    hours=$(( interval % 86400 / 3600 ))
    # interval=$(( interval - hours ))
    # days=$(( interval % 604800 / 86400 ))
    # interval=$(( interval - hours ))
    # weeks=$(( interval / 604800 ))
    printf "\t%02d:%02d:%02d\r" "$hours" "$minutes" "$seconds"
    # [[ $(( sec_rem % 300 )) -eq 0 && "$sec_rem" -gt 0 ]] && play_sound "$audio_file"
    sleep 1
  done
}

exit_script() {
  local script="$1"
  local version="$2"
  printf "\n\U2638 %s v%s\n" "$script" "$version"
  printf "\UA9 2021-2025 Richard B. Romig\n"
  exit
}

main() {
  trap screensaver_on EXIT
  local script version audio_file meditation_time orig_volume volume
  script="${0##*/}"
  version="2.8.25256"
  audio_file="$script_dir/files/Tibetan_bowl.wav"
  # Check arguments and dependencies.
 meditation_time="${1:-20}"  # Default time is 20 minutes.
  [[ "$meditation_time" == "-h" || "$meditation_time" == "--help" ]] && usage "$script" "$version"
  [[ "${meditation_time//[0-9]/}" || "$meditation_time" -eq 0 ]] &&  meditation_time=20 # if not a digit or equals 0
 volume="${2:-50}"  # Default volume setting is 50%.
  is_valid_integer "$volume" || volume="50"
  volume+="%"   # make volume a percent.
  check_package alsa-utils
  clear
  # Capture original volume setting
  orig_volume=$(get_volume)  # orig_volume is a percentage, ie 87%
  # Set playback volume
  set_volume "$volume"
  printf "\n\t\U2638 %sMeditation Timer%s \U2638 \n\n" "$green" "$normal"
  screensaver_off
  prep_countdown
  play_sound "$audio_file"
  meditation_timer "$meditation_time"
  play_sound "$audio_file"
  sleep 30  # wait for audio file to finish
  set_volume "$orig_volume"
  printf "\n"
  exit_script "$script" "$version"
}

## Execution ##

main "$@"
