#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-marktext
# Description  : Installs, updates, and removes the Mark Text markdown editor.
# Dependencies : gdebi, wget
# Arguments    : [-h] [-i] [-r] [-u] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, 10 Jan 2022
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.3.3"
readonly _updated="03 Feb 2023"
readonly url="https://github.com/marktext/marktext/releases"

## Functions ##

cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  local packages=( gdebi wget )
  check_packages "${packages[@]}"
}

marktext_version() {
  # dpkg -l | awk '$2 == "marktext" {print $3}' | sed 's/[+-].*//'
  marktext --version | awk '/MarkText/ {print $2}' | sed 's/^v//'
}

newest_version() {
  wget -qO "$tmp_file" "$url"
  # curl -s -o "$tmp_file" "$url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
  echo "$new_ver"
}

compare_versions() {
  cur_ver=$(marktext_version)
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}Marktext $cur_ver is the current version. No update required.${normal}"
  else
    echo "${lightyellow}Installed version of MarkText is $cur_ver, updating to $new_ver...${normal}"
    install_marktext
  fi
}

install_marktext() {
  new_pkg="marktext-amd64.deb"
  echo "Downloading Mark Text markdown editor from the marktext GitHub repository..."
  wget -q -P "$tmp_dir/" "$url/download/v$new_ver/$new_pkg"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  echo "Mark Text $(marktext_version) installed."
}

remove_marktext() {
  local mt_cfg_dir="$HOME/config/marktext"
  local pref_json="preferences.json"
  echo "Removing the Mark Text markdown editor..."
  sudo apt-get remove --purge marktext -yy
  [[ -f "$mt_cfg_dir/$pref_json" ]] && rm -rf "$mt_cfg_dir"
  echo "Mark Text markdown editor has been removed."
}

help() {
  local errcode="${1:-2}"
  cat << EOF
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -h    Displays help.
  -i    Installs the Marktext markdown editor.
  -r    Removes the Marktext markdown editor from the system.
  -u    Updates the Marktext markdown editor to the latest version.
EOF
  exit "$errcode"
}

## Execution ##

check_dependencies
printf "\U1F427 %s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Installs, updates, or removes the Mark Text markdown editor.\n"

if [[ $# -eq 0 ]]; then
  echo "${lightred}ERROR:${normal} No argument passed." >&2
  help 2
else
  optstr=":hiru"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
        help 0 ;;
      i )
        exists marktext && leave "Marktext $(marktext_version) is already installed."
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
        tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
        trap cleanup EXIT
        new_ver="$(newest_version)"
        echo "${lightyellow}Installing MarkText version $new_ver...${normal}"  
        install_marktext
        ;;
      r )
        exists marktext || leave "Marktext is not installed. Run '$_script -i' to install."
        remove_marktext
        ;;
      u )
        exists marktext || leave "Marktext is not installed. Run '$_script -i' to install."
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
        tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
        trap cleanup EXIT
        new_ver="$(newest_version)"
        compare_versions
        ;;
      ? )
        echo "${lightred}ERROR:${normal} Invalid option -${OPTARG}" >&2
        help 2
        ;;
    esac
  done
fi

exit
