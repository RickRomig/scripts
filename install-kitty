#!/usr/bin/env bash
##########################################################################
# Script Name  : install-kitty
# Description  : Installs kitty terminal emulator with basic configuration.
# Dependencies : None
# Arguments    : -c -h -i -p -r (see help function for more information)
# Author       : Copyright (C) 2022, Richard B. Romig, 26 Sep 2022
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Configures as login terminal for Debian-based distros.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.8"
readonly _updated="18 Mar 2024"
readonly kitty_cfg_d="$HOME/.config/kitty"

## Functions ##

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}Options:${normal}
  -b  Copy Kitty keybindings list
  -c  Install Kitty configuration
  -h  Display help
  -i  Install Kitty from distro repositories
  -p  Purge Kitty from system (remove config files)
  -r  Remove Kitty from system (leave config files)
END_HELP
	printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

kitty_version() {
  kitty --version | awk '{print $2}'
}

install_kitty() {
  printf "Installing the kitty terminal emulator.\n"
  sudo apt-get install kitty imagemagick -yy
  kitty_config
  kitty_bindings
  printf "Kitty %s installed and configured.\n" "$(kitty_version)"
}

remove_kitty() {
  printf "Removing the Kitty terminal emulator %s\n" "$(kitty_version)"
  sudo apt-get remove kitty -yy
  printf "The Kitty terminal emulator has been uninstalled.\n"
}

purge_kitty() {
  local kitty_cache="$HOME/.cache/kitty"
  printf "Purging the Kitty terminal emulator %s\n" "$(kitty_version)"
  sudo apt-get purge kitty -yy
  [[ -d "$kitty_cfg_d" ]] && rm -rf "$kitty_cfg_d"
  [[ -d "$kitty_cache" ]] && rm -rf "$kitty_cache"
  printf "The Kitty terminal emulator and configuration files have been removed.\n"
}

kitty_config() {
  local repository="configs/raw/branch/main/kitty"
  local kitty_conf="kitty.conf"
  printf "Setting up kitty.conf ...\n"
  [[ -d "$kitty_cfg_d" ]] || mkdir -p "$kitty_cfg_d"
  curl -so "$kitty_cfg_d/$kitty_conf" "$Gitea_URL/$repository/$kitty_conf"
  printf "%s created and configured.\n" "$kitty_conf"
}

kitty_bindings() {
  local bindings="bindings.list"
  local repository="configs/raw/branch/main/kitty"
  curl -so "$kitty_cfg_d/$bindings" "$Gitea_URL/$repository/$bindings"
  printf "Kitty keybindings list copied to ~/.config/kitty\n"
  printf "Run the kkb script to display keybindings.\n"
}

## Execution ##

noOpt=1
optstr=":bchipr"
while getopts "$optstr" opt; do
  case "$opt" in
    b )
      exists kitty || leave "Kitty is not installed."
      printf "Copying Kitty keybindings...\n"
      kitty_bindings
    ;;
    c )
      exists kitty || leave "Kitty is not installed."
      printf "Configuring Kitty %s...\n" "$(kitty_version)"
      kitty_config
    ;;
    h )
      help 0
    ;;
    i )
      exists kitty && leave "Kitty terminal emulator $(kitty_version) already installed."
      sudo_login 2
      install_kitty
    ;;
    p )
      exists kitty || leave "Kitty is not installed."
      sudo_login 2
      purge_kitty
    ;;
    r )
      exists kitty || leave "Kitty is not installed."
      sudo_login 2
      remove_kitty
    ;;
    ? )
      printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
      help 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
exit