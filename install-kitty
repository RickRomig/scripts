#!/usr/bin/env bash
##########################################################################
# Script Name  : install-kitty
# Description  : Installs kitty terminal emulator with basic configuration.
# Dependencies : git
# Arguments    : -c -h -i -p -r (see help function for more information)
# Author       : Copyright (C) 2022, Richard B. Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 26 Sep 2022
# Updated      : 21 Feb 2025
# Comments     : Configures as login terminal for Debian-based distros.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

script=$(basename "$0"); readonly script
readonly version="2.12.25052"
readonly kitty_cfg_d="$HOME/.config/kitty"

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="21 Feb 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs/Removes/Configures Kitty terminal emulator

${green}Usage:${normal} $script [OPTION]
${orange}Available options:${normal}
  -b  Copy Kitty keybindings list
  -c  Install Kitty configuration
  -h  Show this help message and exit
  -i  Install Kitty from distro repositories
  -p  Purge Kitty from system (remove config files)
  -r  Remove Kitty from system (leave config files)
_HELP_
  exit "$errcode"
}

assign_repo() {
	local localip repo
	localip=$(local_ip)
	repo="$HOME/Downloads/configs"
	case "$localip" in
		10|16|22 )
			repo="$HOME/gitea/configs" ;;
		* )
			[[ -d "$repo" ]] || git clone --quiet "$GITEA_URL/configs.git" "$repo"
	esac
	echo "$repo"
}

kitty_version() {
  kitty --version | cut -d' ' -f2
}

install_kitty() {
  printf "Installing the kitty terminal emulator.\n"
  sudo apt-get install -y kitty imagemagick
  printf "Kitty %s installed.\n" "$(kitty_version)"
}

remove_kitty() {
  printf "Removing the Kitty terminal emulator %s\n" "$(kitty_version)"
  sudo apt-get remove kitty -yy
  printf "The Kitty terminal emulator has been uninstalled.\n"
}

purge_kitty() {
  local kitty_cache="$HOME/.cache/kitty"
  printf "Purging the Kitty terminal emulator %s\n" "$(kitty_version)"
  sudo apt-get purge kitty -yy
  [[ -d "$kitty_cfg_d" ]] && rm -rf "$kitty_cfg_d"
  [[ -d "$kitty_cache" ]] && rm -rf "$kitty_cache"
  printf "The Kitty terminal emulator and configuration files have been removed.\n"
}

kitty_config() {
  local repository
	repository=$(assign_repo)
  [[ -d "$kitty_cfg_d" ]] || mkdir -p "$kitty_cfg_d"
  printf "Applying up %s ...\n" "kitty.conf"
  cp -v "$repository/kitty/kitty.conf" "$kitty_cfg_d/"
  printf "kitty.conf copied.\n"
}

kitty_bindings() {
  local repository
	repository=$(assign_repo)
  cp -v "$repository/kitty/bindings.list" "$kitty_cfg_d/"
  printf "Kitty keybindings list copied to ~/.config/kitty\n"
  printf "Run the kkb script to display keybindings.\n"
}

main() {
  check_package git
  local noOpt opt optstr
  noOpt=1
  optstr=":bchipr"
  while getopts "$optstr" opt; do
    case "$opt" in
      b )
        exists kitty || leave "Kitty is not installed."
        printf "Copying Kitty keybindings...\n"
        kitty_bindings
      ;;
      c )
        exists kitty || leave "Kitty is not installed."
        printf "Configuring Kitty %s...\n" "$(kitty_version)"
        kitty_config
      ;;
      h )
        help 0
      ;;
      i )
        exists kitty && leave "Kitty terminal emulator $(kitty_version) already installed."
        sudo_login 2
        install_kitty
        kitty_config
        kitty_bindings

      ;;
      p )
        exists kitty || leave "Kitty is not installed."
        sudo_login 2
        purge_kitty
      ;;
      r )
        exists kitty || leave "Kitty is not installed."
        sudo_login 2
        remove_kitty
      ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
