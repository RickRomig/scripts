#!/usr/bin/env bash
###############################################################################
# Script Name  : syncmosfa
# Description  : Syncs directories with machines on the network via SSH
# Dependencies : rsync
# Arguments    : Last octet of target IP address, see help()
# Author       : Copyright (C) 2020 Richard Romig, 29 Sep 2020
# Email        : rick.romig@gmail.com
# Created      : 29 Sep 2020
# Last updated : 31 Oct 2024
# Comments     : Can sync to one or all machines on the network.
#              : LOCALNET is declared in functionlib
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="3.18.24305"
SECONDS=0

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="31 Oct 2024"
	cat << _HELP_
  $script help
  ${orange}Usage:${normal} $script [OPTION] Updated $updated
  OPTION       ACTION
  -h | --help  Displays usage instructions.
  -a | --all   Synchronizes all designated machines on the network.
  1-255        Last octet of the IP address(es) of the machine(s) to synchronize.
  ${orange}Examples:${normal}
      $script -h        # Displays usage instructions.
      $script --help    # Displays usage instructions.
      $script -a        # Synchronizes with all designated systems.
      $script --all     # Synchronizes with all designated systems.
      $script 13        # Synchronizes with the system with a last octet of 13.
      $script 12 13 14  # Synchronizes with systems whose last octets are 12, 13, 14.
  ${orange}Notes:${normal}
      - Multiple IP addresses can be entered.
      - This script is limited to the range of static IP addresses (1 - 25).
      - Certain addresses within that range have been marked as restricted and are not accessible.
_HELP_
  exit "$errcode"
}

transfer_status() {
  # Exit script if transfer fails.
  local xfr_status="$1"
  (( xfr_status != 0 )) && die "A transfer failed! Check network status." "$xfr_status"
}

transfer() {
  # Skip local machine:
  local ip_addr hostip
  hostip="$1"
  ip_addr="$(local_ip)"
  if [[ "$ip_addr" == "$hostip" ]]; then
    echo -e "${green}...Syncing from $hostip${normal}\n"
    return
  fi

  # Check for machines and sync if on-line:
  echo "${green}Checking for $hostip...${normal}"
  if  ping -c 3 "$LOCALNET.$hostip" >/dev/null 2>&1
  then
    echo "...Syncing to Machine $hostip"
    syncscript "$hostip"
    echo -e "...Machine $hostip Synced!\n"
  else
    echo -e "...Skipping $hostip! Not on network.\n"
  fi
}

syncscript() {
  # Synch to all.
  local exit_status hostip
  hostip="$1"
  echo $'\n'$"${orange}Syncing aliases...${normal}"
  rsync -avh --delete "$HOME"/.bash_aliases "$LOCALNET.$hostip":
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing bin...${normal}"
  rsync -avh --delete --exclude '.git' "$HOME"/bin/ "$LOCALNET.$hostip":bin/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing script configuration files...${normal}"
  rsync -avh --delete "$HOME"/.config/scripts/ "$LOCALNET.$hostip":.config/scripts/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Password Databases...${normal}"
  rsync -avh --delete --include="*.kdbx" --exclude="*" "$HOME"/Documents/ "$LOCALNET.$hostip":Documents/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing homepage...${normal}"
  rsync -avh --delete --exclude '.git' "$HOME"/Documents/homepage/ "$LOCALNET.$hostip":Documents/homepage/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing .local/share/doc...${normal}"
  rsync -avh --delete "$HOME"/.local/share/doc/ "$LOCALNET.$hostip":.local/share/doc/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing MOSFANET...${normal}"
  rsync -avh --delete "$HOME"/Documents/mosfanet/ "$LOCALNET.$hostip":Documents/mosfanet/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Work..${normal}"
  rsync -avh --delete "$HOME"/Work/ "$LOCALNET.$hostip":Work/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Templates...${normal}"
  rsync -avh --delete "$HOME"/Templates/ "$LOCALNET.$hostip":Templates/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Pictures/wallpaper...${normal}"
  rsync -avh --delete "$HOME"/Pictures/wallpaper/ "$LOCALNET.$hostip":Pictures/wallpaper/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Pictures/backgrounds...${normal}"
  rsync -avh --delete "$HOME"/Pictures/backgrounds/ "$LOCALNET.$hostip":Pictures/backgrounds/
  exit_status="$?"
  transfer_status "$exit_status"

if [[ "$hostip" == "16" ]]; then
    # Sync Deb packages and Git repositories
    printf "\n%sSyncing Deb Packages...%s\n" "$orange" "$normal"
    rsync -avh --delete "$HOME"/debpkgs/  "$LOCALNET.$hostip":debpkgs/
    exit_status="$?"
    transfer_status "$exit_status"

    printf "\n%sSyncing Gitea Repositories...%s\n" "$orange" "$normal"
    rsync -avh --delete "$HOME"/gitea/ "$LOCALNET.$hostip":gitea/
    exit_status="$?"
    transfer_status "$exit_status"

    printf "\n%sSyncing Github Repositories...%s\n" "$orange" "$normal"
    rsync -avh --delete "$HOME"/Projects/ "$LOCALNET.$hostip":Projects/
    exit_status="$?"
    transfer_status "$exit_status"
fi
  printf "\n"
}

sync_one() {
  local hostip
  valid_ip "$1" && hostip="$1"

  echo -e "Synchronizing directories with $LOCALNET.$hostip.\n"

  if [[ "$hostip" -gt 0 && "$hostip" -lt 26 ]]; then
    # Restricted IP addresses on local network
    case $hostip in
      1|2|3|4|5|6|7|8|9|21|22|24|153 )
        echo -n "${orange}Warning!${normal} $LOCALNET.$hostip is a restricted address."
        echo -e " Access denied.\n"; exit ;;
      * )
        echo "Synchronizing directories with $LOCALNET.$hostip:"
        transfer "$hostip"
        all_done
    esac
  else
    echo -n "${orange}Warning!${normal} $LOCALNET.$hostip is outside the range"
    echo -e " of static addresses.\n"
  fi
}

sync_some() {
  local xfr_flag hostip
  echo -e "Synchronizing directories with selected systems on the local network.\n"
  xfr_flag=0
  for hostip in "$@"; do
    if [[ "$hostip" -eq "$hostip" ]] 2>/dev/null; then
      if [[ "$hostip" -gt 0 && "$hostip" -lt 26 ]]; then
        case "$hostip" in
          1|2|3|4|5|6|7|8|9|21|22|24|25|153 )
            echo -n "${orange}Warning!${normal} $LOCALNET.$hostip is a restricted"
            echo -e " address. Access denied.\n"
          ;;
          * )
            transfer "$hostip"
            (( xfr_flag++ ))
        esac
      elif [[ "$hostip" -gt 25 && "$hostip" -lt 255 ]]; then
        echo -n "${orange}Warning!${normal} $LOCALNET.$hostip is outside the range"
        echo -e " of static addresses.\n"
      else
        echo -e "${lightred}ERROR!${normal} Invalid argument: $hostip\n" >&2
      fi
    else
      echo -e "${lightred}ERROR!${normal} Integer argument expected.\n" >&2
    fi
  done
  [ "$xfr_flag" -gt 0 ] && all_done
}

sync_all() {
  local hostip octets
  echo -e "Synchronizing directories with systems on the local network.\n"

  octets=(10 11 12 13 14 15 16 17 18 19 20 23)
  for hostip in "${octets[@]}"; do transfer "$hostip"; done
  all_done
}

all_done() {
  box "All directories synced!" "-"
  leave "Script completed in $(format_time $SECONDS)"
}

check_host() {
  local main_host src_host ip_addr
  main_host="hp-800g2-sff"
  src_host="${HOSTNAME:-$(hostname)}"
  ip_addr="$(local_ip)"
  echo -n "Synchronizing from host: ${lightyellow}$src_host${normal} at "
  echo "IP: ${lightyellow}$LOCALNET.$ip_addr${normal}"
  if [[ "$src_host" != "$main_host" ]]; then
    if yes_or_no "Do you wish to continue?"; then
      printf "\nContinuing with the synchronization operation...\n"
    else
      printf "\nSynchronization operation aborted.\n"
      leave "Exiting the script..."
    fi
  fi
}

## Execution ##
main() {
  check_package rsync
  box "$script v$version"
  check_host
  if [[ "$#" -eq 0 ]]; then
    printf "%s No arguments passed.\n" "$RED_ERROR" >&2
    help 1
  elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
    help 0
  elif [[ "$1" = "-a" || "$1" = "--all" ]]; then
    sync_all
  elif [[ "$#" -gt 1 ]]; then
    sync_some "$@"
  else
    sync_one "$1"
  fi
}

## Execution ##

main "$@"
