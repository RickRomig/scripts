#!/usr/bin/env bash
###############################################################################
# Script Name  : syncmosfa
# Description  : Syncs directories with machines on the network via SSH
# Dependencies : rsync
# Arguments    : Last octet of target IP address, see help()
# Author       : Copyright (C) 2020 Richard Romig, 29 Sep 2020
# Email        : rick.romig@gmail.com
# Created      : 29 Sep 2020
# Last updated : 10 Aug 2025
# Comments     : Can sync to one or all machines on the network.
#              : LOCALNET is declared in functionlib
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="4.2.25222"
SECONDS=0

## Functions ##

help() {
	local errcode="${1:-2}"
	local updated="10 Aug 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Syncs directories with machines on the network via SSH

${green}Usage:${normal} $script [-h|--help] [-a|--all] [ip1 ip2 ip3 ...] [-N]
${orange}Available options:${normal}
  -h | --help  Show this help message and exit.
  -a | --all   Synchronize all designated machines on the network.
  1-255        Last octet of the IP address(es) of the machine(s) to synchronize.
  -n           Display GPL 2 notice.
${blue}Examples:${normal}
$script -h        # Displays usage instructions.
$script --help    # Displays usage instructions.
$script -a        # Synchronizes with all designated systems.
$script --all     # Synchronizes with all designated systems.
$script 13        # Synchronizes with the system with a last octet of 13.
$script 12 13 14  # Synchronizes with systems whose last octets are 12, 13, 14.
${orange}Notes:${normal}
  - Multiple IP addresses can be entered.
  - This script is limited to the range of static IP addresses (1 - 25).
  - Certain addresses within that range may not be accessible.
_HELP_
  exit "$errcode"
}

show_notice() {
  local script_dir
  script_dir=$(dirname "$(readlink -f "${0}")")
	printf "%s\n" "$script"
	printf "Syncs directories with machines on the network via SSH.\n"
	printf "Copyright (C) 2020, Richard B. Romig\n"
	printf "Email: rick.romig@gmail.com\n\n"
	cat "$script_dir/files/gpl_notice.txt"
}

transfer_status() {
  # Exit script if transfer fails.
  local xfr_status="$1"
  (( xfr_status != 0 )) && die "A transfer failed! Check network status." "$xfr_status"
}

transfer() {
  local ip_addr hostip
  hostip="$1"
  # Skip local machine:
  ip_addr="$(local_ip)"
  if [[ "$ip_addr" == "$hostip" ]]; then
    printf "%sSkipping Machine %s (local client)%s\n\n" "$green" "$hostip" "$normal"
    return
  fi
  # Check for machines and sync if on-line:
  printf "%sChecking for %s...%s\n" "$green" "$hostip" "$normal"
  if  ping -c 3 "$LOCALNET.$hostip" >/dev/null 2>&1
  then
    printf "...Syncing to Machine %s\n" "$hostip"
    syncscript "$hostip"
    printf "\n...Machine %s Synced!\n\n" "$hostip"
  else
    printf "\n...Skipping %s! Not on network.\n\n" "$hostip"
  fi
}

syncscript() {
  local exit_status hostip
  hostip="$1"

  # printf "\n%sSyncing ~/.bashrc ...%s\n" "$orange" "$normal"
  # rsync -avh --delete "$HOME"/.bashrc "$LOCALNET.$hostip":
  # exit_status="$?"
  # transfer_status "$exit_status"

  # printf "\n%sSyncing ~/bash_aliases ...%s\n" "$orange" "$normal"
  # rsync -avh --delete "$HOME"/.bash_aliases "$LOCALNET.$hostip":
  # exit_status="$?"
  # transfer_status "$exit_status"

  printf "\n%sSyncing Password Databases...%s\n" "$orange" "$normal"
  rsync -avh --delete --include="*.kdbx" --exclude="*" "$HOME"/Documents/ "$LOCALNET.$hostip":Documents/
  exit_status="$?"
  transfer_status "$exit_status"

  printf "\n%sSyncing homepage directory...%s\n" "$orange" "$normal"
  rsync -avh --delete --exclude '.git' --exclude '.gitignore' "$HOME"/Documents/homepage/ "$LOCALNET.$hostip":Documents/homepage/
  exit_status="$?"
  transfer_status "$exit_status"

  printf "\n%sSyncing ~/.local/share/doc... %s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/.local/share/doc/ "$LOCALNET.$hostip":.local/share/doc/
  exit_status="$?"
  transfer_status "$exit_status"

  printf "\n%sSyncing ~/Pictures/wallpaper... %s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/Pictures/wallpaper/ "$LOCALNET.$hostip":Pictures/wallpaper/
  exit_status="$?"
  transfer_status "$exit_status"

  printf "\n%sSyncing ~/Pictures/backgrounds... %s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/Pictures/backgrounds/ "$LOCALNET.$hostip":Pictures/backgrounds/
  exit_status="$?"
  transfer_status "$exit_status"

  case "$hostip" in
    16|22|153 )
      printf "\n%sSyncing Deb Packages...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/debpkgs/  "$LOCALNET.$hostip":debpkgs/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Git Repositories...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/gitea/ "$LOCALNET.$hostip":gitea/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Projects Repositories...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Projects/ "$LOCALNET.$hostip":Projects/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing ~/Documements/mosfanet ...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Documents/mosfanet/ "$LOCALNET.$hostip":Documents/mosfanet/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing ~/Work ...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Work/ "$LOCALNET.$hostip":Work/
      exit_status="$?"
      transfer_status "$exit_status"
      ;;
    11|12|13|14|15|20|23 )
      printf "\n%sSyncing ~/Documements/mosfanet ...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Documents/mosfanet/ "$LOCALNET.$hostip":Documents/mosfanet/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing ~/Work ...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Work/ "$LOCALNET.$hostip":Work/
      exit_status="$?"
      transfer_status "$exit_status"
      ;;
    * )
      # 17, 21, 24. 25 exclusions
      printf "\nMosfanet and Work directories were not synchronized.\n"
  esac
}

sync_one() {
  local hostip
  hostip="$1"
  if [[ "$hostip" -gt 0 && "$hostip" -lt 10 ]]; then
    printf "%s %s is a restricted address. Access denied.\n" "$RED_WARNING" $"$LOCALNET.$hostip"
    exit
  elif valid_ip "$hostip"; then
    printf "Synchronizing bin and template directories with %s:\n\n" "$LOCALNET.$hostip"
    transfer "$hostip"
    all_done
  fi
}

sync_some() {
  local hostip
  echo -e "Synchronizing directories with selected systems on the local network.\n"
  for hostip in "$@"; do
    if [[ "$hostip" -eq "$hostip" ]] 2>/dev/null; then
      if [[ "$hostip" -gt 0 && "$hostip" -lt 255 ]]; then
        case "$hostip" in
          1|2|3|4|5|6|7|8|9 )
            printf "%s %s is a restricted address. Access denied.\n" "$RED_WARNING" "$LOCALNET.$hostip"
          ;;
          * )
            transfer "$hostip"
        esac
      elif [[ "$hostip" -gt 254 ]]; then
        printf "%s %s is outside the range of static addresses.\n\n" "$RED_WARNING" "$LOCALNET.$hostip"
      else
        printf "%s Invalid argument: %s\n\n" "$RED_ERROR" "$hostip" >&2
      fi
    else
      printf "%sInteger argument expected.\n" "$RED_WARNING" >&2
    fi
  done
  all_done
}

sync_all() {
  local hostip octets
  octets=(11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)
  for hostip in "${octets[@]}"; do
    transfer "$hostip"
  done
  all_done
}

all_done() {
  box "All directories synced!" "-"
  printf "Script completed in %s\n" "$(format_time $SECONDS)"
}

check_host() {
  local main_host local_host ip_addr
  main_host="hp-800g2-sff"
  local_host="${HOSTNAME:-$(hostname)}"
  ip_addr="$(local_ip)"
  printf "Host: %s%s%s at " "$lightyellow" "$local_host" "$normal"
  printf "%s%s%s\n\n" "$lightyellow" "$LOCALNET.$ip_addr" "$normal"
  [[ "$local_host" != "$main_host" ]] && leave "Script must be run from $main_host!"
}

main() {
  check_package rsync
  if [[ "$#" -eq 0 ]]; then
    printf "%s No arguments passed.\n" "$RED_ERROR" >&2
    help 2
  elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
    help 0
  elif [[ "$1" == "-a" || "$1" == "--all" ]]; then
    check_host
    sync_all
  elif [[ "$1" == "-N" ]]; then
    show_notice
  elif [[ "$#" -gt 1 ]]; then
    check_host
    sync_some "$@"
  else
    check_host
    sync_one "$1"
  fi
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
