#!/usr/bin/env bash
##########################################################################
# Script Name  : sync-repos
# Description  : Synchronixz local Git repositories
# Dependencies : rsync
# Arguments    : See help() function for available options.
# Author       : Copyright Â© 2025 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail | rick.romig@mymetronet.net
# Created      : 10 Aug 2025
# Updated      : 15 Sep 2025
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="3.0.25258"

## Functions ##

help() {
	local errcode="${1:-2}"
	local -r updated="15 Sep 2025"
	cat << _HELP_
${orange}$script${normal} $version, Upated: $updated
Synchronixe Git repository and work directories between the main PC, the main
laptop, and the Gitea server,

${green}Usage:${normal} $script [-ghlm]
${orange}Available options:${normal}
	-g	Synchronize git repositories to Gitea server.
	-h	Show this help message and exit.
	-l	Synchronize git repositories to HP 850 G3.
	-m	Synchronize git repositories to HP 800 G2.
_HELP_
  exit "$errcode"
}

valid_host() {
	local local_host="$1"
	case "$local_host" in
		hp-800g2-sff|hp-850-g3 )
			return "$TRUE" ;;
		* )
			return "$FALSE"
	esac
}

sync_repos() {
	local remote_host="$1"
	local remote_ip="$2"
	transfer "$remote_ip" "$remote_host"
}

transfer_status() {
  local xfr_status="$1"
  if [[ "$xfr_status" -eq 0 ]]; then
		printf "Transfer successful\n"
	else
		printf "%s A transfer failed. Code: %d. Check network status.\n" "$RED_ERROR" "$xfr_status" >&2
	fi
}

transfer() {
  local ip_addr host_ip remote_host
  host_ip="$1"
	remote_host="$2"
  # Skip local machine:
  ip_addr="$(local_ip)"
  if [[ "$ip_addr" == "$host_ip" ]]; then
    printf "%sSkipping %s (local client)%s\n\n" "$green" "$remote_host" "$normal"
    return
  fi
  # Check for machines and sync if on-line:
  printf "%sChecking for %s...%s\n" "$green" "$remote_host" "$normal"
  if ping -c 3 "$LOCALNET.$host_ip" >/dev/null 2>&1; then
    printf "...Syncing to %s\n" "$remote_host"
    sync_script "$host_ip"
    printf "\n... %s Synced!\n\n" "$remote_host"
  else
    printf "\n...Skipping %s! Not on network.\n\n" "$remote_host"
  fi
}

sync_script() {
	local exit_status=0
	local hostip="$1"

  printf "\n%sSyncing Git Repositories...%s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/gitea/ "$LOCALNET.$hostip":gitea/
  exit_status="$?"
  transfer_status "$exit_status"

  printf "\n%sSyncing Projects Repositories...%s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/Projects/ "$LOCALNET.$hostip":Projects/
  exit_status="$?"
  transfer_status "$exit_status"

	printf "\n%sSyncing Deb Packages...%s\n" "$orange" "$normal"
	rsync -avh --delete "$HOME"/debpkgs/  "$LOCALNET.$hostip":debpkgs/
	exit_status="$?"
	transfer_status "$exit_status"

  printf "\n%sSyncing ~/Work ...%s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/Work/ "$LOCALNET.$hostip":Work/
  exit_status="$?"
  transfer_status "$exit_status"
}

main() {
	local noOpt opt optstr local_host
	local_host="${HOSTNAME:-$(hostname)}"
	noOpt="1"
	optstr=":ghlm"
	check_package rsync
	while getopts "$optstr" opt; do
		case "$opt" in
			g )
				if valid_host "$local_host"; then
					sync_repos "hp-8300-usdt" "16"
				else
					printf "%s Invalid host: %s\n" "$RED_ERROR" "$local_host" >&2
					help 2
				fi
				;;
			h )
				help 0
			;;
			l )
				if valid_host "$local_host"; then
					sync_repos "hp-850-g3" "22"
				else
					printf "%s Invalid host: %s\n" "$RED_ERROR" "$local_host" >&2
					help 2
				fi
				;;
			m )
				if valid_host "$local_host"; then
					sync_repos "hp-800g2-sff" "10"
				else
					printf "%s Invalid host: %s\n" "$RED_ERROR" "$local_host" >&2
					help 2
				fi
				;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
