#!/usr/bin/env bash
###############################################################################
# Script Name  : z-update
# Description  : Updates system automatically using anacron or cron
# Dependencies : None
# Arguments    : None
# Author       : Copyright (C) 2023, Richard B. Romig
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 20 Jun 2023
# Updated      : 12 Oct 2025
# Comments     : anacron job: Copy to /etc/cron.weekly as root (or sudo) user
#              : cron job: Copy to /usr/local/bin or /opt/bin as root (or sudo) user
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
###############################################################################

SECONDS=0

# shellcheck disable=SC2001
over_line() {
  local char len line title
  title="$1"
  char="${2:--}"
  len=${#char}
  (( len > 1 )) && char=${char::1}
  line=$(echo "$title" | sed "s/./$char/g")
  printf "%s\n%s\n"  "$line" "$title"
}

check_disk_space() {
  local df_stats r_size r_used r_perc r_avail
	df_stats=$(df -h / | awk 'NR==2 {print $2,$3,$4,$5}')
	r_size=$(echo "$df_stats" | cut -d ' ' -f1)
	r_used=$(echo "$df_stats" | cut -d ' ' -f2)
	r_perc=$(echo "$df_stats" | cut -d ' ' -f4)
	r_avail=$(echo "$df_stats" | cut -d ' ' -f3)
  printf "\nDisk space used (root): %s/%s %s used, %s available.\n" "$r_used" "$r_size" "$r_perc" "$r_avail"
}

format_time() {
  local ET h m s
  ET="$1"
  ((h=ET/3600))
  ((m=(ET%3600)/60))
  ((s=ET%60))
  printf "%02d:%02d:%02d\n" $h $m $s
}

check_flatpaks() {
  local fp_count
  if command -v flatpak > /dev/null 2>&1; then
    fp_count=$(flatpak list | wc -l)
    if [[ "$fp_count" -gt 0 ]]; then
      printf "Flatpak updates:\n"
      flatpak update --system --noninteractive --force-remove --assumeyes 2> /dev/null | sed '/^$/d'
    else
      printf "No Flatpak packages installed.\n\n"
    fi
  else
    printf "Flatpack is not installed.\n"
  fi
}

get_updates() {
  local nupd fields field1 field2 field3
  /usr/bin/apt-get update
  fields=$(apt-get dist-upgrade -s | awk '$2 == "upgraded," {print $1,$3,$6,$(NF-2)}')
  field1=$(echo "$fields" | cut -d' ' -f1)
  field2=$(echo "$fields" | cut -d' ' -f2)
  field3=$(echo "$fields" | cut -d' ' -f3)
  nupd=$((field1 + field2 + field3))
  if [[ "$nupd" -gt 0 ]]; then
    printf "\n*** Installing updates ***\n"
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get dist-upgrade -yy
  else
    printf "\nPackages are up to date\n"
  fi
}

autoremove_packages() {
  local npkgs
  npkgs=$(apt-get autoremove -s | grep "^[[:digit:]]\+ upgraded" | cut -d' ' -f6)
  if [[ "$npkgs" -gt 0 ]]; then
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get autoremove --purge -yy
  else
    printf "No packages to be removed.\n"
  fi
}

main() {
  local script="${0##*/}"
  local version="1.5.25285"
  local lhost="${HOSTNAME:-$(hostname)}"
  local log_file="/var/log/update.log"
  local sed_file="/usr/share/misc/updatelog.sed"
  {
    printf "%s weekly update\n" "$lhost"
    printf "Date: %(%a %F %R)T\n"
	  check_disk_space
    printf "\n*** Checking for updates ***\n"
    get_updates
    printf "\n*** Cleaning APT cache ***\n"
    /usr/bin/apt-get autoclean
    printf "\n*** Removing orphaned packages ***\n"
    autoremove_packages
    printf "\n*** Flatpak updates ***\n"
    check_flatpaks
	  check_disk_space
    printf "Update completed in %s\n" "$(format_time $SECONDS)"
    [[ -f /var/run/reboot-required || -f /run/reboot-required ]] && printf "\nREBOOT REQUIRED\n"
    over_line "$script $version"
  } > "$log_file" 2>&1
  sed -i -f "$sed_file" "$log_file"
  exit
}

main "$@"
