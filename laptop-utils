#!/usr/bin/env bash
##########################################################################
# Script Name  : laptop-utils
# Description  : Installs laptop-specific utilities
# Dependencies : None
# Args         : See help()
# Author       : Copyright (C) 2023, Richard Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 23 Mar 2023
# Updated      : 02 Sep 2025
# Comments     : Based on a script by Joe Collins.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2; exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="7.0.25245"

## Funtions ##

help() {
	local errcode="${1:-2}"
	local updated="02 Sep 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs laptop-specific utlities.

${green}Usage:${normal} $script [-hist]
${orange}Available options:${normal}
  -h  Show this help message and exit.
  -i  Install laptop utilities.
  -s  Display installed utilities.
  -t  Start TLP service.
_HELP_
  intro
  exit "$errcode"
}

intro() {
  cat << _INTRO_
Installs laptop-specific utilities:
 * Thermald - monitors and controls temperature.
 * ACPI - checks the state of ACPI devices.
 * TLP - advanced power management to maximize battery life.
 * TLP-RDW - TLP radio device wizard.
_INTRO_
}

install_thermald() {
  if [[ -f /usr/sbin/thermald ]]; then
    printf "Thermald is already installed.\n"
  else
    sudo apt-get install thermald -yy
    printf "Thermald installed.\n"
  fi
}

install_acpi() {
  if exists acpi; then
    printf "ACPI is already installed.\n"
  else
    sudo apt-get install acpi -yy
    printf "ACPI installed.\n"
  fi
}

install_tlp() {
  if [[ -f /usr/sbin/tlp ]]; then
    echo "TLP is already installed."
  else
    sudo apt-get install tlp tlp-rdw -yy
    start_tlp_service
    printf "TLP installed.\n"
  fi
}

tlp_status() {
  local status=1
  if [[ -f /usr/sbin/tlp ]]; then
    is_systemd && { systemctl status tlp | grep -qw active && status=0; }
    is_sysv && { tlp-stat -s | grep -qw enabled && status=0; }
    if [[ "$status" -eq 1 ]]; then
      printf "Starting TLP service\n"
      start_tlp_service
    else
      printf "TLP service is active and running.\n"
    fi
  else
    printf "TLP is not installed.\n"
  fi
}

start_tlp_service() {
  if is_systemd; then
    sudo systemctl enable tlp.service > /dev/null 2>&1
    sudo systemctl start tlp.service > /dev/null 2>&1
    sudo systemctl mask systemd-rfkill.service > /dev/null 2>&1
    sudo systemctl mask systemd-rfkill.socket > /dev/null 2>&1
    printf "The tlp service is enabled and started.\n"
  elif is_sysv; then
    sudo tlp start > /dev/null 2>&1
    printf "The tlp service is started.\n"
  else
    printf "Init system is not Systemd or SysV.\n"
    printf "Manually start the TLP service.\n"
  fi
}

installed_utils() {
  printf "Installed utilities:\n"
  [[ -f /usr/sbin/thermald ]] && printf "%12s\n" "Thermald"
  exists acpi && printf "%8s\n" "ACPI"
  [[ -f /usr/sbin/tlp ]] && printf "%7s\n" "TLP"
  exists tlp-rdw && printf "%11s\n" "TLP-RDW"
}

main() {
  local lhost noOpt opt optstr
  lhost="${HOSTNAME:=-$(hostname)}"
  noOpt=1
  optstr=":hist"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
        help 0
        ;;
      i )
        if is_laptop; then
          intro
          sudo_login 2
          install_thermald
          install_acpi
          install_tlp
          installed_utils
        else
          printf "%s is not a laptop. Nothing to do.\n" "$lhost" >&2
        fi
        ;;
      s )
        if is_laptop; then
          installed_utils
        else
          printf "%s is not a laptop. Nothing to do.\n" "$lhost" >&2
        fi
        ;;
      t )
        if is_laptop; then
          sudo_login 2
          tlp_status
        else
          printf "%s is not a laptop. Nothing to do.\n" "$lhost" >&2
        fi
        ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
