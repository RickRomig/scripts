#!/usr/bin/env bash
###############################################################################
# Script Name  : scan-range
# Description  : Scans a range of IP addresses to determine if online.
# Dependencies : arping (iputils-arping)
# Arguments    : Beginning and last octets of range to be scanned.
# Author       : Copyright (C) 2022, Richard B. Romig, 27 Jul 2022
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Adapted from a script by Dave McKay at howtogeek.com
# TODO (Rick)  : 
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.1"
readonly _updated="08 Sep 2023"

## Functions ##

help() {
	local errcode="${1:-2}"
	cat << END_HELP
Scans a range of IP addresses to determine if they are online.
${orange}Usage:${normal} $_script IP1 IP2
Example: $_script 10 20
Takes 2 integers between 1 and 254 (last octets of the local network range)
$_script $_version ($_updated)
END_HELP
	exit "$errcode"
}

check_arg_values() {
	local ip1="$1"
	local ip2="$2"
	if [[ "$ip1" =~ ^[0-9]+$ && "$ip2" =~ ^[0-9]+$ ]] 2>/dev/null; then
		if [[ "$ip1" -lt 1 || "$ip2" -ge 255 ]]; then
			printf "%s Invalid range. Values must be integers between 1 and 254.\n" "$red_error" <&2
			help "1"
		fi
	else
		printf "%s Invalid argument. Values must be integers between 1 and 254.\n" "$red_error" <&2
		help "1"
	fi
}

scan_range() {
	local ip1="$1"
	local ip2="$2"
	for (( ip=ip1; ip<=ip2; ip++ )); do
		if arping -c 1 "$localnet.$ip" | grep -E "0 response|0 packets received" > /dev/null; then
			printf "%s.%s didn't respond.\n" "$localnet" "$ip"
		else
			printf "%s.%s responded.\n" "$localnet" "$ip"
		fi
	done
}

## Execution ##

box "$_script $_version ($_updated)"
check_package iputils-arping
[[ $# -lt 2 ]] && help "1"
addr1="$1"
addr2="$2"
check_arg_values "$addr1" "$addr2"
scan_range "$addr1" "$addr2"
leave "" 
