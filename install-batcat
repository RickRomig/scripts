#!/usr/bin/env bash
##########################################################################
# Script Name  : install-batcat
# Description  : install/remove/configure bat/batcat
# Dependencies : curl
# Arguments    : see help()
# Author       : Copyright © 2024 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 03 Aug 2024
# Last updated : 22 Aug 2024
# Comments     : the executable and its manpage will be renamed from ‘bat’ to ‘batcat’
#              : because of a file name clash with another Debian package.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="1.4.24235"
readonly _updated="22 Aug 2024"
readonly cfg_d=$HOME"/.config/bat"

## Functions ##

help() {
	errcode="${1:-2}"
	cat << END_HELP
${orange}$_script${normal} $_version, Upated: $_updated
Installs/removes/configures bat/batcat

${green}Usage:${normal} $_script [OPTION]

${orange}Available options:${normal}
  -c  Install bat configuration
	-h	Show help
	-i	Install bat from Debian/Ubuntu repositories
	-r	Remove bat and configuration
END_HELP
  exit "$errcode"
}

bat_version() {
	dpkg -l bat 2>/dev/null | awk '/ii/ {print $3}' | sed 's/[~+-].*//'
}

install_bat() {
	sudo apt-get install -yy bat
	bat_config
	[[ -L "$HOME"/.local/bin/bat ]] || ln -s /usr/bin/batcat "$HOME"/.local/bin/bat
	printf "bat (batcat) version %s installed.\n" "$(bat_version)"
}

remove_bat() {
  printf "Removing Bat %s...\n" "$(bat_version)"
	sudo apt-get remove --purge -y bat
	purge_config
	[[ -L "$HOME"/.local/bin/bat ]] && unlink "$HOME"/.local/bin/bat
  printf "Bat has been removed.\n"
}

bat_config() {
  local cfg_file localip repository
  localip=$(local_ip)
  cfg_file="config"
  [[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
  printf "Applying Bat configuration...\n"
	if [[ "$localip" == "16" ]]; then
    repository="$HOME/gitea/configs/bat"
    cp -v "$repository/$cfg_file" "$cfg_d/"
  else
    repository="configs/raw/branch/main/bat"
    curl -so "$cfg_d/$cfg_file" "$Gitea_URL/$repository/$cfg_file"
  fi
  printf "Bat configuration applied.\n"
}

purge_config() {
  local bu_d="$HOME/.config/backup/bat"
	if default_no "Remove configuration files?"; then
		[[ -d "$cfg_d" ]] && rm -rf "$cfg_d"
		[[ -d "$bu_d" ]] && rm -rf "$bu_d"
		printf "Bat configuration files removed.\n"
	else
		printf "Kept user configuration files.\n"
	fi
}

## Execution ##

check_package curl
noOpt=1
optstr=":chir"
while getopts "$optstr" opt; do
	case "$opt" in
		c )
			exists bat || leave "Bat is not installed."
			bat_config
		;;
		h )
			help 0
		;;
		i )
			exists bat && leave "Bat $(bat_version) is already installed."
			sudo_login 2
			install_bat
		;;
		r )
			exists bat || leave "Bat is not installed."
			sudo_login 2
			remove_bat
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
leave "$_script $_version"