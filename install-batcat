#!/usr/bin/env bash
##########################################################################
# Script Name  : install-batcat
# Description  : install/remove/configure bat/batcat (repo version)
# Dependencies : git
# Arguments    : see help()
# Author       : Copyright © 2024 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 03 Aug 2024
# Last updated : 04 Jun 2025
# Comments     : the executable and its manpage will be renamed from ‘bat’ to ‘batcat’
#              : because of a file name clash with another Debian package.
#              : Mint 22 installs version 0.24.0 with the Ubuntu version appended.
#              : Debian 13 installs version 0.25.0 with the Debian version appended.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="2.0.25155"
# readonly cfg_d=$HOME"/.config/bat"

## Functions ##

help() {
	local errcode updated
	errcode="${1:-2}"
	updated="04 Jun 2025"
	cat << _HELP_
${orange}$script${normal} $version, Updated: $updated
Installs/removes/configures bat/batcat

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -c	Install bat configuration
  -h	Show this help message and exit
  -i	Install bat from Debian/Ubuntu repository
  -r	Remove bat and configuration files
_HELP_
  exit "$errcode"
}

bat_version() {
	bat --version | cut -d' ' -f2
}

install_bat() {
	sudo apt-get install -yy bat
	bat_config
	printf "bat (batcat) version %s installed.\n" "$(bat_version)"
}

remove_bat() {
  printf "Removing Bat %s...\n" "$(bat_version)"
	sudo apt-get remove --purge -y bat
	if default_no "Remove configuration files?"; then
		[[ -d "HOME/.config/bat" ]] && rm -rf "HOME/.config/bat"
		[[ -d "$HOME/.config/backup/bat" ]] && rm -rf "$HOME/.config/backup/bat"
		[[ -L "$HOME/.config/bat/config" ]] && unlink "$HOME/.config/bat/config"
		printf "Bat configuration files removed.\n"
	else
		printf "Kept user configuration files.\n"
	fi
	[[ -L "$HOME"/.local/bin/bat ]] && unlink "$HOME"/.local/bin/bat
  printf "Bat has been removed.\n"
}

bat_config() {
	local repository
	repository=$(assign_cfg_repo)
	[[ -d "$HOME/.config/bat" ]] || mkdir -p "$HOME/.config/bat"
  printf "Applying Bat configuration...\n"
	[[ -f "$HOME/.config/bat/config" ]] && rm "$HOME/.config/bat/config"
	ln -s "$repository/bat/config" "$HOME/.config/bat/config"
	[[ -f /usr/bin/batcat ]] && ln -s /usr/bin/batcat "$HOME/.local/bin/bat"
  printf "Bat configuration applied.\n"
}

main() {
	local noOpt opt optstr
	noOpt=1
	optstr=":chir"
	while getopts "$optstr" opt; do
		case "$opt" in
			c )
				exists bat || leave "Bat is not installed."
				bat_config
			;;
			h )
				help 0
			;;
			i )
				exists bat && leave "Bat $(bat_version) is already installed."
				sudo_login 2
				install_bat
			;;
			r )
				exists bat || leave "Bat is not installed."
				sudo_login 2
				remove_bat
			;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
}

## Execution ##

main "$@"
