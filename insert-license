#!/usr/bin/env bash
###############################################################################
# Script Name  : insert-license
# Description  : Insert a license into a shell script or C source code.
# Dependencies : bat, micro (nano)
# Arguments    : Shell script or C source file
# Author       : Copyright (C) 2019, Richard B. Romig, Moafanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Jun 2019
# Updated      : 31 Oct 2024
# Comments     : Inserts the license immediately after the file's header.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.3.24305"
readonly _updated="131 Oct 2024"
readonly conf_dir="$HOME/.config/scripts"
readonly conf_file="$_script.conf"
cur_yr=$(echo -e "\UA9 $(date +%Y)"); readonly cur_yr
verbose_mode="$FALSE"

## Functions ##

create_conf() {
  [[ -d "$conf_dir" ]] || mkdir -p "$conf_dir"
  echo "Complete all fields"
  read -rp "Full name: " copy_holder
  read -rp "Primary email: " email_addr
  read -rp "Template diretory (full path): " template_dir

  echo "
  copy_holder='$copy_holder'
  email_addr='$email_addr'
  template_dir='$template_dir'
  " > "$conf_dir/$conf_file"
}

help() {
  local errcode="${1:-2}"
  cat << _HELP_
${orange}$_script${normal} $_version ($_updated)
Inserts an Open Source license into a shell script or a C/C++ source code file.

${green}Usage:${normal} $_script [OPTION] [source-file]

${orange}Available options:${normal}
  -c  C code
      $_script -c <c-source.c>
  -e  Edit $_script.conf
  -h  Show this help text.
  -p  C++ code
      $_script -p <c-source.cpp>
  -s  Shell script
      $_script -s <shell-script>
  -v  Enable verbose mode
_HELP_
  exit "$errcode"
}

show_message() {
	local message="$1"
	[[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

## Execution ##

box " $_script $_version"

noOpt=1
optstr=":c:ehp:s:v"
while getopts "$optstr" opt; do
  case "$opt" in
    c )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
      show_message "File: $code_file"
      code_type="C"
      show_message "Code type: $code_type source code"
    ;;
    e )
      if [[ -f "$conf_dir/$conf_file" ]]; then
        micro "$conf_dir/$conf_file"
			  printf "%s edited.\n" "$_script"
      else
        create_conf
      fi
    ;;
    h )
      help 0
    ;;
    p )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
      show_message "File: $code_file"
      code_type="C++"
      show_message "Code type: $code_type source code"
    ;;
    s )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
      show_message "File: $code_file"
      code_type="Shell"
      show_message "Code type: $code_type script"
    ;;
		v )
			verbose_mode="$TRUE"
			show_message "Verbose mode enabled."
		;;
    : )
      printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
      help 2
    ;;
    ? )
			printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
shift "$(( OPTIND - 1 ))"

[[ -z "$code_file" ]] && leave "No file selected."

## Source script configuration file ##

[[ -f "$conf_dir/$conf_file" ]] || create_conf
source "$conf_dir/$conf_file"

show_message "Creating temporary file."
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
trap cleanup EXIT

printf "Inserts an Open Source license into a shell script or a C/C++ source code file.\n"
printf "Licensed under the GNU General Public License, version 2.\n"
printf "Copyright \UA9 2019-2023, Richard B. Romig\n"

# Select the type of license

printf "\n%sLicense type:%s\n" "$orange" "$normal"
options=("GPL v1" "GPL v2" "GPL v3" "MIT")
PS3="Select the type of license: "
select opt in "${options[@]}"; do
  case $REPLY in
    1 )
      lic_type="$opt"
      lic_file="gpl_v1.txt"
      break
    ;;
    2 )
      lic_type="$opt"
      lic_file="gpl_v2.txt"
      break
    ;;
    3 )
      lic_type="$opt"
      lic_file="gpl_v3.txt"
      break
    ;;
    4 )
      lic_type="$opt"
      lic_file="mit_lic.txt"
      break
    ;;
    * )
      printf "%sInvalid option. Try again.%s\n" "$lightred" "$normal" >&2
  esac
done
show_message "License: $lic_type"

# Insert the license into the source file

printf "%sInserting %s license into %s...%s\n" "$orange" "$lic_type" "$code_file" "$normal"
case $code_type in
  "C" )
    sed -e '1d' \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
        -e "s/<EMAIL>/$email_addr/" \
        -e "s/^/ * /" "$template_dir/$lic_file" > "$tmp_file"
    sed -i -e "21r ${tmp_file}" "$code_file"
  ;;
  "C++" )
    sed -e '1d' \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
        -e "s/<EMAIL>/$email_addr/" \
        -e "s/^/\/\/ /" "$template_dir/$lic_file" > "$tmp_file"
    sed -i -e "20r ${tmp_file}" "$code_file"
  ;;
  "Shell" )
    sed -e '1d' \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
        -e "s/<EMAIL>/$email_addr/" \
        -e "s/^/# /" "$template_dir/$lic_file" > "$tmp_file"
    sed -i -e "15r ${tmp_file}" "$code_file"
  ;;
  * )
    die "Invalid code type. Exiting the script." 1
esac

printf "\n%s license has been inserted into %s.\n" "$lic_type" "$code_file"
edit_view_quit "$code_file"

printf "\n"
leave ""
