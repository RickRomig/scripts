#!/usr/bin/env bash
##########################################################################
# Script Name  : insert-license
# Description  : Insert a license into a shell script or C source code.
# Dependencies : bat, micro (nano)
# Arguments    : Shell script or C source file
# Author       : Copyright (C) 2019, Richard B. Romig, Moafanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Jun 2019
# Updated      : 15 Oct 2025
# Comments     : Inserts the license immediately after the file's header.
#              : Assumes the standard script or C/C++ header is present.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="4.5.25288"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="15 Oct 2025"
  cat << _HELP_
${orange}$script${normal} $version ($updated)
Inserts an Open Source license into a shell script or a C/C++ source code file.

${green}Usage:${normal} $script [-h] [-c c-source-file] [-p cpp-source-file] [-s shell-script]
${orange}Available options:${normal}
  -c  C code
      $script -c <c-source.c>
  -h  Show this help message and exit
  -p  C++ code
      $script -p <c-source.cpp>
  -s  Shell script
      $script -s <shell-script>
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

create_tmp_file() {
	printf "Creating temporary file.\n"
	tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
	trap cleanup EXIT
}

insert_license() {
	local cur_yr options script_dir
	local code_type="$1"
	local code_file="$2"
	local copy_holder="Richard B. Romig"
	local email_addr="rick.romig@gmail.com"
	cur_yr=$(echo -e "\UA9 $(date +%Y)")
	script_dir=$(dirname "$(readlink -f "${0}")")
	local template_dir="$script_dir/Templates"

	# Select license type
	printf "\n%sLicense type:%s\n" "$orange" "$normal"
	options=("GPL v1" "GPL v2" "GPL v3" "MIT")
	PS3="Select the type of license: "
	select lic_type in "${options[@]}"; do
		case $REPLY in
    1 )
      lic_file="gpl_v1.txt"
      break
			;;
    2 )
      lic_file="gpl_v2.txt"
      break
			;;
    3 )
      lic_file="gpl_v3.txt"
      break
			;;
    4 )
      lic_file="mit_lic.txt"
      break
			;;
    * )
      printf "%sInvalid option. Try again.%s\n" "$lightred" "$normal" >&2
		esac
	done
	printf "License: %s\n" "$lic_type"

	# Insert the license into the source file
	printf "Inserting %a license into %s.\n" "$lic_type" "$code_file"
	case $code_type in
	"C" )
		sed -e '1d' \
			-e "s/<YEAR>/$cur_yr/" \
			-e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
			-e "s/<EMAIL>/$email_addr/" \
			-e "s/^/ * /" "$template_dir/$lic_file" > "$tmp_file"
		sed -i -e "21r ${tmp_file}" "$code_file"
		;;
	"C++" )
		sed -e '1d' \
			-e "s/<YEAR>/$cur_yr/" \
			-e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
			-e "s/<EMAIL>/$email_addr/" \
			-e "s/^/\/\/ /" "$template_dir/$lic_file" > "$tmp_file"
		sed -i -e "20r ${tmp_file}" "$code_file"
		;;
	"Shell" )
		sed -e '1d' \
			-e "s/<YEAR>/$cur_yr/" \
			-e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
			-e "s/<EMAIL>/$email_addr/" \
			-e "s/^/# /" "$template_dir/$lic_file" > "$tmp_file"
		sed -i -e "15r ${tmp_file}" "$code_file"
		;;
	* )
		die "Invalid code type. Exiting the script." 1
	esac

	printf "\n%s license has been inserted into %s." "$lic_type" "$code_file"
}

main() {
	local noOpt opt optstr code_file code_type
	noOpt=1
	optstr=":c:hp:s:"
	while getopts "$optstr" opt; do
	case "$opt" in
		c )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
			printf "File: %s\n" "$code_file"
			code_type="C"
			printf "Code type: %s source code\n" "$code_type"
			create_tmp_file
			;;
		h )
			help 0
			;;
		p )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
			printf "File: %s\n" "$code_file"
			code_type="C++"
			printf "Code type: %s source code\n" "$code_type"
			create_tmp_file
			;;
		s )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
			printf "File: %s\n" "$code_file"
			code_type="Shell"
			printf "Code type: %s source code\n" "$code_type"
			create_tmp_file
			;;
		: )
			printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
			;;
		? )
			printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	[[ "$code_file" ]] || { printf "%s No code file provided.\n" "$RED_ERROR" >&2; help 2; }
	insert_license "$code_type" "$code_file"
	edit_view_quit "$code_file"
	over_line "$script $version"
	printf "MOTD: "; leave ""
}

## Executtion **

main "$@"
