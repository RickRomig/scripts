#!/usr/bin/env bash
###############################################################################
# Script Name  : insert-license
# Description  : Insert a license into a shell script or C source code.
# Dependencies : bat, micro (nano)
# Arguments    : Shell script or C source file
# Author       : Copyright (C) 2019, Richard B. Romig, Moafanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Jun 2019
# Updated      : 11 Jul 2025
# Comments     : Inserts the license immediately after the file's header.
#              : Assumes the standard script or C/C++ header is present.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script_dir=$(dirname "$(readlink -f "${0}")"); readonly script_dir
readonly script="${0##*/}"
readonly version="4.4.25192"
verbose_mode="$FALSE"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="11 Jul 2025"
  cat << _HELP_
${orange}$script${normal} $version ($updated)
Inserts an Open Source license into a shell script or a C/C++ source code file.

${green}Usage:${normal} $script [-hN] [-vc c-source-file] [-vp cpp-source-file] [-vs shell-script]
${orange}Available options:${normal}
  -c  C code
      $script -c <c-source.c>
  -h  Show this help message and exit
  -p  C++ code
      $script -p <c-source.cpp>
  -s  Shell script
      $script -s <shell-script>
  -v  Enable verbose mode (Must precede -c, -p, or -s flags)
      $script -vs <shell-script>
  -N  Display GPL Terms & Conditions notice
_HELP_
  exit "$errcode"
}

show_notice() {
	printf "%s\n" "$script"
	printf "Inserts an Open Source license into a shell script or a C/C++ source code file.\n"
	printf "Copyright (C) 2019, Richard B. Romig\n"
	printf "Email: rick.romig@gmail.com\n\n"
	cat "$script_dir/files/gpl_notice.txt"
}

show_message() {
	local message="$1"
	[[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	show_message "Removing temporary file."
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

create_tmp_file() {
	show_message "Creating temporary file."
	tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
	trap cleanup EXIT
}

insert_license() {
	local code_file code_type copy_holder cur_yr email_addr options lic_file lic_type template_dir
	code_type="$1"
	code_file="$2"
	copy_holder="Richard B. Romig"
	email_addr="rick.romig@gmail.com"
	cur_yr=$(echo -e "\UA9 $(date +%Y)")
	template_dir="$script_dir/Templates"

	# Select license type
	printf "\n%sLicense type:%s\n" "$orange" "$normal"
	options=("GPL v1" "GPL v2" "GPL v3" "MIT")
	PS3="Select the type of license: "
	select lic_type in "${options[@]}"; do
		case $REPLY in
    1 )
      lic_file="gpl_v1.txt"
      break
			;;
    2 )
      lic_file="gpl_v2.txt"
      break
			;;
    3 )
      lic_file="gpl_v3.txt"
      break
			;;
    4 )
      lic_file="mit_lic.txt"
      break
			;;
    * )
      printf "%sInvalid option. Try again.%s\n" "$lightred" "$normal" >&2
		esac
	done
	show_message "License: $lic_type"

	# Insert the license into the source file
	show_message "Inserting $lic_type license into $code_file."
	case $code_type in
	"C" )
		sed -e '1d' \
			-e "s/<YEAR>/$cur_yr/" \
			-e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
			-e "s/<EMAIL>/$email_addr/" \
			-e "s/^/ * /" "$template_dir/$lic_file" > "$tmp_file"
		sed -i -e "21r ${tmp_file}" "$code_file"
		;;
	"C++" )
		sed -e '1d' \
			-e "s/<YEAR>/$cur_yr/" \
			-e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
			-e "s/<EMAIL>/$email_addr/" \
			-e "s/^/\/\/ /" "$template_dir/$lic_file" > "$tmp_file"
		sed -i -e "20r ${tmp_file}" "$code_file"
		;;
	"Shell" )
		sed -e '1d' \
			-e "s/<YEAR>/$cur_yr/" \
			-e "s/<COPYRIGHT HOLDER>/$copy_holder/" \
			-e "s/<EMAIL>/$email_addr/" \
			-e "s/^/# /" "$template_dir/$lic_file" > "$tmp_file"
		sed -i -e "15r ${tmp_file}" "$code_file"
		;;
	* )
		die "Invalid code type. Exiting the script." 1
	esac

	printf "\n%s license has been inserted into %s." "$lic_type" "$code_file"
}

main() {
	local noOpt opt optstr code_file code_type
	noOpt=1
	optstr=":c:hp:s:vN"
	while getopts "$optstr" opt; do
	case "$opt" in
		c )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
			show_message "File: $code_file"
			code_type="C"
			show_message "Code type: $code_type source code"
			create_tmp_file
			;;
		h )
			help 0
			;;
		p )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
			show_message "File: $code_file"
			code_type="C++"
			show_message "Code type: $code_type source code"
			create_tmp_file
			;;
		s )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
			show_message "File: $code_file"
			code_type="Shell"
			show_message "Code type: $code_type script"
			create_tmp_file
			;;
		v )
			verbose_mode="$TRUE"
			show_message "Verbose mode enabled."
			;;
			N )
				show_notice
				exit 0
				;;
		: )
			printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
			;;
		? )
			printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	[[ "$code_file" ]] || { printf "%s No code file provided.\n" "$RED_ERROR" >&2; help 2; }
	insert_license "$code_type" "$code_file"
	edit_view_quit "$code_file"
	over_line "$script $version"
	printf "MOTD: "; leave ""
}

## Executtion **

main "$@"
