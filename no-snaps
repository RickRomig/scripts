#!/usr/bin/env bash
##########################################################################
# Script Name  : no-snaps
# Description  : Enable/disable Snaps in Debian/Ubuntu-based systems.
# Dependencies : None
# Arguments    : [-d] [-e] [-h] [-r] [-s] (See help function)
# Author       : Copyright (C) 2020, Richard B. Romig, MosfaNet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 30 Jun 2020
# Updated      : 30 Apr 2024
# Comments     : See EZNix snapkill script
#              : /home/rick/Downloads/Utilities/snapkill.d/snapkill
# TODO (Rick)  : Figure out what remove_snaps() does.
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

# Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.2.24121"
readonly _updated="30 Apr 2024"
readonly pref_file="/etc/apt/preferences.d/nosnap.pref"

## Functions ##

check_snap_installed() {
  printf "Snap is "
  if exists snap; then
    printf "installed.\n"
  else
    printf "not installed.\n"
  fi
}

snap_status() {
  if [[ -f "$pref_file" ]]; then
    grep -q '^# Package:' "$pref_file" && return "$TRUE" || return "$FALSE"
  else
    return "$TRUE"
  fi
}

remove_snaps() {
  leave "I don't know what this function does. Don't use!"
	local snap_pkgs snap_pkg
	snap_pkgs=$(snap list)
  # What do these loops actually do? What is the 'pkg' variable? Where dis I get this?
	for snap_pkg in "${snap_pkgs[@]}"; do
		[[ "$snap_pkg" != "snap_pkg" || "$pkg" != "snapd-desktop-integration" ]] && sudo snap remove --purge "$snap_pkg"
	done
	for snap_pkg in "${snap_pkgs[@]}"; do
		[[ "$snap_pkg" == "snap_pkg" || "$pkg" == "snapd-desktop-integration" ]] && sudo snap remove --purge "$snap_pkg"
	done
	sudo apt remove --autoremove snapd
	sudo apt install synaptic
	printf "Snap packages and snapd removed.\n"
}

enable_snaps() {
  is_systemd || leave "SystemD is required for Snaps."
  if [[ -f "$pref_file" ]]; then
    if grep -q '^Package:' "$pref_file"; then
      sudo sed -i '/^Package/s/^/# /;/^Pin/s/^/# /' "$pref_file"
      printf "\nInstallation of Snapd and Snap packages is now enabled.\n"
    else
      printf "\nInstallation of Snapd and Snap packages is already enabled by %s.\n" "$pref_file"
    fi
  else
    printf "\n%s does not exist. Installation of Snapd and Snap packages is enabled by default." "$pref_file"
  fi
}

disable_snaps() {
  if [[ -f "$pref_file" ]]; then
    if grep -q '^# Package:' "$pref_file"; then
      sudo sed -i '/Package/s/^# //;/Pin/s/^# //' "$pref_file"
      printf "\nInstallation of Snapd and Snap packages is now disabled.\n"
    else
      printf "\nInstallation of Snapd and Snap packages is already disabled.\n"
    fi
  else
    create_nosnaps
    printf "%s has been created. Installation of Snapd and Snap packages is now disabled.\n" "$pref_file"
  fi
}

create_nosnaps() {
  cat << NO_SNAPS sudo tee "$pref_file" > /dev/null
# To prevent repository packages from triggering the installation of Snap,
# this file forbids snapd from being installed by APT.
# For more information: https://linuxmint-user-guide.readthedocs.io/en/latest/snap.html

Package: snapd
Pin: release a=*
Pin-Priority: -10
NO_SNAPS
}

help() {
  local errcode="${1:=2}"
  cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -e    Enable the installation of snapd and snap packages
  -d    Disable the installation of snapd and snap packages
  -h    Help
  -r		Remove snapd and all snap packages.
  -s    Status of snapd and snap package installation
$_script v$_version, updated $_updated
END_HELP
  exit "$errcode"
}

## Execution ##

printf "Enables or disables the installation of Snapd and Snap packages.\n"
check_snap_installed

noOpt=1
optstr=":dehs"
while getopts "$optstr" opt; do
  case "$opt" in
    d )
      sudo_login 2
      snap_status && disable_snaps
    ;;
     e )
      sudo_login 2
      snap_status || enable_snaps
    ;;
    h )
      help 0
    ;;
    r )
      sudo_login 2
      remove_snaps
    ;;
    s )
      printf "\nStatus of snapd and snap packages: "
      snap_status && printf "Snaps are enabled.\n" || printf "Snaps are disabled.\n"
    ;;
    ? )
      printf "\n%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
      help 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
leave "$_script v$_version"
