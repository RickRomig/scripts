#!/usr/bin/env bash
##########################################################################
# Script Name  : mount-bu
# Description  : mounts/unmounts USB backup drive if not auto-detected.
# Dependencies : none
# Arguments    : [-h] [-m] [-s] [-u] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, 04 Jul 2022
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : For use with Joe Collins' BU backup script.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.3"
readonly _updated="29 Mar 2023"
readonly mount_location="/media/rick/BU_Drive"

## Functions ##

mount_bu() {
  lsblk -o NAME,SIZE,TYPE,MOUNTPOINT
  printf "\n"
  read -rp "Enter the device name to mount (Enter to cancel): " usbdrv
  [[ -z "$usbdrv" ]] && leave "Operation canceled."
  user_in_sudo
  printf "Mounting %s to %s ...\n" "$usbdrv" "$mount_location"
  [[ -d "$mount_location" ]] || sudo mkdir -p "$mount_location"
  sudo mount /dev/"$usbdrv" "$mount_location"
  printf "%s is mounted at %s\n" "$usbdrv" "$(lsblk | awk '/BU_Drive/ {print $NF}')"
}

umount_bu() {
  usbdrv=$(mount | awk '/BU_Drive/ {print $1}')
  user_in_sudo
  printf "Unmounting USB Backup drive at %s ...\n" "$mount_location"
  sudo umount "$mount_location"
  printf "BU_Drive (%s) is unmounted.\n" "$usbdrv"
}

bu_status() {
  printf "BU_Drive is "
  if lsblk | grep -qw BU_Drive; then
    printf "mounted.\n"
    return "$TRUE"
  else
    printf "not mounted.\n"
    return "$FALSE"
  fi
}

help() {
  local errcode="${1:=2}"
  cat << EOL
  ${green}Usage:${normal} $_script [-h] [-m] [-s] [-u]
  ${orange}OPTIONS:${normal}
    -h    Help
    -m    Mount USB Backup Drive (BU_Drive)
    -s    Status, is USB Backup Drive (BU_Drive) mounted?
    -u    Unmount USB Backup Drive (BU_Drive)
  ${green}NOTE:${normal} When prompted, enter only the drive, i.e., sdb1
EOL
  exit "$errcode"
}

## Execution ##

printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Mount/Unmount USB Backup drive.\n"

noOpt=1
optstr=":hmsu"
while getopts "$optstr" opt; do
  case "$opt" in
    h )
      help 0
      ;;
    m )
      if bu_status; then
        printf "No further action necessary.\n"
      else
        mount_bu
      fi
      ;;
    s )
      bu_status
      ;;
    u )
      if bu_status; then
        umount_bu
      else
        printf "No further action necessary.\n"
      fi
      ;;
    ? )
      printf "\e[91mERROR:\e[0m Invalid option -%s\n" "$OPTARG" >&2
      help 2 ;;
  esac
	noOpt=0
done
if [ $noOpt = 1 ];then printf "%s No argument passed.\n" "$red_error" >&2;help 1;fi
exit
