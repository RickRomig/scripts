#!/usr/bin/env bash
#############################################################################
# Script Name  : catless
# Description  : view text file with less or cat based on terminal window size.
# Dependencies : none
# Arguments    : See help()
# Author       : Copyright Â©  2020, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Crated       : 02 Jan 2020
# Updated      : 16 Jul 2025
# Comments     : Checks to see if passed argument is a valid text or json file.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
#############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="6.3.25197"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="29 Jun 2025"
  cat << _HELP_
${orange}$script${normal} $version (updated $updated)
Displays a text file using either cat or less depending the number of lines in
the file and the number of rows in the current terminal window. Less is used when
the number of lines is greater than the 87% of the rows, otherwise cat is used.

${green}Usage:${normal} $script [-h] [-f filename] [-n filename] [-N]
${orange}Available options:${normal}
  -f  View file without line numbers.
  -h  Show this help message and exit.
  -n  View file with line numbers.
  -N  Display GPL Terms & Conditions notice.
_HELP_
  exit "$errcode"
}

show_notice() {
  local script_dir
  script_dir=$(dirname "$(readlink -f "${0}")")
	printf "%s\n" "$script"
	printf "Displays a text file using either cat or less.\n"
	printf "Copyright (C) 2020, Richard B. Romig\n"
	printf "Email: rick.romig@gmail.com\n\n"
	cat "$script_dir/files/gpl_notice.txt"
}

check_file() {
	local filename="$1"
	if [[ ! -f "$1" ]]; then
		printf "%s %s not found.\n" "$RED_ERROR" "$1" >&2
		return "$FALSE"
	elif [[ ! -s "$1" ]]; then
		printf "%s %s is an empty file.\n" "$RED_ERROR" "$1" >&2
		return "$FALSE"
	elif file -bL "$1" | grep -qEi "text|json"; then
		return "$TRUE"
	else
		printf "%s %s is not a text file.\n" "$RED_ERROR" "$1" >&2
		return "$FALSE"
	fi
}

over_max() {
	local catmax filelines textfile
	textfile="$1"
	catmax=$(( $(tput lines)*87/100 ))
	filelines=$(wc -l < "$textfile")
	(( filelines > catmax )) && return "$TRUE" || return "$FALSE"
}

view_file() {
  local textfile="$1"
  local linenumbers="$2"
  if over_max "$textfile"; then
    case "$linenumbers" in
      0 )
        less -N "$textfile" ;;
      * )
        less "$textfile"
    esac
    head -n5 "$textfile"
  else
    case "$linenumbers" in
      0 )
        cat -n "$textfile" ;;
      * )
        cat "$textfile"
    esac
  fi
  printf "%sFile: %s%s\n" "$reverse" "$textfile" "$normal"
}

main() {
	local noOpt opt optstr filename linenumbers
	linenumbers="$FALSE"
	noOpt=1
	optstr=":f:hn:N"
	while getopts "$optstr" opt; do
	case "$opt" in
		f )
			filename="$OPTARG"
			check_file "$filename" && view_file "$filename" "$linenumbers"
			;;
		h )
			help 0
			;;
		n )
			filename="$OPTARG"
			linenumbers="$TRUE"
			check_file "$filename" && view_file "$filename" "$linenumbers"
			;;
		N )
			show_notice
			;;
		: )
			printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
			;;
		? )
			printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No option passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
