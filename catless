#!/usr/bin/env bash
#############################################################################
# Script Name  : catless
# Description  : view text file with less or cat based on terminal window size.
# Dependencies : functionlib (viewtext)
# Arguments    : $1 -> file to be viewed
# Author       : Copyright (C) 2020, Richard B. Romig, 02 Jan 2020
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Comments     : uses viewtext function from functionlib to view file.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
#############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.3"
readonly _updated="08 Feb 2023"

## Functions ##

help() {
  local errcode="${1:-2}"
  cat << END_HELP
  Usage: $_script [filename]
         $_script [OPTION]
  OPTION: -h  --help  Displays help.
  $_script displays a text file using either cat or less depending the number of
  lines in the file and the number of rows in the current terminal window. Less 
  is used when the number of lines is greater than the 90% of the rows, otherwise
  cat is used.
  Version: $_version
  Updated: $_updated
END_HELP
  exit "$errcode"
}

cat_used() {
  trows=$(tput lines)
  line_count=$(( trows*90/100 ))
  num_lines=$(wc -l "$filename" | cut -d " " -f1)
  (( num_lines <= line_count )) && return "$TRUE" || return "$FALSE"
}

## Check arguments ##

if [[ $# -eq 0 ]]; then
  echo "${lightred}ERROR:${normal} No argument passed." >&2
  help 2
elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
  help 0
elif [[ ! -f "$1" ]]; then
  echo "${lightred}ERROR:${normal} $1 not found." >&2
  help 2
else
  filename="$1"
fi

## View the selected file ##

clear
cat_used && box "File: $filename"
viewtext "$filename"

if cat_used; then
  print_line "*" 30
else
  box "File: $filename"
fi

leave "$_script v$_version ($_updated)"
