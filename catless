#!/usr/bin/env bash
#############################################################################
# Script Name  : catless
# Description  : view text file with less or cat based on terminal window size.
# Dependencies : none
# Arguments    : $1 -> file to be viewed
# Author       : Copyright Â©  2020, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Crated       : 02 Jan 2020
# Updated      : 27 Feb 2025
# Comments     : Checks to see if passed argument is a valid text or json file.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
#############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Variables ##

script=$(basename "$0"); readonly script
readonly version="4.11.25058"

## Functions ##

help() {
  local errcode updated
  errcode="${1:-2}"
  updated="27 Feb 2025"
  cat << _HELP_
${orange}$script${normal} $version (updated $updated)
Displays a text file using either cat or less depending the number of lines in
the file and the number of rows in the current terminal window. Less is used when
the number of lines is greater than the 87% of the rows, otherwise cat is used.
Line numbers can be displayed in the output by adding an 'n' or 'N' flag after the file name.

${green}Usage:${normal} $script [filename] [OPTION]

${orange}Available options:${normal}
  N | n        Enable line numbers in the output (option follows the filename)
  -h | --help  Show this help message and exit. (with the filename)
_HELP_
  exit "$errcode"
}

over_max() {
	local catmax filelines textfile
	textfile="$1"
	catmax=$(( $(tput lines)*87/100 ))
	filelines=$(wc -l < "$textfile")
	(( filelines > catmax )) && return "$TRUE" || return "$FALSE"
}

view_file() {
  local textfile="$1"
  local ln="$2"
  box "File: $textfile" "*"
  if over_max "$textfile"; then
    case "$ln" in
      [nN]* )
        less -N "$textfile"
        head -n5 "$textfile" ;;
      * )
        less "$textfile"
        head -n5 "$textfile"
    esac
  else
    case "$ln" in
      [nN]* )
        cat -n "$textfile" ;;
      * )
        cat "$textfile"
    esac
  fi
}

main() {
	local line_numbers="${2:-y}"
  if [[ $# -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 1
  elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
    help 0
  elif [[ ! -f "$1" ]]; then
    printf "%s %s not found.\n" "$RED_ERROR" "$1" >&2
    help 2
  elif [[ ! -s "$1" ]]; then
    printf "%s %s is an empty file.\n" "$RED_ERROR" "$1" >&2
    exit 1
  elif file -bL "$1" | grep -qEi "text|json"; then
    view_file "$1" "$line_numbers"
    over_line "$script $version" "-"
    exit 0
  else
    printf "%s %s is not a text file.\n" "$RED_ERROR" "$1" >&2
    help 1
  fi
}

## Execution ##

main "$@"
