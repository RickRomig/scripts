#!/usr/bin/env bash
###############################################################################
# Script Name  : redtube-dl
# Description  : Download videos from RedTube.com with best quality
# Dependencies : yt-dlp
# Arguments    : Video URL or ID number
# Author       : Copyright Â© 2019, Richard B. Romig, 05 April 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 April 2019
# Updated      : 22 Jun 2024
# Comments     : Accepts either full URL or video id such as 5431551
#              : Downloads to ~/Videos/Pornography/<category>
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.1.24174"
readonly _updated="22 Jun 2024"
readonly porn_dir=$HOME"/Videos/Pornography"

## Functions ##

display_title() {
  clear
  box "RedTube Download" "="
  echo "$_script v$_version"
}

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${orange}$_script${normal} $_version ($_updated)
Dowload videos from Redtube.com.

${green}Usage:${normal} $_script [video_URL] [video_ID]
  ${darkgray}PornHub${normal}
  $_script https://redtube.com/5431551
  $_script 5431551

${orange}Available options:${normal}
  -h | --help  displays these instructions.
  -i | --info  displays information about the script.
END_HELP
  exit "$errcode"
}

script_info() {
  cat <<- END_INFO
  $_script uses yt-dlp to download videos from the RedTube adult site.
  The video URL or ID is passed to the script on the command line. The default
  URL is https://www.pornhub.com if only the video ID is passed to the script.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos/Pornography/. Select the category (subdirectory).

  The the video will be downloaded to the selected sub-directory  The script is
  hard-coded to save the file as title.ext. Spaces in the title will be replaced
  by underscores. Metadata will also be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $_script <video-url>
    $_script <video-ID>

  Version: $_version
  Updated: $_updated
END_INFO
  exit
}

check_dependencies() {
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
  else
    die "yt-dlp is not installed." 1
  fi
}

# shellcheck disable=SC2034
choose_destination() {
	local sub_dir opt options
	COLUMNS=40
  options=("Anal" "Asian" "Bi Gay Trans" "Full movies" "Kink" "Masturbation" \ "Miscellaneous" "Oral" "Pinay" "Straight" "No category")
  PS3="Choose category: "
  select opt in "${options[@]}"; do
  case "$REPLY" in
    1 ) subdir="Anal"; break ;;
    2 ) subdir="Asian"; break ;;
    3 ) subdir="Bi-gay-trans"; break ;;
    4 ) subdir="Full-movies"; break ;;
    5 ) subdir="Kink"; break ;;
    6 ) subdir="Masturbation"; break ;;
    7 ) subdir="Misc"; break ;;
    8 ) subdir="Oral"; break ;;
    9 ) subdir="Pinay"; break ;;
    10 ) subdir="Straight"; break ;;
    11 ) subdir="none"; break ;;
  esac
done
  echo "$sub_dir"
}

dl_2_video() {
  printf "%s...%s\n"  "$porn_dir" "$normal"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$porn_dir/%(title)s.%(ext)s" "$url"; then
    leave "Download successful."
  else
    ec="$?"
    die "Download failed." "$ec"
  fi
}

dl_2_subdir() {
	local dest_dir="$1"
	printf "%s...%s\n"  "$porn_dir/$dest_dir" "$normal"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$porn_dir/$dest_dir/%(title)s.%(ext)s" "$url"; then
    leave "Download successful."
  else
    ec="$?"
    die "Download failed." "$ec"
  fi
}

## Execution ##

# Check arguments and fetch URL
if [[ $# -eq 0 ]]; then
  echo $'\n'$"${lightred}Error:${normal} No argument passed." >&2
  help 2
elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
  script_info
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
  help 0
elif [[ "$1" =~ ^https?:\/\/.* ]]; then
  # match by regex, starts with http:// or https://
  url=$*
else
  # match by video ID
  url="https://www.redtube.com/$*"
fi

check_dependencies

display_title

# Choose the download folder
subdir=$(choose_destination)

# Download video to selected folder
printf "\n%s%sDownloading video from Redtube to " "$bold" "$blue"
case "$subdir" in
  "none" ) dl_2_video ;;
  * ) dl_2_subdir "$subdir"
esac
