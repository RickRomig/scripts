#!/usr/bin/env bash
##########################################################################
# Script Name  : install-nala
# Description  : Installs Nala, a front-end for libapt-pkg
# Dependencies : See Comments
# Arguments    : [-h] [-i] [-r] (See the help function.)
# Author       : Copyright (C) 2022, Richard B. Romig, 22 Mar 2022
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Nala dependencies:
# libc6 (>= 2.29), libpython3.9 (>= 3.9.1), apt, python3-apt, python3-pexpect,
# python3-typing-extensions, python3-rfc3986, python3-sniffio, python3-certifi,
# python3-idna, python3-jsbeautifier
# Compatible with Debian 11+, LMDE 5+, Mint 20+, Ubuntu 20.04+, MX-21
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.3.0"
readonly _updated="04 Feb 2023"
readonly keyring_dir="/etc/apt/trusted.gpg.d"
readonly trusted_key="volian-archive-scar-unstable.gpg"
readonly srcs_list_dir="/etc/apt/sources.list.d"
readonly srcs_list="volian-archive-scar-unstable.list"

## Functions ##

help() {
  local errcode="${1:-2}"
  cat << EOT
${orange}Usage:${normal} $_script [-h] [-i] [-r]
Options:
  -h  help
  -i  Install Nala
  -r  Remove Nala
EOT
  exit "$errcode"
}

install_nala() {
  local trusted_key_url="https://deb.volian.org/volian/scar.key"
  local srcs_list_url="http://deb.volian.org/volian/ scar main"
  user_in_sudo
  wget -q -O - "$trusted_key_url" | sudo tee "$keyring_dir/$trusted_key" > /dev/null
  echo "deb [arch=amd64,arm64,armhf] $srcs_list_url" | sudo tee "$srcs_list_dir/$srcs_list" < /dev/null
  echo "deb-src $srcs_list_url" | sudo tee -a "$srcs_list_dir/$srcs_list" < /dev/null
  sudo apt update -qq
  if check_distro; then
    sudo apt-get install nala -yy
  else
    sudo apt-get install nala-legacy -yy
  fi
  fetch_mirrors
  leave "$(nala --version) installed."
}

remove_nala() {
  local nala_src_list="nala-sources.list"
  if exists nala; then
    user_in_sudo
    echo "Removing nala / nala-legacy ..."
    dpkg -l | grep -qw nala-legacy && sudo apt-get remove --purge nala-legacy -yy
    dpkg -l | grep -qw nala && sudo apt-get remove --purge nala -yy
    sudo apt autoremove -yy
    sudo apt-get remove --purge "$(dpkg -l | awk '/^rc/ && /nala/ {print $2}')" -yy
    echo "Removing $keyring_dir/$trusted_key ..."
    [[ -f "$keyring_dir/$trusted_key" ]] && sudo rm -v "$keyring_dir/$trusted_key"
    sudo apt-key del 2B98B3A0 2>/dev/null # apt-key deprecated
    echo "Removing $srcs_list_dir/$srcs_list ..."
    [[ -f "$srcs_list_dir/$srcs_list" ]] && sudo rm -v "$srcs_list_dir/$srcs_list"
    echo "Removing $srcs_list_dir/$nala_src_list ..."
    [[ -f "$srcs_list_dir/$nala_src_list" ]] && sudo rm -v "$srcs_list_dir/$nala_src_list"
    echo "Removing old log files ..."
    [[ -d /var/log/nala ]] && sudo rm -rfv /var/log/nala/
    leave "Nala uninstalled."
  else
    leave "Nala is not installed. No action taken."
  fi
}

check_distro() {
  codename=$(lsb_release --codename --short)
  case "$codename" in
    bookworm|jammy|kinetic|sid|vanessa|vera ) return "$TRUE" ;;
    * ) return "$FALSE" ;;
  esac
}

fetch_mirrors() {
  codename=$(lsb_release --codename --short)
  case "$codename" in
    debbie ) sudo nala fetch --debian buster ;;
    elsie ) sudo nala fetch --debian bullseye ;;
    ulyana|ulyssa|uma|una ) sudo nala fetch --ubuntu focal ;;
    vanessa|vera ) sudo nala fetch --ubuntu jammy ;;
    * ) sudo nala fetch ;;
  esac
}

## Execution ##

clear
printf "\U1F427 %s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Installs/Removes Nala, a front-end for Apt.\n\n"

if [[ $# -eq 0 ]]; then
  echo "${lightred}ERROR:${normal} No argument passed."
  help 2
else
  optstr=":hir"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
        help 0
        ;;
      i )
        echo "Installing Nala..."
        install_nala
        ;;
      r )
        echo "Removing Nala..."
        remove_nala
        ;;
      ? )
        echo "${lightred}ERROR:${normal} Invalid option -${OPTARG}" >&2
        help 2
        ;;
    esac
  done
fi
