#!/usr/bin/env bash
###############################################################################
# Script Name  : config-restore
# Description  : Individually restore config files from ~/.config/backup
# Dependencies : none
# Arguments    : none
# Author       : Copyright (C) 2019,Richard B. Romig, MosfaNet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 14 Apr 2019
# Updated      : 22 Oct 2025
# Comments     :
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="6.1.25295"
readonly lhost="${HOSTNAME:-$(hostname)}"
readonly bu_dir="$HOME/.config/backup"
readonly cfg_dir="$HOME/.config"
PS3="Select option: "
count=0

## Functions ##

res_home_cfg() {
  local file="$1"
  printf "\n%s" "$file"
  if [[ -f "$bu_dir/$file" ]]; then
    cp -p "$bu_dir/$file" "$HOME/"
    (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_config_cfg() {
  local folder="$1"
	local file="$2"
  printf "\n%s" "$file"
  if [[ -f "$bu_dir/$folder/$file" ]]; then
    [[ -d "$cfg_dir/$folder" ]] || mkdir -p "$cfg_dir/$folder"
    cp -p "$bu_dir/$folder/$file" "$cfg_dir/$folder/"
    (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_misc_cfg() {
  local folder="$1"
	local file="$2"
  printf "\n %s/%s" "$folder" "$file"
  if [[ -f "$bu_dir/$folder/$file" ]]; then
    [[ -d "$HOME/$folder/" ]] || mkdir -p "$HOME/$folder/"
    cp -p "$bu_dir/$folder/$file" "$HOME/$folder/"
    (( count++ ))
    printf " restored from the backup directory.\n"
 else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_cinnamon_keybindings() {
  if is_cinnamon; then
    local cinn_kb="keybindings-backup.dconf"
    if [[ -f "$bu_dir/$cinn_kb" ]]; then
      dconf load /org/cinnamon/desktop/keybindings/ < "$bu_dir/$cinn_kb"
      dconf dump /org/cinnamon/desktop/keybindings/ > "/$HOME/.config/$cinn_kb"
      (( count++ ))
      printf "\nCinnamon Keybindings restored.\n"
    else
      printf "\nCinnamon Keybindings not found in the backup directdory.\n"
    fi
  else
    printf "\nThe desktop environment is not Cinnamon." >&2
  fi
  anykey
}

main_menu() {
	local _opt options
  options=("System Configs" "Editor Configs" "i3 Configs" "Misc Configs" "Quit")
	clear
	COLUMNS=20
  printf "%s %s\n" "$script" "$version"
  printf "Restore configuration files from local backup.\n"
	printf "\nConfiguration Classes\n"
	select _opt in "${options[@]}"; do
		case "$REPLY" in
			1 )
        sys_cfgs ;;
			2 )
        ed_cfgs ;;
			3 )
        i3_cfgs ;;
			4 )
        misc_cfgs ;;
			5 )
        break ;;
			* )
        echo "${lightred}Invalid choice${normal}" >&2
		esac
	done
	printf "\nExiting the script...\n"
	if (( count == 0 )); then
		leave "No configuration files restored."
	else
		leave "Configurations restored from backup."
	fi
}

# System configuration files
sys_cfgs() {
  local _opt options
	while true; do
		options=(".bashrc" ".bash_aliases" ".bash_logout" ".bash_profile" ".profile" ".face" \
    "neofetch" "fastfetch" "Cinnamon keybindings" ".conkyrc" ".xinitrc" "System Info" "Main Menu")
		clear
		COLUMNS=40
    printf "%s %s\n" "$script" "$version"
		printf "\nSystem Configurations\n"
		select _opt in "${options[@]}"; do
			case "$REPLY" in
        1 )
          res_home_cfg ".bashrc"
          break ;;
				2 )
          res_home_cfg ".bash_aliases"
          break ;;
        3 )
          res_home_cfg ".bash_logout"
          break ;;
				4 )
          res_home_cfg ".bash_profile"
          break ;;
				5 )
          res_home_cfg ".profile"
          break ;;
				6 )
          res_home_cfg ".face"
          break ;;
				7 )
          if [[ -f "$bu_dir/neofetch/config" ]]; then
            res_config_cfg "neofetch" "config"
          elif [[ -f "$bu_dir/neofetch/config.conf" ]]; then
            res_config_cfg "neofetch" "config.conf"
          else
            printf "No neofetch configuration file found.\n"
          fi
          break ;;
        8 )
          res_config_cfg "fastfetch" "config.jsonc"
          break ;;
				9 )
          res_cinnamon_keybindings
          break ;;
				10 )
          if [[ -f "$bu_dir/.conkyrc" ]]; then
            res_home_cfg ".conkyrc"
          elif [[ -f "$bu_dir/conky/conky.conf" ]]; then
            res_config_cfg "conky" "conky.conf"
          else
            printf "No conky configuration file found.\n"
          fi
          break ;;
        11 )
          res_home_cfg ".xinitrc" ;;
				12 )
          res_home_cfg "$lhost.info"
          break ;;
				13 )
          break ;;
				* )
          echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
    main_menu
	done
}

# Editor configuration files
ed_cfgs() {
  local _opt options
	while true; do
		local options=("Bluefish" "Geany" "Mark Text" "Micro" "Nano" "VSCodium" "Main Menu")
		clear
		COLUMNS=20
    printf "%s %s\n" "$script" "$version"
		printf "\nEditor Configurations\n"
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
          res_misc_cfg ".bluefish" "rcfile-2.0"
          break ;;
				2 )
          res_geany;
          res_config_cfg "geany" "geany.conf"
          res_config_cfg "geany" "keybindings.conf"
          break ;;
        3 )
          res_marktext;
          res_config_cfg "marktext" "preferences.json"
          break ;;
				4 )
          res_config_cfg "micro" "settings.json"
          res_config_cfg "micro" "bindings.json"
          break ;;
				5 )
          if [[ -f "$bu_dir/nano/nanorc" ]]; then
            res_config_cfg "nano" "nanorc"
          elif [[ -f "$bu_dir/.nanorc" ]]; then
            res_home_cfg ".nanorc"
          else
            printf "No nano configuration file found.\n"
          fi
          break ;;
				6 )
          res_config_cfg "VSCodium/User" "settings.json"
          break ;;
        7 )
          break ;;
				* )
          echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
    main_menu
	done
}

# i3 configuration files
i3_cfgs() {
  local _opt options
	while true; do
		local options=("i3 config" "sxhkdrc" "bindings.list" "i3status.conf" "polybar" "bar.conf"  "rules.conf" \
    "workspaces.conf" "autostart.sh" "backgrounds.sh" "logout" "rofi config" "rofi themes" "dunstrc" "Main Menu")
		clear
		COLUMNS=40
    printf "%s %s\n" "$script" "$version"
		printf "\ni3 Configurations\n"
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
          res_config_cfg "i3" "config"
          break ;;
        2 )
          if [[ -f "$bu_dir/i3/sxhkdrc" ]]; then
            res_config_cfg "i3" "sxhkdrc"
          elif [[ -f "$bu_dir/i3/sxhkd/sxhkdrc" ]]; then
            res_config_cfg "i3/sxhkd" "sxhkdrc"
          else
            printf "No sxhkdrc file found.\n"
          fi
          break ;;
        3 )
          res_config_cfg "i3" "bindings.list"
          break ;;
				4 )
          if [[ -f "$bu_dir/polybar/config" ]]; then
            res_config_cfg "polybar" "config"
          elif [[ -f "$bu_dir/polybar/config.ini" ]]; then
            res_config_cfg "polybar" "config.ini"
          elif [[ -f "$bu_dir/polybar/i3bar.ini" ]]; then
            res_config_cfg "polybar" "i3bar.ini"
          else
            printf "No polybar configuration file found.\n"
          fi
          break ;;
        5 )
          res_config_cfg "i3" "i3status.conf"
          break ;;
        6 )
          res_config_cfg "i3" "bar.conf"
          break ;;
        7 )
          res_config_cfg "i3" "rules.conf"
          break ;;
        8 )
          res_config_cfg "i3" "workspaces.conf"
          break ;;
        9 )
          res_config_cfg "i3" "autostart.sh"
          break ;;
        10 )
          res_config_cfg "i3" "backgrounds.sh"
          break ;;
        11 )
          res_config_cfg "i3" "logout"
          break ;;
				12 )
          res_config_cfg "rofi" "config.rasi"
          break ;;
				13 )
          res_rofi_theme;
          res_config_cfg "rofi" "arc_dark_colors.rasi"
          res_config_cfg "rofi" "arc_dark_transparent_colors.rasi"
          break ;;
        14 )
          res_config_cfg "dunst" "dunstrc"
          break ;;
				15 )
          break ;;
				* )
          echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
    main_menu
	done
}

# Miscellaneous configuration files
misc_cfgs() {
  local _opt options
	while true; do
		options=("Bat" "gitconfig" "git-credentials" "KeepassXC" "Kitty" "Monitor Config" "Terminator" "imwheelrc" "Redshift" "Main Menu")
		clear
		COLUMNS=20
    printf "%s %s\n" "$script" "$version"
		printf "\nMiscellaneous Configurations\n"
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
          res_config_cfg "bat" "config"
          break ;;
				2 )
          if [[ -f "$bu_dir/.gitconfig" ]];then
            res_home_cfg ".gitconfig"
          elif [[ -f "$bu_dir/git/config" ]]; then
            res_config_cfg "git" "config"
          else
            printf "No git configuration file found.\n"
          fi
          break ;;
				3 )
          if [[ -f "$bu_dir/git-credentials" ]];then
            res_home_cfg ".git-credentials"
          elif [[ -f "$bu_dir/git/credentials" ]]; then
            res_config_cfg "git" "credentials"
          else
            printf "No git credentials file found.\n"
          fi
          break ;;
				4 )
          res_config_cfg "keepassxc" "keepassxc.ini"
          break ;;
				5 )
          res_config_cfg "kitty" "kitty.conf"
          res_config_cfg "kitty" "bindings.list"
          break ;;
        6 )
          if [[ -f "$bu_dir/10-monitor.conf" ]]; then
            sudo_login 2
            sudo cp pv "$bu_dir/10-monitor.conf" /etc/X11/xorg.conf.d/
            (( count++ ))
          else
            printf "10-monitor.conf not found.\n"
          fi
          break ;;
				7 )
          res_config_cfg "terminator" "config"
          break ;;
        8 )
          res_home_cfg ".imwheelrc"
          break ;;
        9 )
          res_misc_cfg "config" "redshift.conf"
          break ;;
        10 )
          break ;;
			* )
          echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
    main_menu
	done
}

## Execution ##

main_menu "$@"
