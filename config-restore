#!/usr/bin/env bash
###############################################################################
# Script Name  : config-restore
# Description  : Individually restore config files from ~/.config/backup
# Dependencies : none
# Arguments    : none
# Author       : Copyright (C) 2019,Richard B. Romig, 14 April 2019
# Email        : rick.romig@gmail.com
# Comments     :
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.4.1"
readonly _updated="04 Feb 2023"
readonly bu_dir=$HOME"/.config/backup"
PS3="Select option: "

count=0

## Functions ##

res_atom() {
  printf "\nAtom config.cson"
  if [[ -f "$bu_dir/.atom/config.cson" ]]; then
    cp -p "$bu_dir/.atom/config.cson" "$HOME/.atom/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  printf "Atom styles.less"
  if [[ -f "$bu_dir/.atom/styles.less" ]]; then
    cp -p "$bu_dir/.atom/styles.less" "$HOME/.atom/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_aliases() {
  printf "\n.bash_aliases"
  if [[ -f "$bu_dir/.bash_aliases" ]]; then
    cp -p "$bu_dir/.bash_aliases" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_bashrc() {
  printf "\n.bashrc"
  if [[ -f "$bu_dir/.bashrc" ]]; then
    cp -p "$bu_dir/backup_dir/.bashrc" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_bash_profile() {
  printf "\n.bash_profile"
  if [[ -f "$bu_dir/.bash_profile" ]]; then
    cp -p "$bu_dir/.bash_profile" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_bat_config() {
  printf "\nBat config"
  if [[ -f "$bu_dir/bat/config" ]]; then
    cp -pv "$bu_dir/bat/config" "/$HOME/.config/bat/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_bluefish() {
  printf "\nBluefish rcfile"
  if [[ -f "$bu_dir/.bluefish/rcfile-2.0" ]]; then
   cp -p "$bu_dir/.bluefish/rcfile-2.0" "$HOME/.bluefish/" && (( count++ ))
   printf " restored from the backup directory.\n"
 else
   printf " not found in the backup directory.\n"
  fi
  anykey
}

res_cinnamon_keybindings() {
  if is_cinnamon; then
    local cinn_kb="keybindings-backup.dconf"
    if [[ -f "$bu_dir/$cinn_kb" ]]; then
      dconf load /org/cinnamon/desktop/keybindings/ < "$bu_dir/$cinn_kb"
      dconf dump /org/cinnamon/desktop/keybindings/ > "/$HOME/.config/$cinn_kb"
      (( count++ ))
    else
      printf "\nCinnamon Keybindings not found in the backup directdory."
    fi
  else
    printf "\nThe desktop environment is not Cinnamon." >&2
  fi
  anykey
}

res_clipit() {
  # BunsenLabs
  if bunsenlabs; then
    printf "\nclipitrc"
    if [[ -f "$bu_dir/clipit/clipitrc" ]]; then
      cp -p "bu_dir/clipit/clipitrc" "$HOME/.config/clipit/" && (( count++ ))
      printf " restored from the backup directory.\n"
    else
      printf " not found in the backup directory.\n"
    fi
  else
    printf "\nThe distribution is not Bunsen Labs.\n"
  fi
  anykey
}

res_conky() {
  # BunsenLabs
  printf "\nconky.conf"
  if [[ -f "$bu_dir/conky/conky.conf" ]]; then
    cp -p "$bu_dir/conky/conky.conf" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_conkyrc() {
  printf "\n.conkyrc"
  if [[ -f "$bu_dir/.conkyrc" ]]; then
    cp -p "$bu_dir/.conkyrc" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_face() {
  printf "\n.face"
  if [[ -f "$bu_dir/.face" ]]; then
    cp -p "$bu_dir/.face" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_gitconfig() {
  printf "\n.gitconfig"
  if [[ -f "$bu_dir/.gitconfig" ]]; then
    cp -p "$bu_dir/.gitconfig" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_gitcredentials() {
  printf "\n.git-credentials"
  if [[ -f "$bu_dir/.git-credentials" ]]; then
    cp -p "$bu_dir/.git-credentials" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_gorilla() {
  printf "\n.gorillarc"
  if [[ -f "$bu_dir/.gorillarc" ]]; then
    cp -p "$bu_dir/.gorillarc" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_keepassxc() {
  local kpxc_ini="keepassxc.ini"
  printf "\n%s" "$kpxc_ini"
  if [[ -f "$bu_dir/keepassxc/$kpxc_ini" ]]; then
    cp -p "$bu_dir/keepassxc/$kpxc_ini" "$HOME/.config/keepassxc/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_marktext() {
  local pref_file="preferences.json"
  printf "\nMark-Text %s" "$pref_file"
  if [[ -f "$bu_dir/marktext/$pref_file" ]]; then
    cp -p "$bu_dir/marktext/$pref_file" "$HOME/.config/marktext/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_micro() {
  printf "\n Micro settings.json"
  if [[ -f "$bu_dir/micro/settings.json" ]]; then
    cp -p "$bu_dir/micro/settings.json" "$HOME/micro" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  printf "Micro bindings.json"
  if [[ -f "$bu_dir/micro/bindings.json" ]]; then
    cp -p "$bu_dir/micro/bindings.json" "$HOME/micro" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_nanorc() {
  local nano_rc="nanorc"
  if [[ -f "$bu_dir/.nanorc" ]]; then
    nano_rc=".nanorc"
    cp -p "$bu_dir/.nanorc" "$HOME/" && (( count++ ))
    printf "%s restored from the backup directory.\n" "$nano_rc"
  elif [[ -f "$bu_dir/nano/nanorc" ]]; then
    cp -p "$bu_dir/nano/nanorc" "$HOME/.config/nano" && (( count++ ))
    printf "%s restored from the backup directory.\n" "$nano_rc"
  else
    printf "%s not found in the backup directory.\n" "$nano_rc"
  fi
  anykey
}

res_neofetch() {
  local neofetch_dir="$HOME/.config/neofetch"
  if [[ -f "$bu_dir/neofetch/config.conf" || -f "$bu_dir/neofetch/config" ]]; then
    [[  -f "$bu_dir/neofetch/config" ]] && neo_cfg="config" || neo_cfg="config.conf"
    cp -p "$bu_dir/neofetch/$neo_cfg" "$neofetch_dir/" && (( count++ ))
    printf "Neofetch %s restored from the backup directory.\n" "$neo_cfg"
  else
    printf "Neofetch config not found in the backup directory.\n"
  fi
  anykey
}

res_profile() {
  printf "\n.profile"
  if [[ -f "$bu_dir/.profile" ]]; then
    cp -p "$bu_dir/.profile" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_sysinfo() {
  local lhost=$HOSTNAME
  printf "\n%s.info" "$lhost"
  if [[ -f "$bu_dir/$lhost.info" ]]; then
    cp -p "$bu_dir/$lhost.info" "$HOME/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_terminator() {
  printf "\nTerminator config"
  if [[ -f "$bu_dir/terminator/config" ]]; then
    cp -p "$bu_dir/terminator/config" "$HOME/.config/terminator/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_xbindkeysrc() {
  if bunsenlabs; then
    printf "\n.xbindkeysrc"
    if [[ -f "$bu_dir/.xbindkeysrc" ]]; then
      cp -p "$bu_dir/.xbindkeysrc" "$HOME/" && (( count++ ))
      printf " restored from the backup directory.\n"
    else
      printf " not found in the backup directory.\n"
    fi
  else
    printf "\nThe distribution is not BunsenLabs.\n"
  fi
  anykey
}

res_i3config() {
  printf "\ni3 config"
  if [[ -f "$bu_dir/i3/config" ]]; then
    cp -p "$bu_dir/i3/config" "$HOME/.config/i3/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_i3status() {
  printf "\ni3status.con"
  if [[ -f "$bu_dir/i3/i3status.conf" ]]; then
    cp -p "$bu_dir/i3/i3status.conf" "$HOME/.config/i3/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_rofi_config() {
  printf "\nRofi config.rasi"
  if [[ -f "$bu_dir/rofi/config.rasi" ]]; then
    cp -p "$bu_dir/rofi/config.rasi" "$HOME/.config/rofi/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_rofi_theme() {
  printf "\nRofi Arc-Dark.rasi"
  if [[ -f "$bu_dir/rofi/Arc-Dark.rasi" ]]; then
    cp -p "$bu_dir/rofi/Arc-Dark.rasi" "$HOME/.config/rofi/" && (( count++ ))
    printf " restored from the backup directory.\n"
  else
    printf " not found in the backup directory.\n"
  fi
  anykey
}

res_geany() {
  local geany_dir="$HOME/.config/geany"
  printf "\ngeany.conf"
  if [[ -f "$bu_dir/geany/geany.conf" ]]; then
    cp -p "$bu_dir/geany/geany.conf" "$geany_dir/" && (( count++ ))
    printf " restored from the backup directory./n"
  else
    printf " not found in the backup directory./n"
  fi
  printf "Geany keybindings.conf"
  if [[ -f "$bu_dir/geany/keybindings.conf" ]]; then
    cp -p "$bu_dir/geany/keybindings.conf" "$geany_dir/" && (( count++ ))
    printf " restored from the backup directory./n"
  else
    printf " not found in the backup directory./n"
  fi
  anykey
}

res_vscodium() {
  local vscodium_dir="$HOME/.config/VSCodium/User"
  printf "\nVSCodium settings.json"
  if [[ -f "$bu_dir/VSCodium/settings.json" ]]; then
    cp -p "$bu_dir/VSCodium/settings.json" "$vscodium_dir/" && (( count++ ))
    printf " restored from the backup directory./n"
  else
    printf " not found in the backup directory./n"
  fi
  anykey
}

res_kitty() {
  local kitty_dir="$HOME/.config/kitty"
  printf "\nkitty.conf"
  if [[ -f "$bu_dir/kitty/kitty.conf" ]]; then
    cp -p "$bu_dir/kitty/kitty.conf" "$kitty_dir/" && (( count++ ))
    printf " restored from the backup directory./n"
  else
    printf " not found in the backup directory./n"
  fi
  anykey
}

main_menu() {
	local options=("System Configs" "Editor Configs" "i3 Configs" \
	"BunsenLabs Configs" "Misc Configs" "Quit")
	clear
	COLUMNS=60
  printf "\U1F427 %s %s (%s)\n" "$_script" "$_version" "$_updated"
  printf "Restore configuration files from local backup.\n"
	printf "\nConfiguration Classes\n"
	select opt in "${options[@]}"; do
		case "$REPLY" in
			1 )	sys_cfgs; break ;;
			2 )	ed_cfgs; break ;;
			3 ) i3_cfgs; break ;;
			4 ) bl_cfgs; break ;;
			5 ) misc_cfgs; break ;;
			6 )
				printf "\nExiting the script...\n"
				if (( count == 0 )); then
					leave "No configuration files restored."
				else
					leave "Configurations restored from backup."
				fi
				break ;;
			* ) echo "${lightred}Invalid choice${normal}" >&2
		esac
	done
}

# System configuration files
sys_cfgs() {
	while true; do
		local options=(".bashrc" ".bash_aliases" ".bash_profile" ".profile" ".face" \
		"neofetch" "Cinnamon keybindings" ".conkyrc" "System Info" "Main Menu")
		clear
		COLUMNS=60
    printf "\U1F427 %s %s (%s)\n" "$_script" "$_version" "$_updated"
		printf "\nSystem Configurations\n"
		select opt in "${options[@]}"; do
			case "$REPLY" in
				1 ) res_bashrc; break ;;
				2 ) res_aliases; break ;;
				3 ) res_bash_profile; break ;;
				4 ) res_profile;  break ;;
				5 ) res_face; break ;;
				6 ) res_neofetch; break ;;
				7 ) res_cinnamon_keybindings; break ;;
				8 ) res_conkyrc; break ;;
				9 ) res_sysinfo; break ;;
				10 ) main_menu; break ;;
				* ) echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
	done
}

# Editor configuration files
ed_cfgs() {
	while true; do
		local options=("Atom" "Bluefish" "Geany" "Mark Text" "Micro" "Nano" "VSCodium" "Main Menu")
		clear
		COLUMNS=60
    printf "\U1F427 %s %s (%s)\n" "$_script" "$_version" "$_updated"
		printf "\nEditor Configurations\n"
		select opt in "${options[@]}"; do
			case "$REPLY" in
				1 ) res_atom; break ;;
				2 ) res_bluefish; break ;;
        3 ) res_geany; break ;;
				4 ) res_marktext; break ;;
				5 ) res_micro; break ;;
				6 ) res_nanorc; break ;;
        7 ) res_vscodium; break ;;
				8 ) main_menu; break ;;
				* ) echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
	done
}

# i3 configuration files (Machine 22)
i3_cfgs() {
	while true; do
		local options=("i3 config" "i3status.conf" "rofi config" "rofi theme" "Main Menu")
		clear
		COLUMNS=60
    printf "\U1F427 %s %s (%s)\n" "$_script" "$_version" "$_updated"
		printf "\ni3 Configurations\n"
		select opt in "${options[@]}"; do
			case "$REPLY" in
				1 ) res_i3config; break ;;
				2 ) res_i3status; break ;;
				3 ) res_rofi_config; break ;;
				4 ) res_rofi_theme; break ;;
				5 ) main_menu; break ;;
				* ) echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
	done
}

# BunsenLabs configuration files
bl_cfgs() {
	while true; do
		local options=(".xbindkeysrc" "clipitrc" "conky.conf" "Main Menu")
		clear
		COLUMNS=60
    printf "\U1F427 %s %s (%s)\n" "$_script" "$_version" "$_updated"
		printf "\nBunsenLabs Configurations\n"
		select opt in "${options[@]}"; do
			case "$REPLY" in
				1 ) res_xbindkeysrc; break ;;
				2 ) res_clipit; break ;;
				3 ) res_conky; break ;;
				4 ) main_menu; break ;;
				* ) echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
	done
}

# Miscellaneous configuration files
misc_cfgs() {
	while true; do
		local options=("Bat" "gitconfig" "git-credentials" "KeepassXC" "Password Gorilla" \
		"Kitty" "Terminator" "Main Menu")
		clear
		COLUMNS=60
    printf "\U1F427 %s %s (%s)\n" "$_script" "$_version" "$_updated"
		printf "\nMiscellaneous Configurations\n"
		select opt in "${options[@]}"; do
			case "$REPLY" in
				1 ) res_bat_config; break ;;
				2 ) res_gitconfig; break ;;
				3 ) res_gitcredentials; break ;;
				4 ) res_keepassxc; break ;;
				5 ) res_gorilla; break ;;
        6 ) res_kitty; break ;;
				7 ) res_terminator; break ;;
				8 ) main_menu; break ;;
				* ) echo "${lightred}Invalid choice${normal}" >&2
			esac
		done
	done
}

## Execution ##

main_menu
