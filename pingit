#!/usr/bin/env bash
###############################################################################
# Script Name  : pingit
# Description  : Checks if a host is on the local network
# Dependencies : ping
# Arguments    : Last octet of target computer's IP address
# Author       : Richard Romig
# Email        : rick.romig@gmail.com
# Created      :
# Updated      : 20 Aug 2024
# Comments     : Assumes a /24 (Class C) network
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.0.24233"
readonly _updated="20 Aug 2024"

## Functions ##

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${orange}$_script${normal} $_version ($_updated)
Pings an IP address on the local network.

${green}Usage:${normal} $_script [last-octet] [OPTION]

${orange}Available options${normal}
  1-254        Pings local address ending with that octet.
  -h | --help  Dispplays this help message.

${orange}Example:${normal} $_script 42

${orange}Note:${normal}
  1. Address must be an integer in the range of 1 to 254, representing the last octet of the target address.
  2. Assumes a Class C (/24) network.
END_HELP
  exit "$errcode"
}

validip() {
  local octet status
  octet="$1"
  status=0

  if [[ -z "$octet" ]]; then
    status=1
    printf "%s No argument passed. No host IP.\n" "$red_error" <&2
  elif [[ "$1" =~ ^[0-9]+$ ]] 2>/dev/null; then
    # Argument is an integer value
    if [[ "$octet" -gt 0 && "$octet" -lt 255 ]]; then
      status=0
      printf "%s.%s is a valid IP address.\n" "$localnet" "$octet"
    else
      status=2
      printf "%s %s.%s is not a valid IP address.\n" "$red_error" "$localnet" "$octet" <&2
    fi
  else
    status=3
    printf "%s Invalid argument - %s.\n" "$red_error" "$octet" <&2
  fi

  return "$status"
}

## Execution ##

under_line "Pings an address on the local Class C (/24) network."

# Check arguments
if [[ $# -eq 0 ]]; then
  printf "%s No argument passed.\n" "$red_error" >&2
  usage 2
elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
  help 0
elif validip "$1"; then
  hostip="$1"
else
  help 2
fi

# Obtain local IP address
localip="$(local_ip)"

# Attempt to ping the target IP address
if [[ "$localip" == "$hostip" ]]; then
  printf "%s.%s is the computer you're pinging from.\n" "$localnet" "$hostip" <&2
elif  ping -c 10 "$localnet.$hostip"; then
  printf "\n%s.%s successfully pinged.\n" "$localnet" "$hostip"
else
  printf "\n%s.%s is unreachable, check if it's on the network.\n" "$localnet" "$hostip" <&2
fi
printf "%s v%s\n" "$_script" "$_version"
exit
