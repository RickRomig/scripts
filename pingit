#!/usr/bin/env bash
##########################################################################
# Script Name  : pingit
# Description  : Checks if a host is on the local network
# Dependencies : ping
# Arguments    : Last octet of target computer's IP address
# Author       : Copyright Â© 2023 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      :
# Updated      : 19 Jul 2025
# Comments     : Assumes a /24 (Class C) network
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

readonly script="${0##*/}"
readonly version="3.3.25200"

## Functions ##

help() {
	local errcode="${1:-2}"
	local updated="19 Jul 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Pings an IP address on the local network.

${green}Usage:${normal} $script [last-octet] [OPTION]
${orange}Available options${normal}
  1-254        Pings local address ending with that octet.
  -h | --help  Show this help message and exit.

${orange}Example:${normal} $script 42
${orange}Note:${normal}
  1. Address must be an integer in the range of 1 to 254, representing the last octet of the target address.
  2. Assumes a Class C (/24) network.
_HELP_
  exit "$errcode"
}

valid_ip() {
  local octet="$1"
  local status=0
  if [[ -z "$octet" ]]; then
    status=1
    printf "%s No argument passed. No host IP.\n" "$RED_ERROR" <&2
  elif [[ "$1" =~ ^[0-9]+$ ]] 2>/dev/null; then
    # Argument is an integer value
    if [[ "$octet" -gt 0 && "$octet" -lt 255 ]]; then
      status=0
      printf "%s.%s is a valid IP address.\n" "$LOCALNET" "$octet"
    else
      status=2
      printf "%s %s.%s is not a valid IP address.\n" "$RED_ERROR" "$LOCALNET" "$octet" <&2
    fi
  else
    status=3
    printf "%s Invalid argument - %s.\n" "$RED_ERROR" "$octet" <&2
  fi
  return "$status"
}

ping_ip() {
  local localip hostip
  hostip="$1"
  localip="$(local_ip)"
  # Attempt to ping the target IP address
  if [[ "$localip" == "$hostip" ]]; then
    printf "\n"
    under_line "$LOCALNET.$hostip is the computer you're pinging from." >&2
  elif ping -c 10 "$LOCALNET.$hostip"; then
    printf "\n"
    under_line "$LOCALNET.$hostip successfully pinged."
  else
    printf "\n"
    under_line "$LOCALNET.$hostip is unreachable, check if it's on the network." <&2
  fi
}

main() {
  local hostip
  under_line "Pings an address on the local Class C (/24) network."
  # Check arguments
  if [[ $# -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 2
  elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
    help 0
  elif valid_ip "$1"; then
    hostip="$1"
    ping_ip "$hostip"
  else
    help 2
  fi
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
