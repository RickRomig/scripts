#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-fastfetch
# Description  : Install/udadate/remove FastFetch
# Dependencies : gdebi, wget
# Arguments    : See help() function
# Author       : Copyright Â© 2024 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 02 May 2024
# Last updated : 20 Sep 2025
# Comments     : .png logo does not work with Terminator.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="2.10.25263"
readonly gh_url="https://github.com/fastfetch-cli/fastfetch/releases"

## Functions ##

help() {
	local errcode="${1:-2}"
	local -r updated="20 Sep 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, configures, removes, updates FastFetch

${green}Usage:${normal} $script [-hiru]
${orange}Available options:${normal}
  -h  Show this help message and exit
  -i  Install Fastfetch
  -r  Remove Fastfetch
  -u  Update Fastfetch to the latest GitHub release
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

ff_version() {
	fastfetch --version-raw
}

newest_version() {
	local new_ver
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(awk -F'/' '/download/ && /.deb/ {print $6}' "$tmp_file")
  echo "$new_ver"
}

compare_versions() {
	local cur_ver new_ver
	new_ver="$1"
  cur_ver="$(ff_version)"
  if [[ ! "$new_ver" > "$cur_ver" ]]; then
		printf "%sFastFetch %s is the lastest version. No update required.%s\n" "$lightyellow" "$cur_ver" "$normal"
  else
		printf "%sThe installed version of FastFetch is %s, updating to %s...%s\n" "$lightyellow" "$cur_ver" "$new_ver" "$normal"
    install_fastfetch "$new_ver"
  fi
}

install_fastfetch(){
	local new_ver="$1"
  local -r new_pkg="fastfetch-linux-amd64.deb"
	sudo_login 2
  printf "Downloading FastFetch %s from the fastfetch-cli GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/$new_ver/$new_pkg"
  kill "$!"; tput cnorm
  printf "done\nInstalling FastFetch %s...\n" "$new_ver"
	sudo dpkg -i "$tmp_dir/$new_pkg"; sudo apt-get install --fix-broken
  printf "%sFastFetch %s installed.%s\n" "$lightyellow" "$(ff_version)" "$normal"
}

remove_fastfetch() {
	local cfg_d="$1"
	local logo_d="$2"
	sudo_login 2
	printf "Removing FastFetch %s ...\n" "$(ff_version)"
	sudo dpkg --purge fastfetch
	[[ -L "$cfg_d/config.jsonc" ]] && unlink "$cfg_d/config.jsonc"
	[[ -L "$logo_d/logo.png" ]] && unlink "$logo_d/logo.png"
	find "$HOME/.config" -type d -name fastfetch -exec rm -rf {} \;
	[[ -d "$HOME/.local/share/fastfetch" ]] && rm -rf "$HOME/.local/share/fastfetch"
	[[ -d "$HOME/.cache/fastfetch" ]] && rm -rf "$HOME/.cache/fastfetch"
	printf "Fastfetch and its configuration files have been removed.\n"
}

fastfetch_config() {
	local cfg_d logo_d repository
	repository=$(assign_cfg_repo)
	cfg_d="$1"
	logo_d="$2"
	[[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
	[[ -d "$logo_d" ]] || mkdir -p "$logo_d"
	printf "Installing configuration and logo files...\n"
	if lspci | grep -q 'GM965|GL960'; then
		cp -v "$repository/fastfetch/config.jsonc.ascii" "$cfg_d/config.jsonc"
		cp -v "$repository/fastfetch/logo.txt" "$logo_d/"
	else
		[[ -f "$cfg_d/config.jsonc" ]] && rm "$cfg_d/config.jsonc"
		ln -s "$repository"/fastfetch/config.jsonc "$cfg_d"/config.jsonc
		[[ -f "$logo_d/logo.png" ]] && rm "$logo_d/logo.png"
		ln -s "$repository"fastfetch/logo.png "$logo_d"/logo.png
	fi
	printf "Fastfetch configuration applied.\n"
}

main() {
  local noOpt opt optstr new_ver cfg_d logo_d
	cfg_d="$HOME/.config/fastfetch"
	logo_d="$HOME/.local/share/fastfetch/logos"
	noOpt=1
	optstr=":hiru"
	while getopts "$optstr" opt; do
		case "$opt" in
			h )
				help 0
				;;
			i )
				if exists fastfetch; then
					printf "Fastfetch %s is already installed.\n" "$(ff_version)" >&2
				else
					check_package wget
					tmp_file=$(mktemp) || die "Failed to create temporary file." 1
					tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
					trap cleanup EXIT
					new_ver="$(newest_version)"
					[[ "$new_ver" ]] || die "No download available. Try again later." 1
					printf "%sInstalling Fastfetch version %s...%s\n" "$lightyellow" "$new_ver" "$normal"
					install_fastfetch "$new_ver"
					fastfetch_config "$cfg_d" "$logo_d"
				fi
				;;
			r )
				if exists fastfetch; then
					remove_fastfetch "$cfg_d" "$logo_d"
				else
					printf "Fastfetch is not installed.\n" >&2
				fi
				;;
			u )
				if exists fastfetch; then
					check_package wget
					tmp_file=$(mktemp) || die "Failed to create temporary file." 1
					tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
					trap cleanup EXIT
					new_ver="$(newest_version)"
					[[ "$new_ver" ]] || die "No download available. Try again later." 1
					compare_versions "$new_ver"
				else
					printf "Fastfetch is not installed.\n" >&2
				fi
				;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
