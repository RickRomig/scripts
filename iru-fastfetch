#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-fastfetch
# Description  : Install/udadate/remove FastFetch
# Dependencies : gdebi, wget
# Arguments    : See help() function
# Author       : Copyright Â© 2024 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 02 May 2024
# Last updated : 17 Jan 2025
# Comments     : Fastfetch config.jsonc does not work with Terminator.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="2.0.25017"
readonly gh_url="https://github.com/fastfetch-cli/fastfetch/releases"
readonly cfg_d="$HOME/.config/fastfetch"
readonly logo_d="$HOME/.local/share/fastfetch/logos"

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

check_dependencies() {
  local packages=( gdebi git wget )
  check_packages "${packages[@]}"
}

assign_repo() {
	local localip repo
	localip=$(local_ip)
	repo="$HOME/Downloads/configs"
	case "$localip" in
		10|16|22 )
			repo="$HOME/gitea/configs" ;;
		* )
			[[ -d "$repo" ]] || git clone --quiet "$GITEA_URL/configs.git" "$repo"
	esac
	echo "$repo"
}

check_distro() {
	# Changes to Fastfetch version 2.8.2 show change to glibc 2.35 which does not support Debian 11, Ubuntu 20.04, Mint 20.x and earlier.
	local codename
	codename=$(lsb_release --codename --short)
	case "$codename" in
		bookworm|boron|faye|jammy|noble|virginia|wilma|xia ) return "$TRUE" ;;
		* ) return "$FALSE"
	esac
}

ff_version() {
	# fastfetch --version | cut -d' ' -f2
	fastfetch --version-raw
	# dpkg -l fastfetch | awk '/ii/ {print $3}'
}

newest_version() {
	local new_ver
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}')
  check_distro || new_ver="2.7.1"
  echo "$new_ver"
}

compare_versions() {
	local cur_ver new_ver
	new_ver="$1"
  cur_ver="$(ff_version)"
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}FastFetch $cur_ver is the current version. No update required.${normal}"
    check_distro || echo "FastFetch $new_ver is the latest version compatible with $(get_distribution)."
  else
    echo "${lightyellow}Installed version of FastFetch is $cur_ver, updating to $new_ver...${normal}"
    install_fastfetch "$new_ver"
  fi
}

install_fastfetch(){
	local new_ver="$1"
  local new_pkg="fastfetch-linux-amd64.deb"
	[[ "$new_ver" == "2.7.1" ]] && new_pkg="fastfetch-2.7.1-Linux.deb"
	sudo_login 2
  printf "Downloading FastFetch %s from the fastfetch-cli GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/$new_ver/$new_pkg"
  kill "$!"; tput cnorm
  printf "done\nInstalling FastFetch %s...\n" "$new_ver"
  # sudo gdebi -n "$tmp_dir/$new_pkg" 2>/dev/null
	# sudo apt-get install "$tmp_dir/$new_pkg"
	sudo dpkg -i "$tmp_dir/$new_pkg"; sudo apt-get install --fix-brokenq
  printf "%sFastFetch %s installed.%s\n" "$lightyellow" "$(ff_version)" "$normal"
}

remove_fastfetch() {
	local cfg_bu_d="$HOME/.config/backup/fastfetch"
	sudo_login 2
	printf "Removing FastFetch %s ...\n" "$(ff_version)"
	sudo dpkg --purge fastfetch
	[[ -d "$cfg_d" ]] && rm -rf "$cfg_d"
	[[ -d "$logo_d" ]] && rm -rf "$logo_d"
	[[ -d "$cfg_bu_d" ]] && rm -rf "$cfg_bu_d"
	printf "Fastfetch and its configuration files have been removed.\n"
}

append_bashrc() {
	# Comment out Neofetch & add Fastfetch to .bashrc
	printf "Addng Festfetch to .bashrc...\n"
	sed -i '/neofetch/s/^\[/# \[/' "$HOME/.bashrc"
	if grep -E '#.*fastfetch|fastfetch.*#' ~/.bashrc; then
		# commented fastfetch line, uncomment
		sed -i '/fastfetch/s/^# \[/\[' "$HOME/.bashrc"
	elif grep -qw 'fastfetch' "$HOME/.bashrc"; then
		# uncommented fastfetch line, do nothing
		:
	else
		# no fastfetch line, add line to .bashrc
		sed -i '/leave.txt/i[[ -x /usr/bin/fastfetch ]] && /usr/bin/fastfetch/' "$HOME/.bashrc"
		# echo '[[ -x /usr/bin/fastfetch ]] && /usr/bin/fastfetch' | tee -a "$HOME/.bashrc"
	fi
}

fastfetch_config() {
	local config ascii_logo png_logo repository
	repository=$(assign_repo)
	config="config.jsonc"
	ascii_logo="atheist.txt"
	png_logo="atheism.png"
	[[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
	[[ -d "$logo_d" ]] || mkdir -p "$logo_d"
	printf "Installing configuration and logo files...\n"
	cp -v "$repository/fastfetch/$config" "$cfg_d/"
	cp -v "$repository/fastfetch/${config}.ascii" "$cfg_d/"
	cp -v "$repository/fastfetch/$ascii_logo" "$logo_d/"
	cp -v "$repository/fastfetch/$png_logo" "$logo_d/"
	append_bashrc
	printf "Fastfetch configuration applied.\n"
}

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="17 Jan 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, configures, removes, updates FastFetch

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -c  Apply Fastretch configuration and logo
  -h  Display help
  -i  Install Fastfetch
  -r  Remove Fastfetch
  -u  Update Fastfetch
_HELP_
  exit "$errcode"
}

main() {
  local noOpt opt optstr new_ver
	check_dependencies
	noOpt=1
	optstr=":chiru"
	while getopts "$optstr" opt; do
		case "$opt" in
			c )
				exists fastfetch || leave "Fastfetch is not installed."
				echo "${lightyellow}Installing custom Fastfetch configuration...${normal}"
				fastfetch_config
			;;
			h )
				help 0
			;;
			i )
				exists fastfetch && leave "Fastfetch $(ff_version) is already installed."
				tmp_file=$(mktemp) || die "Failed to create temporary file." 1
				tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
				trap cleanup EXIT
				new_ver="$(newest_version)"
				[[ "$new_ver" ]] || die "No download available. Try again later." 1
				check_distro || echo "Fastfetch $new_ver is the latest version compatible with $(get_distribution)"
				echo "${lightyellow}Installing Fastfetch version $new_ver...${normal}"
				install_fastfetch "$new_ver"
				fastfetch_config
			;;
			r )
				exists fastfetch || leave "Fastfetch is not installed."
				remove_fastfetch "$new_ver"
			;;
			u )
				exists fastfetch || leave "Fastfetch is not installed."
				tmp_file=$(mktemp) || die "Failed to create temporary file." 1
				tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
				trap cleanup EXIT
				new_ver="$(newest_version)"
				[[ "$new_ver" ]] || die "No download available. Try again later." 1
				compare_versions "$new_ver"
			;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script v$version"
	exit
}

## Execution ##

main "$@"
