#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-fastfetch
# Description  : Install/udadate/remove FastFetch
# Dependencies : gdebi, wget
# Arguments    : See help() function
# Author       : Copyright Â© 2024 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 02 May 2024
# Last updated : 18 Jun 2024
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="1.5.24170"
readonly _updated="18 Jun 2024"
readonly gh_url="https://github.com/fastfetch-cli/fastfetch/releases"
readonly ff_cfg_d="$HOME/.config/fastfetch"
readonly ff_logo_d="$HOME/.local/share/fastfetch/logos"

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

check_dependencies() {
  local packages=( curl gdebi wget )
  check_packages "${packages[@]}"
}

check_distro() {
	# Changes to version 2.8.2 show change to glibc 2.35 which does not support Debian 11 or Ubuntu 20.04 (Mint 20.x )
	local codename
	codename=$(lsb_release --codename --short)
	case "$codename" in
		bookworm|boron|faye|jammy|vanessa|vera|victoria|virginia ) return "$TRUE" ;;
		* ) return "$FALSE"
	esac
}

ff_version() {
	fastfetch --version | cut -d' ' -f2
}

newest_version() {
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}')
  check_distro || new_ver="2.7.1"
  echo "$new_ver"
}

compare_versions() {
	local cur_ver
  cur_ver="$(ff_version)"
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}FastFetch $cur_ver is the current version. No update required.${normal}"
    check_distro || echo "FastFetch $new_ver is the latest version compatible with $(get_distribution)."
  else
    echo "${lightyellow}Installed version of FastFetch is $cur_ver, updating to $new_ver...${normal}"
    install_fastfetch
  fi
}

install_fastfetch(){
  local new_pkg
	if [[ "$new_ver" == "2.7.1" ]]; then
		new_pkg="fastfetch-2.7.1-Linux.deb"
	else
		new_pkg="fastfetch-linux-amd64.deb"
	fi
  printf "Downloading FastFetch %s from the fastfetch-cli GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/$new_ver/$new_pkg"
  kill "$!"; tput cnorm
  printf "done\nInstalling FastFetch %s...\n" "$new_ver"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  printf "FastFetch %s installed.\n" "$(ff_version)"
}

remove_fastfetch() {
	printf "Removing FastFetch %s ...\n" "$(ff_version)"
	sudo dpkg --purge fastfetch
	[[ -d "$ff_cfg_d" ]] && rm -rf "$ff_cfg_d"
	[[ -d "$ff_logo_d" ]] && rm -rf "$ff_logo_d"
	printf "Fastfetch and its configuration files have been removed.\n"
}

fastfetch_config() {
	local ff_conf ff_logo localip repository
	localip=$(local_ip)
	ff_conf="config.jsonc"
	ff_logo="atheist.txt"
	[[ -d "$ff_cfg_d" ]] || mkdir -p "$ff_cfg_d"
	[[ -d "$ff_logo_d" ]] || mkdir -p "$ff_logo_d"
	printf "Installing configuration and logo files...\n"
	if [[ "$localip" == "16" ]]; then
		repository="$HOME/gitea/configs/fastfetch"
		cp -v "$repository/$ff_conf" "$ff_cfg_d/"
		cp -v "$repository/$ff_logo" "$ff_logo_d/"
	else
		repository="configs/raw/branch/main/fastfetch"
		curl -so "$ff_cfg_d/$ff_conf" "$Gitea_URL/$repository/$ff_conf"
		curl -so "$ff_logo_d/$ff_logo" "$Gitea_URL/$repository/$ff_logo"
	fi
	# Comment out Neofetch & add Fastfetch to .bashrc
	sed -i '/neofetch/s/^\[/# \[/' "$HOME/.bashrc"
	grep -qw 'fastfetch' "$HOME/.bashrc" || echo '[[ -x /usr/bin/fastfetch ]] && /usr/bin/fastfetch' | tee -a "$HOME/.bashrc"
	printf "Fastfetch configuration applied.\n"
}

help() {
	errcode="${1:-2}"
	cat << END_HELP
${orange}$_script${normal} $_version ($_updated)
Installs, configures, removes, updates FastFetch

${green}Usage:${normal} $_script [OPTION]

${orange}Available options:${normal}
  -c  Apply Fastretch configuration and logo
  -h  Display help
  -i  Install Fastfetch
  -r  Remove Fastfetch
  -u  Update Fastfetch
END_HELP
  exit "$errcode"
}

## Execution ##

noOpt=1
optstr=":chiru"
while getopts "$optstr" opt; do
	case "$opt" in
		c )
			exists fastfetch || leave "Fastfetch is not installed."
			echo "${lightyellow}Installing custom Fastfetch configuration...${normal}"
			fastfetch_config
		;;
		h )
			help 0
		;;
		i )
			exists fastfetch && leave "Fastfetch $(ff_version) is already installed."
      tmp_file=$(mktemp) || die "Failed to create temporary file." 1
      tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
      trap cleanup EXIT
      sudo_login 2
      check_dependencies
      new_ver="$(newest_version)"
      [[ "$new_ver" ]] || die "No download available. Try again later." 1
      check_distro || echo "Fastfetch $new_ver is the latest version compatible with $(get_distribution)"
      echo "${lightyellow}Installing Fastfetch version $new_ver...${normal}"
			install_fastfetch
			fastfetch_config
		;;
		r )
			exists fastfetch || leave "Fastfetch is not installed."
			sudo_login 2
			remove_fastfetch
		;;
		u )
			exists fastfetch || leave "Fastfetch is not installed."
      tmp_file=$(mktemp) || die "Failed to create temporary file." 1
      tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
      trap cleanup EXIT
      sudo_login 2
      check_dependencies
      new_ver="$(newest_version)"
      [[ "$new_ver" ]] || die "No download available. Try again later." 1
			compare_versions
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
printf "%s v%s\n" "$_script" "$_version"
exit