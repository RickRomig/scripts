#!/usr/bin/env bash
###############################################################################
# Script Name  : syncbin
# Description  : Syncs bin diectory with machines on the network via SSH
# Dependencies : rsync
# Arguments    : See help function for detailed information.
# Author       : Copyright (C) 2020, Richard Romig, 27 Sep 2020
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 27 Sep 2020
# Last updated : 15 May 2025
# Comments     : Can sync to one, multiple, or all machines on the network.
#              : For mulitiple IPs, integer arguments are expected.
#              : For use only within the range of static IP addresses.
#              : Restricted IP addresses are excluded.
#              : LOCALNET variable is defined & declared in functionlib.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="7.0.25135"

## Functions ##

help() {
  local errcode updated
  errcode="${1:-2}"
  updated="26 Apr 2025"
  cat << _HELP_
${orange}$script${normal} $version ($updated)
Synchrnizes ~/bin with remote hosts.

${green}Usage:${normal} $script [OPTION]

${orange}Available options${normal}
  OPTION   ACTION
  -h | --help Displays help text.
  -a | --all  Synchronizes all designated machines on the network.
  1-255       Last octet of the IP address(es) of the machine(s) to synchronize.

${orange}Examples:${normal}
  $script -h       # Displays help instructions.
  $script --help   # Displays help instructions.
  $script -a       # Synchronizes with all designated systems.
  $script --all    # Synchronizes with all designated systems.
  $script 13       # Synchronizes with the system with a last octet of 13.
  $script 12 13 14 # Synchronizes with systems whose last octets are 12, 13, 14.
${orange}Notes:${normal}
  1. Multiple IP addresses can be entered.
  2. This script is limited to the range of static IP addresses (1 - 25).
  3. Certain addresses within that range have been marked as restricted and are not accessible.
_HELP_
  exit "$errcode"
}

transfer_status() {
  # Exit script if transfer fails.
  local xfr_status="$1"
  (( xfr_status != 0 )) && die "A transfer failed! Check network status."
}

transfer() {
  local ip_addr host_ip
  host_ip="$1"
  # Skip local machine:
  ip_addr="$(local_ip)"
  if [[ "$ip_addr" == "$host_ip" ]]; then
    printf "%sSkipping Machine %s (local client)%s\n\n" "$green" "$host_ip" "$normal"
    return
  fi
  # Check for machines and sync if on-line:
  printf "%sChecking for %s...%s\n" "$green" "$host_ip" "$normal"
  if ping -c 3 "$LOCALNET.$host_ip" >/dev/null 2>&1; then
    printf "...Syncing to Machine %s\n" "$host_ip"
    syncscript "$host_ip"
    printf "\n...Machine %s Synced!\n\n" "$host_ip"
  else
    printf "\n...Skipping %s! Not on network.\n\n" "$host_ip"
  fi
}

syncscript() {
  local exit_status hostip
  hostip="$1"
  printf "\n%sSyncing ~/.bashrc ...%s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/.bashrc "$LOCALNET.$hostip":
  exit_status="$?"
  transfer_status "$exit_status"

  printf "\n%sSyncing ~/bash_aliases ...%s\n" "$orange" "$normal"
  rsync -avh --delete "$HOME"/.bash_aliases "$LOCALNET.$hostip":
  exit_status="$?"
  transfer_status "$exit_status"

  case "$hostip" in
    10|16|22|153 )
      printf "\n%sSyncing Gitea Repositories...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/gitea/ "$LOCALNET.$hostip":gitea/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Project Repositories...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Projects/ "$LOCALNET.$hostip":Projects/
      exit_status="$?"
      transfer_status "$exit_status"
    ;;
    21|24|25 )
      printf "\n%sSyncing Homepage directory...%s\n" "$orange" "$normal"
      rsync -avh --delete --exclude '.git' --exclude '.gitignore' "$HOME"/Documents/homepage/ "$LOCALNET.$hostip":Documents/homepage/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing ~/.local/share/doc ...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/.local/share/doc/ "$LOCALNET.$hostip":.local/share/doc/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Wallpaper directory...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Pictures/wallpaper/ "$LOCALNET.$hostip":Pictures/wallpaper/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Backgrounds directory...%s\n" "$orange" "$normal"
      echo $'\n'$"${orange}Syncing SFW wallpaper directory...${normal}"
      rsync -avh --delete "$HOME"/Pictures/backgrounds/ "$LOCALNET.$hostip":Pictures/backgrounds/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing ~/bin ...%s\n" "$orange" "$normal"
      rsync -avh --delete --exclude '.git' --exclude '.gitignore' "$HOME"/bin/ "$LOCALNET.$hostip":bin/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Password Vaults...%s\n" "$orange" "$normal"
      rsync -avh --delete --include="*.kdbx" --exclude="*" "$HOME"/Documents/ "$LOCALNET.$hostip":Documents/
      exit_status="$?"
      transfer_status "$exit_status"
    ;;
   * )
      printf "\n%sSyncing ~/bin ...%s\n" "$orange" "$normal"
      rsync -avh --delete --exclude '.git' --exclude '.gitignore' "$HOME"/bin/ "$LOCALNET.$hostip":bin/
      exit_status="$?"
      transfer_status "$exit_status"
  esac
}

sync_one() {
  local hostip
  hostip="$1"
  if [[ "$hostip" -gt 0 && "$hostip" -lt 10 ]]; then
    printf "%s %s is a restricted address. Access denied.\n" "$RED_WARNING" $"$LOCALNET.$hostip"
    exit
  elif valid_ip "$hostip"; then
    printf "Synchronizing bin and template directories with %s:\n\n" "$LOCALNET.$hostip"
    transfer "$hostip"
    all_done
  fi
}

sync_some() {
  local hostip
  hostip="$1"
  for hostip in "$@"; do
    if [[ "$hostip" -eq "$hostip" ]] 2>/dev/null; then
      if [[ "$hostip" -gt 0 && "$hostip" -lt 255 ]]; then
        case "$hostip" in
          1|2|3|4|5|6|7|8|9 )
            printf "%s %s is a restricted address. Access denied.\n" "$RED_WARNING" "$LOCALNET.$hostip"
          ;;
          * )
            transfer "$hostip"
        esac
      elif [[ "$hostip" -gt 254 ]]; then
        printf "%s %s is outside the range of static addresses.\n\n" "$RED_WARNING" "$LOCALNET.$hostip"
      else
        printf "%s Invalid argument: %s\n\n" "$RED_ERROR" "$hostip" >&2
      fi
    else
      printf "%sInteger argument expected.\n" "$RED_WARNING" >&2
    fi
  done
  all_done
}

sync_all() {
  local octets hostip
  octets=(10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)
  for hostip in "${octets[@]}"; do
    transfer "$hostip"
  done
  all_done
}

all_done() {
  box "All directories synced!" "-"
  leave "Script completed in $(format_time $SECONDS)"
}

check_host() {
  local lhost chost cur_ip
  lhost="hp-800g2-sff"
  chost="${HOSTNAME:-$(hostname)}"
  cur_ip="$(local_ip)"
  printf "Host: %s%s%s at " "$lightyellow" "$chost" "$normal"
  printf "%s%s%s\n\n" "$lightyellow" "$LOCALNET.$cur_ip" "$normal"
  if [[ "$lhost" != "$chost" ]]; then
    if yes_or_no "Do you wish to continue?"; then
      printf "/nContinuing with the script...\n"
    else
      printf "\nSynchronization canceled. Exiting the script...\n"
      exit
    fi
  fi
}

main() {
  check_host
  check_package rsync
  # Start timer
  SECONDS=0
  # Check arguments
  if [[ "$#" -eq 0 ]]; then
    help 2
  elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
    help 0
  elif [[ "$1" = "-a" || "$1" = "--all" ]]; then
    sync_all
  elif [[ "$#" -gt 1 ]]; then
    sync_some "$@"
  else
    sync_one "$1"
  fi
  over_line "$script v$version"
  exit
}

## Execution ##

main "$@"
