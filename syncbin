#!/bin/bash
###############################################################################
# Script Name  : syncbin
# Description  : Syncs bin diectory with machines on the network via SSH
# Dependencies : rsync
# Arguments    : See usage function for detailed information.
# Author       : Copyright (C) 2020, Richard Romig, 27 Sep 2020
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Can sync to one, multiple, or all machines on the network.
#              : For mulitiple IPs, integer arguments are expected.
#              : For use only within the range of static IP addresses.
#              : Restricted IP addresses are excluded.
#              : localnet variable is defined & declared in functionlib.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="1.5.1"
readonly _updated="24 Mar 2023"

## Functions ##

usage() {
  local errcode="${1:-2}"
  cat <<- EOF
  $_script help
  ${orange}Usage:${normal} $_script [OPTION]
  OPTION   ACTION
  -h       Displays usage instructions.
  --help   Displays usage instructions.
  -a       Synchronizes all designated machines on the network.
  --all    Synchronizes all designated machines on the network.
  1-255    Last octet of the IP address(es) of the machine(s) to synchronize.
  ${orange}Examples:${normal}
      $_script -h         # Displays usage instructions.
      $_script --help     # Displays usage instructions.
      $_script -a         # Synchronizes with all designated systems.
      $_script --all      # Synchronizes with all designated systems.
      $_script 13         # Synchronizes with the system with a last octet of 13.
      $_script 12 13 14   # Synchronizes with systems whose last octets are 12, 13, 14.
  ${orange}Notes:${normal}
      - Multiple IP addresses can be entered.
      - This script is limited to the range of static IP addresses (1 - 25).
      - Certain addresses within that range have been marked as restricted and are not accessible.
EOF
  exit "$errcode"
}

transfer_status() {
  # Exit script if transfer fails.
  xfr_status="$1"
  (( xfr_status != 0 )) && die "A transfer failed! Check network status."
}

transfer() {
  # Skip local machine:
  ip_addr="$(local_ip)"
  if [[ "$ip_addr" = "$hostip" ]]; then
    echo -e "${green}...Syncing from $hostip${normal}\n"
    return
  fi

  # Check for machines and sync if on-line:
  echo "${green}Checking for $hostip...${normal}"
  if ping -c 3 "$localnet.$hostip" >/dev/null 2>&1; then
    echo "...Syncing to Machine $hostip"
    sync_script
    echo -e "\n...Machine $hostip Synced!\n"
  else
    echo -e "\n...Skipping $hostip! Not on network.\n"
  fi
}

sync_script() {
  echo $'\n'$"${orange}Syncing aliases...${normal}"
  rsync -avzh --delete /home/"$USER"/.bash_aliases "$localnet.$hostip":
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing script configuration files...${normal}"
  rsync -avzh --delete /home/"$USER"/.config/scripts/ "$localnet.$hostip":.config/scripts/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Templates...${normal}"
  rsync -avzh --delete /home/"$USER"/Templates/ "$localnet.$hostip":Templates/
  exit_status="$?"
  transfer_status "$exit_status"

  case "$hostip" in
    10|22 )
      echo $'\n'$"${orange}Syncing Gitea repositoies...${normal}"
      rsync -avzh --delete /home/"$USER"/gitea/ "$localnet.$hostip":gitea/
      exit_status="$?"
      transfer_status "$exit_status"
      ;;
    24|25|227 )
      echo $'\n'$"${orange}Syncing Homepage...${normal}"
      rsync -avzh --delete /home/"$USER"/homepage/ "$localnet.$hostip":homepage/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing Todo list...${normal}"
      rsync -avzh --delete /home/"$USER"/.local/share/doc/todo.lst "$localnet.$hostip":.local/share/doc/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing wallpaper directory...${normal}"
      rsync -avzh --delete /home/"$USER"/Pictures/wallpaper/ "$localnet.$hostip":Pictures/wallpaper/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing bin...${normal}"
      rsync -avzh --delete --exclude '.git' /home/"$USER"/bin/ "$localnet.$hostip":bin/
      exit_status="$?"
      transfer_status "$exit_status"
      ;;
   * )
      echo $'\n'$"${orange}Syncing bin...${normal}"
      rsync -avzh --delete --exclude '.git' /home/"$USER"/bin/ "$localnet.$hostip":bin/
      exit_status="$?"
      transfer_status "$exit_status"
      ;;
  esac
}

sync_one() {
  valid_ip "$1" && hostip="$1"

  if [[ "$hostip" -gt 0 && "$hostip" -lt 26 ]]; then
    case $hostip in
      1|2|3|4|5|6|7|8|9 )
        echo -n "${orange}Warning!${normal} $localnet.$hostip is a restricted address."
        echo -e " Access denied.\n"; exit ;;
      * )
        echo -e "Synchronizing bin and template directories with $localnet.$hostip:"
        transfer
        all_done ;;
    esac
  elif [[ "$hostip" -eq 227 ]]; then
    echo -e "Synchronizing bin and template directories with $localnet.$hostip:"
    transfer
    all_done
  else
    echo -n "${orange}Warning!${normal} $localnet.$hostip is outside the range"
    echo -e " of static addresses.\n"
  fi
}

sync_some() {
  echo -e "Synchronizing bin and template directories with selected systems on the local network.\n"
  xfr_flag=0
  for hostip in "$@"; do
    if [[ "$hostip" -eq "$hostip" ]] 2>/dev/null; then
      if [[ "$hostip" -gt 0 && "$hostip" -lt 26 ]]; then
        case "$hostip" in
          1|2|3|4|5|6|7|8|9 )
            echo -n "${orange}Warning!${normal} $localnet.$hostip is a restricted"
            echo -e " address. Access denied.\n" ;;
          * )
            transfer
            (( xfr_flag++ )) ;;
        esac
      elif [[ "$hostip" -eq 227 ]]; then
        echo -e "Synchronizing bin and template directories with $localnet.$hostip:"
        transfer
        (( xfr_flag++ ))
      elif [[ "$hostip" -gt 25 && "$hostip" -lt 255 ]]; then
        echo -n "${orange}Warning!${normal} $localnet.$hostip is outside the range"
        echo -e " of static addresses.\n"
      else
        echo -e "${lightred}ERROR!${normal} Invalid argument: $hostip\n" >&2
      fi
    else
      echo -e "${lightred}ERROR!${normal} Integer argument expected.\n" >&2
    fi
  done
  [ "$xfr_flag" -gt 0 ] && all_done
}

sync_all() {
  echo -e "Synchronizing bin and template directories with all systems on the local network.\n"

  octets=(10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 227)
  for hostip in "${octets[@]}"; do transfer; done
  all_done
}

all_done() {
  box "All directories synced!" "-"
  leave "Script completed in $(format_time $SECONDS)"
}

check_host() {
  local lhost="hp-800g2-sff"
  local chost=$HOSTNAME
  cur_ip="$(local_ip)"
  echo -n "Synchronizing from host: ${lightyellow}$chost${normal} at "
  echo "IP: ${lightyellow}$localnet.$cur_ip${normal}"
  if [[ "$lhost" != "$chost" ]]; then
    while true ; do
      read -rp "Do you wish to continue? [Yes|No] " choice
      shopt -s nocasematch
      case "$choice" in
        "yes" )
          echo $'\n'$"Continuing with the script..."
          shopt -u nocasematch
          break ;;
        "no" )
          echo $'\n'$"Synchronization canceled."
          shopt -u nocasematch
          leave "Exiting the script..." ;;
        * )
          echo "${lightred}Invalid choice.${normal} Enter Yes or No" ;;
      esac
    done
  fi
}

check_dependencies(){
  check_package rsync
}

## Execution ##

check_dependencies
clear

box "$_script v$_version, ($_updated)"

# Check to see if you are on the correct host.
check_host

# Start timer
SECONDS=0

# Check arguments
if [[ "$#" -eq 0 ]]; then
  usage 2
elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
  usage 0
elif [[ "$1" = "-a" || "$1" = "--all" ]]; then
  sync_all
elif [[ "$#" -gt 1 ]]; then
  sync_some "$@"
else
  sync_one "$1"
fi
