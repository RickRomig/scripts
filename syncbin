#!/usr/bin/env bash
###############################################################################
# Script Name  : syncbin
# Description  : Syncs bin diectory with machines on the network via SSH
# Dependencies : rsync
# Arguments    : See help function for detailed information.
# Author       : Copyright (C) 2020, Richard Romig, 27 Sep 2020
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 27 Sep 2020
# Last updated : 14 Aug 2024
# Comments     : Can sync to one, multiple, or all machines on the network.
#              : For mulitiple IPs, integer arguments are expected.
#              : For use only within the range of static IP addresses.
#              : Restricted IP addresses are excluded.
#              : localnet variable is defined & declared in functionlib.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="6.0.24227"
readonly _updated="14 Aug 2024"

## Functions ##

help() {
  local errcode="${1:-2}"
  cat <<- END_HELP
${orange}$_script${normal} $_version ($_updated)
Synchrnizes ~/bin with remote hosts.

${green}Usage:${normal} $_script [OPTION]

${orange}Available options${normal}
  OPTION   ACTION
  -h | --help Displays help text.
  -a | --all  Synchronizes all designated machines on the network.
  1-255       Last octet of the IP address(es) of the machine(s) to synchronize.

${orange}Examples:${normal}
  $_script -h       # Displays help instructions.
  $_script --help   # Displays help instructions.
  $_script -a       # Synchronizes with all designated systems.
  $_script --all    # Synchronizes with all designated systems.
  $_script 13       # Synchronizes with the system with a last octet of 13.
  $_script 12 13 14 # Synchronizes with systems whose last octets are 12, 13, 14.
${orange}Notes:${normal}
  1. Multiple IP addresses can be entered.
  2. This script is limited to the range of static IP addresses (1 - 25).
  3. Certain addresses within that range have been marked as restricted and are not accessible.
END_HELP
  exit "$errcode"
}

transfer_status() {
  # Exit script if transfer fails.
  local xfr_status="$1"
  (( xfr_status != 0 )) && die "A transfer failed! Check network status."
}

transfer() {
  local ip_addr host_ip
  host_ip="$1"
  # Skip local machine:
  ip_addr="$(local_ip)"
  if [[ "$ip_addr" = "$host_ip" ]]; then
    echo -e "${green}...Syncing from $host_ip${normal}\n"
    return
  fi

  # Check for machines and sync if on-line:
  echo "${green}Checking for $host_ip...${normal}"
  if ping -c 3 "$localnet.$host_ip" >/dev/null 2>&1; then
    echo "...Syncing to Machine $host_ip"
    sync_script "$host_ip"
    echo -e "\n...Machine $host_ip Synced!\n"
  else
    echo -e "\n...Skipping $host_ip! Not on network.\n"
  fi
}

sync_script() {
  local exit_status hostip
  hostip="$1"
  echo $'\n'$"${orange}Syncing aliases...${normal}"
  rsync -avh --delete "$HOME"/.bash_aliases "$localnet.$hostip":
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing script configuration files...${normal}"
  rsync -avh --delete "$HOME"/.config/scripts/ "$localnet.$hostip":.config/scripts/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Templates...${normal}"
  rsync -avh --delete "$HOME"/Templates/ "$localnet.$hostip":Templates/
  exit_status="$?"
  transfer_status "$exit_status"

  case "$hostip" in
    10|16|22|153 )
      printf "\n%sSyncing Gitea Repositories...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/gitea/ "$localnet.$hostip":gitea/
      exit_status="$?"
      transfer_status "$exit_status"

      printf "\n%sSyncing Github Repositories...%s\n" "$orange" "$normal"
      rsync -avh --delete "$HOME"/Projects/ "$localnet.$hostip":Projects/
      exit_status="$?"
      transfer_status "$exit_status"
    ;;
    24|25|227 )
      echo $'\n'$"${orange}Syncing Homepage...${normal}"
      rsync -avh --delete --exclude '.git' "$HOME"/Documents/homepage/ "$localnet.$hostip":Documents/homepage/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing Todo list...${normal}"
      rsync -avh --delete "$HOME"/.local/share/doc/ "$localnet.$hostip":.local/share/doc/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing wallpaper directory...${normal}"
      rsync -avh --delete "$HOME"/Pictures/wallpaper/ "$localnet.$hostip":Pictures/wallpaper/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing bin...${normal}"
      rsync -avh --delete --exclude '.git' "$HOME"/bin/ "$localnet.$hostip":bin/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing script configuration files...${normal}"
      rsync -avh --delete "$HOME"/.config/scripts/ "$localnet.$hostip":.config/scripts/
      exit_status="$?"
      transfer_status "$exit_status"

      echo $'\n'$"${orange}Syncing Password Databases...${normal}"
      rsync -avh --delete --include="*.kdbx" --exclude="*" "$HOME"/Documents/ "$localnet.$hostip":Documents/
      exit_status="$?"
      transfer_status "$exit_status"
    ;;
   * )
      echo $'\n'$"${orange}Syncing bin...${normal}"
      rsync -avh --delete --exclude '.git' "$HOME"/bin/ "$localnet.$hostip":bin/
      exit_status="$?"
      transfer_status "$exit_status"
  esac
}

sync_one() {
  local hostip
  hostip="$1"
  valid_ip "$1" && hostip="$1"

  if [[ "$hostip" -gt 0 && "$hostip" -lt 26 ]]; then
    case $hostip in
      1|2|3|4|5|6|7|8|9 )
        echo -n "${orange}Warning!${normal} $localnet.$hostip is a restricted address."
        echo -e " Access denied.\n"
        exit
      ;;
      * )
        echo -e "Synchronizing bin and template directories with $localnet.$hostip:"
        transfer "$hostip"
        all_done
    esac
  elif [[ "$hostip" -eq 153 ]]; then
    echo -e "Synchronizing bin and template directories with $localnet.$hostip:"
    transfer "$hostip"
    all_done
  else
    echo -e "${orange}Warning!${normal} $localnet.$hostip is outside the range of static addresses.\n"
  fi
}

sync_some() {
  local hostip xfr_flag
  hostip="$1"
  echo -e "Synchronizing bin and template directories with selected systems on the local network.\n"
  xfr_flag=0
  for hostip in "$@"; do
    if [[ "$hostip" -eq "$hostip" ]] 2>/dev/null; then
      if [[ "$hostip" -gt 0 && "$hostip" -lt 26 ]]; then
        case "$hostip" in
          1|2|3|4|5|6|7|8|9 )
            echo -n "${orange}Warning!${normal} $localnet.$hostip is a restricted"
            echo -e " address. Access denied.\n"
          ;;
          * )
            transfer "$hostip"
            (( xfr_flag++ ))
        esac
      elif [[ "$hostip" -eq 153 ]]; then
        echo -e "Synchronizing bin and template directories with $localnet.$hostip:"
        transfer "$hostip"
        (( xfr_flag++ ))
      elif [[ "$hostip" -gt 25 && "$hostip" -lt 255 ]]; then
        echo -e "${orange}Warning!${normal} $localnet.$hostip is outside the range of static addresses.\n"
      else
        echo -e "${lightred}ERROR!${normal} Invalid argument: $hostip\n" >&2
      fi
    else
      echo -e "${lightred}ERROR!${normal} Integer argument expected.\n" >&2
    fi
  done
  [ "$xfr_flag" -gt 0 ] && all_done
}

sync_all() {
  local octets hostip
  echo -e "Synchronizing bin and template directories with all systems on the local network.\n"
  octets=(10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)
  for hostip in "${octets[@]}"; do
    transfer "$hostip"
  done
  all_done
}

all_done() {
  box "All directories synced!" "-"
  leave "Script completed in $(format_time $SECONDS)"
}

check_host() {
  local lhost chost cur_ip
  lhost="hp-800g2-sff"
  chost="${HOSTNAME:-$(hostname)}"
  cur_ip="$(local_ip)"
  echo -n "Synchronizing from host: ${lightyellow}$chost${normal} at "
  echo "IP: ${lightyellow}$localnet.$cur_ip${normal}"
  if [[ "$lhost" != "$chost" ]]; then
    if yes_or_no "Do you wish to continue?"; then
      printf "/nContinuing with the script...\n"
    else
      printf "\nSynchronization canceled.\n"
      leave "Exiting the script..."
    fi
  fi
}

main() {
  # Start timer
  SECONDS=0
  box "$_script v$_version"
  check_host
  check_package rsync
}

## Execution ##

# Check arguments
if [[ "$#" -eq 0 ]]; then
  help 2
elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
  help 0
elif [[ "$1" = "-a" || "$1" = "--all" ]]; then
  main
  sync_all
elif [[ "$#" -gt 1 ]]; then
  main
  sync_some "$@"
else
  main
  sync_one "$1"
fi
