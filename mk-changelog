#!/usr/bin/env bash
#####################################################################
# Script Name  : mk-changelog
# Description  : Create a changelog file from a template
# Dependencies : none
# Arguments    : Project name
# Author       : Copyright Â© 2019 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 09 Apr 2019
# Updated      : 19 Jul 2025
# Comment      : Should be run from the project's main directory.'
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Global Variables ##

script_dir=$(dirname "$(readlink -f "${0}")"); readonly script_dir
readonly script="${0##*/}"
readonly version="2.1.25200"
verbose_mode="$FALSE"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="19 Jul 2025"
  cat << _HELP_
${orange}$script${normal} $version, updated: $updated
Creates a changelog file for a project.

${green}Usage:${normal} $script [-c project-name] [-h] [-vc project-name]
${orange}Available options:${normal}
  -c  Create a changelog file
      $script -c <project-name>
  -h  Show this help message and exit
  -v  Enable verbose mode (Must precede c flag)
      $script -vc <project-name>
_HELP_
  exit "$errcode"
}

show_message() {
	local message="$1"
	[[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

create_changelog() {
  local copy_holder email_addr email_addr1 project today
  project="$1"
  copy_holder="Richard B. Romig"
  email_addr="rick.romig@gmail.com"
  email_addr1="rick.romig@mymetronet.net"
  today=$(date +"%d %B %Y")

  show_message "Importing data into changlog.md"
  sed -e '1d' \
    -e "s/<PROJECT>/$project/" \
    -e "s/<AUTHOR>/$copy_holder/" \
    -e "s/<EMAIL>/$email_addr/" \
    -e "s/<EMAIL1>/$email_addr1/" \
    -e "s/<DATE>/$today/" "$script_dir/Templates/changelog.txt" > changelog.md
  printf "The changelog.md for %s has been created." "$$project"
  edit_view_quit changelog.md
}

main() {
  local noOpt opt optstr project_name
  noOpt=1
  optstr=":c:hv"
  while getopts "$optstr" opt; do
    case "$opt" in
      c )
        project_name="$OPTARG"
        if [[ -f changelog.md ]]; then
          printf "%s changelog.md already exists.\n" "$RED_ERROR" >&2
          help 2
        else
          show_message "Creating changelog for $project_name"
          create_changelog "$project_name"
        fi
        ;;
			h )
				help 0
			  ;;
			v )
				verbose_mode="$TRUE"
				show_message "Verbose mode enabled."
			  ;;
			: )
				  printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
				  help 2
        ;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
    esac
    noOpt=0
  done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
