#!/usr/bin/env bash
###############################################################################
# Script Name  : check-logs
# Description  : Displays selected log files and information.
# Dependencies : functionlib
# Arguments    : None
# Author       : Copyright (C) 2019, Richard B. Romig, 29 August 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : sudo access required to view Timeshift snapshots
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.6.8"
readonly _updated="24 Jun 2023"
readonly lhost=$HOSTNAME

## Functions ##

sysinfo() {
  if [[ -f "$HOME/$lhost.info" ]]; then
    clear
    echo -e "${lightgreen}$lhost information:${normal}\n"
    viewtext "$HOME/$lhost.info"
  else
    echo -e "\n${orange}$HOME/$lhost.info not found on this system.${normal}\n"
  fi
}

updates() {
  local update_log="/var/log/update.log"
  if [[ -f "$update_log" ]]; then
    clear
    echo -e "${lightgreen}$lhost - Most recent unattended system update:${normal}\n"
    viewtext "$update_log"
  else
    echo $'\n'$"${orange}The system update log does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "/etc/cron.weekly/z-update" || -x "/opt/bin/z-update" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

timeshift_snapshots() {
  if exists timeshift; then
    if pgrep timeshift > /dev/null 2>&1; then
      echo -e "\n${orange}Timeshift is currently running.${normal} Try again later.\n"
    else
      user_in_sudo
      clear
      echo -e "${lightgreen}$lhost - Timeshift Snapshots${normal}\n"
      sudo timeshift --list | awk 'NR!=1 && NR!=3' 2>/dev/null
    fi
  else
    echo -e "\n${orange}Timeshift is not installed on $lhost.${normal}\n"
  fi
}

defrag_log() {
  local defrag_log="/var/log/defrag.log"
  if [[ -f "$defrag_log" ]]; then
    clear
    echo -e "${lightgreen}$lhost - Defragmentation report:${normal}\n"
    viewtext "$defrag_log"
  else
    echo $'\n'$"${orange}The defragmentation report does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "/etc/cron.monthly/z-defrag" || -x "/opt/bin/z-defrag" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

ytdlpupdate_log() {
  local log_dir="/var/log"
  local log_file="ytdlpup.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    echo -e "${lightgreen}$lhost - yt-dlp Update Log:${normal}\n"
		(printf "DATE|TIME|STATUS|VERSION\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "41"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && echo "$entries entries" || echo "$entries entry"
  else
    echo $'\n'$"${orange}The youtube-dl update log does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "/etc/cron.daily/z-ytdlp-update" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

script_archive_log() {
  local log_dir="$HOME/.local/share/logs"
	local log_file="script-archive.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    echo -e "${lightgreen}$lhost - Bash Script Archive Log:${normal}\n"
		(printf "DAY|DATE|TIME|RESULT\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "34"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && echo "$entries entries" || echo "$entries entry"
  else
    echo $'\n'$"${orange}The bash script archive log does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "$HOME/.local/bin/scriptarchive.sh" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

password_log() {
  local log_dir="$HOME/.local/share/logs"
  local log_file="password-db.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    echo -e "${lightgreen}$lhost - Password Database Change Log:${normal}\n"
    (printf "DATE|TIME|P.GORILLA|KEEPASSXC\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "39"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && echo "$entries entries" || echo "$entries entry"
  else
    echo $'\n'$"${orange}The Password Database Change Log does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "$HOME/.local/bin/passwdsync.sh" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

homebank_log() {
  local log_dir="$HOME/.local/share/logs"
	local log_file="HomeBank-archive.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    echo -e "${lightgreen}$lhost - HomeBank Archive Log:${normal}\n"
    (printf "DAY|DATE|TIME|ARCHIVE|RESULT\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "43"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && echo "$entries entries" || echo "$entries entry"
  else
    echo $'\n'$"${orange}The HomeBank archive log does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "$HOME/.local/bin/hb-archive.sh" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

local_backup_log() {
  local log_dir="/var/log"
  local log_file="backup.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    echo -e "${lightgreen}$lhost - Local Backup Log:${normal}\n"
		(printf "DAY|DATE|TIME|RESULT\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "34"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && echo "$entries entries" || echo "$entries entry"
  else
    echo $'\n'$"${orange}The local backup log does not exist on $lhost.${normal}"
    echo -n "The job is"
    if [[ -x "/etc/cron.daily/z-backup" || -x "/opt/bin/z-backup" ]]; then
      echo -e " scheduled but has not run.\n"
    else
      echo -e " not scheduled to run.\n"
    fi
  fi
}

## Execution ##

while true; do
  clear
  echo "${orange}I solemnly swear that I'm up to no good.${normal}"
  echo -e "\U1F427 $_script v$_version ($_updated)"
  echo "Displays the contents of selected log files."
  echo "Not all logs will be available on all systems."
  echo $'\n'$"${lightgreen}Log files on $lhost:${normal}"

  COLUMNS=60
  options=("System Information" "System Updates" "Timeshift Snapshots" \
    "Defrag Report" "Yt-dlp Updates" "Script archive" "Password Databases" \
    "HomeBank Archive" "Local Backup" "Exit the script")
  PS3="Select a log to view: "
  select opt in "${options[@]}"; do
    case $REPLY in
      1 )
        sysinfo; anykey; break ;;
      2 )
        updates; anykey; break ;;
      3 )
        timeshift_snapshots; anykey; break ;;
      4 )
        defrag_log; anykey; break ;;
      5 )
        ytdlpupdate_log; anykey; break ;;
      6 )
        script_archive_log; anykey; break ;;
      7 )
        password_log; anykey; break ;;
      8 )
        homebank_log; anykey; break ;;
      9 )
        local_backup_log; anykey; break ;;
      10 )
        leave "${orange}Mischief managed.${normal}" ;;
      * )
        echo "${lightred}Invalid choice. Try again.${normal}" >&2 ;;
    esac
  done
done
