#!/usr/bin/env bash
###############################################################################
# Script Name  : check-logs
# Description  : Displays selected log files and information.
# Dependencies : functionlib
# Arguments    : None
# Author       : Copyright (C) 2019, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 29 Aug 2019
# Updated      : 17 Jun 2025
# Comments     : sudo access required to view Timeshift snapshots
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly lhost="${HOSTNAME:-$(hostname)}"

## Functions ##

show_header() {
  clear
  cat << _HEADER_
${orange}I solemnly swear that I'm up to no good.${normal}
Displays the contents of selected log files.
Not all logs will be available on all systems.
_HEADER_
  printf "\n"
}

sysinfo() {
  if [[ -f "$HOME/$lhost.info" ]]; then
    clear
    printf "%s%s information:%s\n\n" "$lightgreen" "$lhost" "$normal"
    viewtext "$HOME/$lhost.info"
  else
    printf "%s%s.info not found on this system.%s\n" "$orange" "$lhost" "$normal"
  fi
}

update_log() {
  local log_dir log_file
  log_dir="/var/log"
  log_file="update.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    viewtext "$log_dir/$log_file"
  else
    printf "%sThe system update log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.weekly/z-update" || -x "/opt/bin/z-update" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

timeshift_snapshots() {
  if exists timeshift; then
    sudo_login 0
    if pgrep timeshift > /dev/null 2>&1; then
      printf "\n%sTimeshift is currently running.%s Try again later.\n" "$orange" "$normal"
    elif [[ $(sudo timeshift --list | tail -n1) == "No snapshots found" ]]; then
      printf "\nNo Timeshift snapshots found.\n"
    else
      clear
      printf "%s%s - Timeshift Snapshots:%s\n" "$lightgreen" "$lhost" "$normal"
      sudo timeshift --list | awk 'NR!=1 && NR!=3' 2>/dev/null
    fi
  else
    printf "\n%sTimeshift is not installed on %s.%s\n" "$orange" "$lhost" "$normal"
  fi
}

defrag_log() {
  local log_dir log_file
  log_dir="/var/log"
  log_file="defrag.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    viewtext "$log_dir/$log_file"
  else
    printf "%sThe defragmentation report does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.monthly/z-defrag" || -x "/opt/bin/z-defrag" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

ytdlpupdate_log() {
  local log_dir log_file entries
  log_dir="/var/log"
  log_file="ytdlpup.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - yt-dlp Update Log:%s\n" "$lightgreen" "$lhost" "$normal"
		# (printf "DATE|TIME|VERSION\n"; cat "$log_dir/$log_file") | column -ts "|"
    column -t -s "|" -N DAY,DATE,VERSION "$log_dir/$log_file"
    print_line "-" "29"
    entries=$(wc -l < "$log_dir/$log_file")
    (( entries > 1 )) && printf "%s entries\n" "$entries" || printf "%s entry\n" "$entries"
  else
    printf "%sThe yt-dlp update log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.daily/z-ytdlp-update" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

local_backup_log() {
  local log_dir log_file entries
  log_dir="/var/log"
  log_file="backup.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Local Backup Log:%s\n" "$lightgreen" "$lhost" "$normal"
    column -t -s "|" -N DAY,DATE,TIME,RESULT "$log_dir/$log_file"
    print_line "-" "34"
    entries=$(wc -l < "$log_dir/$log_file")
    (( entries > 1 )) && printf "%s entries\n" "$entries" || printf "%s entry\n" "$entries"
  else
    printf "%sThe local backup log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.daily/z-backup" || -x "/opt/bin/z-backup" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

script_archive_log() {
  local log_dir log_file entries
  log_dir="$HOME/.local/share/logs"
	log_file="script-archive.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Bash Script Archive Log:%s\n" "$lightgreen" "$lhost" "$normal"
    column -t -s "|" -N DAY,DATE,TIME,RESULT "$log_dir/$log_file"
    print_line "-" "34"
    entries=$(wc -l < "$log_dir/$log_file")
    (( entries > 1 )) && printf "%s entries\n" "$entries" || printf "%s entry\n" "$entries"
  else
    printf "%sThe bash script archive log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/scriptarchive.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

password_log() {
  local log_dir log_file entries
  log_dir="$HOME/.local/share/logs"
  log_file="password-db.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Password Database Change Log:%s\n" "$lightgreen" "$lhost" "$normal"
    column -t -s "|" -N DATE,TIME,STATUS "$log_dir/$log_file"
    print_line "-" "28"
    entries=$(wc -l < "$log_dir/$log_file")
    (( entries > 1 )) && printf "%s entries\n" "$entries" || printf "%s entry\n" "$entries"
  else
    printf "%sThe Password Database Change Log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/passwdsync.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

homebank_log() {
  local log_dir log_file entries
  log_dir="$HOME/.local/share/logs"
	log_file="HomeBank-archive.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s- HomeBank Archive Log:%s\n" "$lightgreen" "$lhost" "$normal"
    column -t -s "|" -N DAY,DATE,TIME,ARCHIVE,RESULT "$log_dir/$log_file"
    print_line "-" "43"
    entries=$(wc -l < "$log_dir/$log_file")
    (( entries > 1 )) && printf "%s entries\n" "$entries" || printf "%s entry\n" "$entries"
  else
    printf "%sThe HomeBank archive log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/hb-archive.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

trash_log() {
  local log_dir="$HOME/.local/share/logs"
  local log_file="trash.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    viewtext "$log_dir/$log_file"
    printf "\n"
  else
    printf "%sThe local trash log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/empty-trash.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

git_snapshots() {
  local log_dir="$HOME/Downloads/archives/gitea"
  if [[ -d "$log_dir" ]]; then
    clear
    printf "%s%s - Git Repository Snapshots:%s\n\n" "$lightgreen" "$lhost" "$normal"
    tree -CAhF --dirsfirst "$log_dir"
    printf "\n"
  else
    printf "%sGit Repository Snapshots do not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/gitea-backup.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

incremental_backups() {
  local arc_dir bu_name job_name sub_dir
  bu_name="$1"
  sub_dir="$2"
  arc_dir="$HOME/Downloads/archives"
  if [[ -d "$arc_dir/$sub_dir" ]]; then
    clear
    printf "%s%s - %s Incremental Backup (last 7 days):%s\n\n" "$lightgreen" "$lhost" "$bu_name" "$normal"
    find "$arc_dir/$sub_dir" -maxdepth 1 -type f -mtime -7 | sort | awk -F/ '{print $NF}' | head -n8
    printf "\n"
  else
    printf "%s%s incremental backups do not exist on %s.%s\n" "$orange" "$bu_name" "$lhost" "$normal"
    case "$bu_name" in
      "Finance" )
        job_name="fin-backup.sh"
      ;;
      "Git" )
        job_name="gitea-bu.sh"
      ;;
      "Journals" )
        job_name="journal-bu.sh"
    esac
    printf "The job is"
    if [[ -x "$HOME/.local/bin/$job_name" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

system_logs() {
	local _opt options
	options=( "System Information" "System Updates" "Timeshift Snapshots" "Defrag Report" "Yt-dlp Updates" "Main Menu" )
	while true; do
		show_header
		COLUMNS=40
		under_line "$lhost System Logs" "="
		PS3="Select a log to view: "
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
					sysinfo
					anykey
					break
				;;
				2 )
					update_log
					anykey
					break
				;;
				3 )
					timeshift_snapshots
					anykey
					break
				;;
				4 )
					defrag_log
					anykey
					break
				;;
				5 )
					ytdlpupdate_log
					anykey
					break
				;;
				6 )
					main
					break
				;;
				* )
					printf "%sInvalid choice.%s Choose 1-%d.\n" "$lightred" "$normal" "${#options[@]}" >&2
				;;
			esac
		done
	done
}

local_logs() {
	local _opt options
	options=( "Password Databases" "Local Trash" "Local Backup" "Main Menu" )
	while true; do
		show_header
		COLUMNS=40
		under_line "$lhost Local Logs" "="
		PS3="Select a log to view: "
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
					password_log
					anykey
					break
				;;
				2 )
					trash_log
					anykey
					break
				;;
				3 )
					local_backup_log
					anykey
					break
				;;
				4 )
					main
					break
				;;
				* )
					printf "%sInvalid choice.%s Choose 1-%d.\n" "$lightred" "$normal" "${#options[@]}" >&2
			esac
		done
	done
}

archive_logs() {
	local _opt options
	options=( "Script archive" "Finance Incremental" "HomeBank Archive" "Git Snapshots" "Git Incremental" "Journal Incremental" "Main Menu" )
	while true; do
		show_header
		COLUMNS=40
		under_line "$lhost Archive Logs" "="
		PS3="Select a log to view: "
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
					script_archive_log
					anykey
					break
				;;
				2 )
					incremental_backups "Finance" "finance"
					anykey
					break
				;;
				3 )
					homebank_log
					anykey
					break
				;;
				4 )
					git_snapshots
					anykey
					break
				;;
				5 )
					incremental_backups "Git" "gitea-repo"
					anykey
					break
				;;
				6 )
					incremental_backups "Journals" "journals"
					anykey
					break
				;;
				7 )
					main
					break
				;;
				* )
					printf "%sInvalid choice.%s Choose 1-%d.\n" "$lightred" "$normal" "${#options[@]}" >&2
			esac
		done
	done
}

main() {
	local _opt options script version
  script="${0##*/}"
  version="10.6.25168"
	options=( "System logs" "Local logs" "Archive Logs" "Quit")
	while true; do
		show_header
		COLUMNS=20
		box "$lhost Main Menu" "*"
		PS3="Select a category: "
		select _opt in "${options[@]}"; do
			case "$REPLY" in
				1 )
					system_logs
					break
				;;
				2 )
					local_logs
					break
				;;
				3 )
					archive_logs
					break
				;;
				4 )
					printf "\n%sMischief managed!%s\n" "$orange" "$normal"
					box "$script $version" "*"
					exit
				;;
				* )
					printf "%sInvalid choice.%s Choose 1-%d.\n" "$lightred" "$normal" "${#options[@]}" >&2
			esac
		done
	done
}

## Execution ##

main "$@"
