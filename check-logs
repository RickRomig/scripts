#!/usr/bin/env bash
###############################################################################
# Script Name  : check-logs
# Description  : Displays selected log files and information.
# Dependencies : functionlib
# Arguments    : None
# Author       : Copyright (C) 2019, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 29 Aug 2019
# Updated      : 29 Apr 2024
# Comments     : sudo access required to view Timeshift snapshots
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="9.3.24120"
readonly lhost="${HOSTNAME:-$(hostname)}"

## Functions ##

sysinfo() {
  if [[ -f "$HOME/$lhost.info" ]]; then
    clear
    printf "%s%s information:%s\n\n" "$lightgreen" "$lhost" "$normal"
    viewtext "$HOME/$lhost.info"
  else
    printf "%s%s.info not found on this system.%s\n" "$orange" "$lhost" "$normal"
  fi
}

updates() {
  local log_dir="/var/log"
  local log_file="update.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Most recent unattended system update:%s\n\n" "$lightgreen" "$lhost" "$normal"
    viewtext "$log_dir/$log_file"
  else
    printf "%sThe system update log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.weekly/z-update" || -x "/opt/bin/z-update" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

timeshift_snapshots() {
  if exists timeshift; then
    sudo_login 0
    if pgrep timeshift > /dev/null 2>&1; then
      printf "\n%sTimeshift is currently running.%s Try again later.\n" "$orange" "$normal"
    elif [[ $(sudo timeshift --list | tail -n1) == "No snapshots found" ]]; then
      printf "\nNo Timeshift snapshots found.\n"
    else
      clear
      printf "%s%s - Timeshift Snapshorts:%s\n\n" "$lightgreen" "$lhost" "$normal"
      sudo timeshift --list | awk 'NR!=1 && NR!=3' 2>/dev/null
    fi
  else
    printf "\n%sTimeshift is not installed on %s.%s\n" "$orange" "$lhost" "$normal"
  fi
}

defrag_log() {
  local log_dir="/var/log"
  local log_file="defrag.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Defragmentation report:%s\n\n" "$lightgreen" "$lhost" "$normal"
    viewtext "$log_dir/$log_file"
  else
    printf "%sThe defragmentation report does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.monthly/z-defrag" || -x "/opt/bin/z-defrag" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

ytdlpupdate_log() {
  local log_dir="/var/log"
  local log_file="ytdlpup.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - yt-dlp Update Log:%s\n\n" "$lightgreen" "$lhost" "$normal"
		(printf "DATE|TIME|VERSION\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "29"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && printf "%s entries\n\n" "$entries" || printf "%s entry\n\n" "$entries"
  else
    printf "%sThe yt-dlp update log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.daily/z-ytdlp-update" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

local_backup_log() {
  local log_dir="/var/log"
  local log_file="backup.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Local Backup Log:%s\n\n" "$lightgreen" "$lhost" "$normal"
		(printf "DAY|DATE|TIME|RESULT\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "34"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && printf "%s entries\n\n" "$entries" || printf "%s entry\n\n" "$entries"
  else
    printf "%sThe local backup log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "/etc/cron.daily/z-backup" || -x "/opt/bin/z-backup" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

script_archive_log() {
  local log_dir="$HOME/.local/share/logs"
	local log_file="script-archive.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Bash Script Archive Log:%s\n\n" "$lightgreen" "$lhost" "$normal"
		(printf "DAY|DATE|TIME|RESULT\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "34"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && printf "%s entries\n\n" "$entries" || printf "%s entry\n\n" "$entries"
  else
    printf "%sThe bash script archive log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/scriptarchive.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

password_log() {
  local log_dir="$HOME/.local/share/logs"
  local log_file="password-db.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s - Password Database Change Log:%s\n\n" "$lightgreen" "$lhost" "$normal"
    (printf "DATE|TIME|STATUS\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "28"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && printf "%s entries\n\n" "$entries" || printf "%s entry\n\n" "$entries"
  else
    printf "%sThe Password Database Change Log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/passwdsync.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

homebank_log() {
  local log_dir="$HOME/.local/share/logs"
	local log_file="HomeBank-archive.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s- HomeBank Archive Log:%s\n\n" "$lightgreen" "$lhost" "$normal"
    (printf "DAY|DATE|TIME|ARCHIVE|RESULT\n"; cat "$log_dir/$log_file") | column -ts "|"
    print_line "-" "43"
    entries=$(wc -l "$log_dir/$log_file" | cut -d' ' -f1)
    (( entries > 1 )) && printf "%s entries\n\n" "$entries" || printf "%s entry\n\n" "$entries"
  else
    printf "%sThe HomeBank archive log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/hb-archive.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

trash_log() {
  local log_dir="$HOME/.local/share/logs"
  local log_file="trash.log"
  if [[ -f "$log_dir/$log_file" ]]; then
    clear
    printf "%s%s Local Trash Log:%s\n\n" "$lightgreen" "$lhost" "$normal"
    viewtext "$log_dir/$log_file"
    printf "\n"
  else
    printf "%sThe local trash log does not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/empty-trash.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

gitea_snapshots() {
  local log_dir="$HOME/Downloads/archives/gitea"
  if [[ -d "$log_dir" ]]; then
    clear
    printf "%s%s - Git Repository Snapshots:%s\n\n" "$lightgreen" "$lhost" "$normal"
    tree -CAhF --dirsfirst "$log_dir"
    printf "\n"
  else
    printf "%sGit Repository Snapshots do not exist on %s.%s\n" "$orange" "$lhost" "$normal"
    printf "The job is"
    if [[ -x "$HOME/.local/bin/gitea-backup.sh" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

incremental_backups() {
  local bu_name="$1"
  local sub_dir="$2"
  local arc_dir_dir="$HOME/Downloads/archives"
  if [[ -d "$arc_dir_dir/$sub_dir" ]]; then
    clear
    printf "%s%s - %s Incremental Backup (last 7):%s\n\n" "$lightgreen" "$lhost" "$bu_name" "$normal"
    find "$arc_dir_dir/$sub_dir" -maxdepth 1 -type f -mtime -7 | sort | awk -F/ '{print $NF}' | head -n8
    printf "\n"
  else
    printf "%s%s incremental backups do not exit on %s.%s\n" "$orange" "$bu_name" "$lhost" "$normal"
    case "$bu_name" in
      "Finance" )
        job_name="fin-backup.sh" ;;
      "Gitea" )
        job_name="gitea-bu.sh" ;;
      "GitHub" )
        job_name="github-bu.sh" ;;
      "Journals" )
        job_name="journal-bu.sh" ;;
    esac
    printf "The job is"
    if [[ -x "$HOME/.local/bin/$job_name" ]]; then
      printf " scheduled but has not run.\n"
    else
      printf " not scheduled to run.\n"
    fi
  fi
}

## Execution ##

while true; do
  clear
  printf "%sI solemnly swear that I'm up to no good.%s\n" "$orange" "$normal"
  box "$_script v$_version" "*"
  printf "Displays the contents of selected log files.\n"
  printf "Not all logs will be available on all systems.\n"
  printf "\n%s%s log files:%s\n" "$lightgreen" "$lhost" "$normal"

  COLUMNS=40
  options=(
    "System Information"
    "System Updates"
    "Timeshift Snapshots"
    "Defrag Report"
    "Yt-dlp Updates"
    "Script archive"
    "Password Databases"
    "Local Backup"
    "Local Trash"
    "Finance Incremental"
    "HomeBank Archive"
    "Git Snapshots"
    "Gitea Incremental"
    "GitHub Incremental"
    "Journal Incremental"
    "Exit the script"
  )
  PS3="Select a log to view: "
  select opt in "${options[@]}"; do
    case $REPLY in
      1 )
        sysinfo; anykey; break ;;
      2 )
        updates; anykey; break ;;
      3 )
        timeshift_snapshots; anykey; break ;;
      4 )
        defrag_log; anykey; break ;;
      5 )
        ytdlpupdate_log; anykey; break ;;
      6 )
        script_archive_log; anykey; break ;;
      7 )
        password_log; anykey; break ;;
      8 )
        local_backup_log; anykey; break ;;
      9 )
        trash_log; anykey; break ;;
      10 )
        incremental_backups "Finance" "finance"; anykey; break ;;
      11 )
        homebank_log; anykey; break ;;
      12 )
        gitea_snapshots; anykey; break ;;
      13 )
        incremental_backups "Gitea" "gitea-repo"; anykey; break ;;
      14 )
        incremental_backups "GitHub" "projects-repo"; anykey; break ;;
      15 )
        incremental_backups "Journals" "journals"; anykey; break ;;
      16 )
        leave "${orange}Mischief managed.${normal}" ;;
      * )
        printf "%sInvalid choice.%s Choose 1-%d.\n" "$lightred" "$normal" "${#options[@]}" >&2
    esac
  done
done
