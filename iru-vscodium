#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-vscodium
# Description  : Install, update, remove VSCodium editor.
# Dependencies : wget
# Arguments    : [-hiru] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 16 Jul 2022
# Updated      : 03 Sep 2025
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="2.8.25246"
readonly gh_url="https://github.com/VSCodium/vscodium/releases"

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="03 Sep 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, configures, updates,  removes the VSCodium editor.

${green}Usage:${normal} $script [-hiru]
${orange}Available options:${normal}
  -h  Show this help message and exit.
  -i  Installs the VSCodium editor.
  -r  Removes the VSCodium editor from the system.
  -u  Updates the VSCodium editor to the latest GitHub release.
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

codium_version() {
	dpkg -l  codium | awk '/ii/ {print $3}'
}

newest_version() {
  local new_ver
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(awk -F'/' '/download/ && /amd64.deb/ {print $8;exit}' "$tmp_file" | grep -Ev 'beta|-rc' | sed 's/^v//')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver=$(dpkg -l codium 2>/dev/null | awk '/ii/ {print $3}' | sed 's/[~+-].*//')
  if [[ ! "$new_ver" > "$cur_ver" ]]; then
    printf "%sVSCodium %s is the latest version. No update required.%s\n" "$lightyellow" "$cur_ver" "$normal"
  else
    printf "%sInstalled version of VSCodium is %s, updating to %s...%s\n" "$lightyellow" "$cur_ver" "$new_ver" "$normal"
    install_vscodium
  fi
}

install_vscodium() {
  local new_pkg="codium_${new_ver}_amd64.deb"
  printf "Downloading VSCodium %s from the VSCodium GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/$new_ver/$new_pkg"
  kill "$!";printf "done\n";tput cnorm
  printf "Installing VSCodium %s...\n" "$new_ver"
  sudo_login 2
	sudo dpkg -i "$tmp_dir/$new_pkg"; sudo apt-get install --fix-brokenq
  printf "VSCodium %s successfully installed.\n" "$(codium_version)"
}

remove_vscodium() {
  local config_dir="$HOME/.config/VSCodium/User"
  sudo_login 2
  printf "Removing the VSCodium editor...\n"
  sudo dpkg --remove codium
  [[ -L "$config_dir/settings.json" ]] && unlink "$config_dir/settings.json"
  find "$HOME/.config" -type d -name VSCodium -exec rm -rf {} \;
  printf "VSCodium editor has been removed.\n"
}

apply_settings() {
  local repository config_dir
  config_dir="$HOME/.config/VSCodium/User"
  repository=$(assign_cfg_repo)
  [[ -d "$config_dir" ]] && mkdir -p "$config_dir"
  printf "Applying VSCodium settings...\n"
  [[ -f "$config_dir/settings.json" ]] && rm "$config_dir/settings.json"
  ln -s "$repository/VSCodium/User/settings.json" "$config_dir/settings.json"
  printf "VSCodium settings applied.\n"
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":hiru"
  while getopts "$optstr" opt; do
	  case "$opt" in
		  h )
			  help 0
        ;;
		  i )
        if exists codium; then
          printf "VSCodium %s is already installed.\n" "$(codium_version)" >&2
        else
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
			    tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
			    trap cleanup EXIT
			    new_ver="$(newest_version)"
          [[ -z "$new_ver" ]] && die "No download available. Try again later." 1
          echo "${lightyellow}Installing VSCodium $new_ver...${normal}"
			    install_vscodium
          apply_settings
        fi
        ;;
		  r )
        if exists codium; then
          remove_vscodium
        else
          printf "VSCodium is not installed.\n" >&2
        fi
        ;;
		  u )
        if exists codium; then
			    tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
			    tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
			    trap cleanup EXIT
			    new_ver="$(newest_version)"
          [[ "$new_ver" ]] || die "No download available. Try again later." 1
			    compare_versions
        else
          printf "VSCodium is not installed.\n" >&2
        fi
        ;;
		  ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
			  help 2
	  esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
