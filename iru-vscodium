#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-vscodium
# Description  : Install, update, remove VSCodium editor.
# Dependencies : gdebi, wget
# Arguments    : [-h] [-i] [-r] [-s] [-u] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 16 Jul 2022
# Updated      : 16 Aug 2024
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="2.18.24229"
readonly _updated="16 Aug 2024"
readonly gh_url="https://github.com/VSCodium/vscodium/releases"

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  local packages=( gdebi wget )
  check_packages "${packages[@]}"
}

newest_version() {
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver="$(dpkg -l | awk '$2 == "codium" {print $3}' | sed 's/[+-].*//')"
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}VSCodium $cur_ver is the current version. No update required.${normal}"
  else
    echo "${lightyellow}Installed version of VSCodium is $cur_ver, updating to $new_ver...${normal}"
    install_vscodium
  fi
}

install_vscodium() {
  local new_pkg="codium_${new_ver}_amd64.deb"
  printf "Downloading VSCodium %s from the VSCodium GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/$new_ver/$new_pkg"
  kill "$!";printf "done\n";tput cnorm
  printf "Installing VSCodium %s...\n" "$new_ver"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  printf "VSCodium %s successfully installed.\n" "$(codium_ver)"
}

remove_vscodium() {
  local vsc_cfg_d vsc_cfg_bu_d
  vsc_cfg_d="${HOME}/.config/VSCodium"
  vsc_cfg_bu_d="${HOME}/.config/backup/VSCodium"
  printf "Removing the VSCodium editor...\n"
  sudo dpkg --remove codium
  [[ -d "$vsc_cfg_d" ]] && rm -rf "$vsc_cfg_d"
  [[ -d "$vsc_cfg_bu_d" ]] && rm -rf "$vsc_cfg_bu_d"
  printf "VSCodium editor has been removed.\n"
}

apply_settings() {
  local json_file localip repository vsc_cfg_d
  localip=$(local_ip)
  vsc_cfg_d="${HOME}/.config/VSCodium/User"
  json_file="settings.json"
  [[ -d "$vsc_cfg_d" ]] || mkdir -p "$vsc_cfg_d"
  printf "Applying VSCodium settings...\n"
  if [[ "$localip" == "16" ]]; then
    repository="HOME/gitea/configs/VSCodium/User"
    cp -v "$repository/$json_file" "$vsc_cfg_d/"
  else
    repository="configs/raw/branch/main/VSCodium/User"
    curl -so "$vsc_cfg_d/$json_file" "$Gitea_URL/$repository/$json_file"
  fi
  printf "VSCodium settings applied.\n"
}

codium_ver() {
	dpkg -l | grep -w codium | awk '{print $3}'
}

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${orange}$_script${normal} $_version ($_updated)
Installs, configures, updates,  removes the VSCodium editor.

${green}Usage:${normal} $_script [OPTION]

${orange}Available options:${normal}
  -h  Displays help.
  -i  Installs the VSCodium editor.
  -r  Removes the VSCodium editor from the system.
  -s  Applies VSCodium settings.
  -u  Updates the VSCodium editor to the latest version.
END_HELP
  exit "$errcode"
}

## Execution ##

noOpt=1
optstr=":hirsu"
while getopts "$optstr" opt; do
	case "$opt" in
		h )
			help 0
    ;;
		i )
			exists codium && leave "VSCodium $(codium_ver) is already installed."
      sudo_login 2
      check_dependencies
      tmp_file=$(mktemp) || die "Failed to create temporary file." 1
			tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
			trap cleanup EXIT
			new_ver="$(newest_version)"
      [[ -z "$new_ver" ]] && die "No download available. Try again later." 1
      echo "${lightyellow}Installing VSCodium $new_ver...${normal}"
			install_vscodium
      apply_settings
    ;;
		r )
      exists codium || leave "VSCodium is not installed."
      sudo_login 2
      remove_vscodium
    ;;
		s )
      exists codium || leave "VSCodium is not installed."
      apply_settings
    ;;
		u )
      exists codium || leave "VSCodium is not installed."
      sudo_login 2
      check_dependencies
			tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
			tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
			trap cleanup EXIT
			new_ver="$(newest_version)"
      [[ -z "$new_ver" ]] && die "No download available. Try again later." 1
			compare_versions
    ;;
		? )
      printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
box "$_script v$_version"
exit
