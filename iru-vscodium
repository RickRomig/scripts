#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-vscodium
# Description  : Install, update, remove VSCodium editor.
# Dependencies : gdebi, wget
# Arguments    : [-h] [-i] [-r] [-s] [-u] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 16 Jul 2022
# Updated      : 12 Feb 2025
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="2.4.25043"
readonly gh_url="https://github.com/VSCodium/vscodium/releases"

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  local packages=( gdebi git wget )
  check_packages "${packages[@]}"
}

assign_repo() {
	local localip repo
	localip=$(local_ip)
	repo="$HOME/Downloads/configs"
	case "$localip" in
		10|16|22 )
			repo="$HOME/gitea/configs" ;;
		* )
			[[ -d "$repo" ]] || git clone --quiet "$GITEA_URL/configs.git" "$repo"
	esac
	echo "$repo"
}

codium_version() {
	dpkg -l  codium | awk '/ii/ {print $3}'
}

newest_version() {
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $8;exit}')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  # cur_ver="$(dpkg -l | awk '$2 == "codium" {print $3}' | sed 's/[+-].*//')"
  cur_ver=$(dpkg -l codium 2>/dev/null | awk '/ii/ {print $3}' | sed 's/[~+-].*//')
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}VSCodium $cur_ver is the current version. No update required.${normal}"
  else
    echo "${lightyellow}Installed version of VSCodium is $cur_ver, updating to $new_ver...${normal}"
    install_vscodium
  fi
}

install_vscodium() {
  local new_pkg="codium_${new_ver}_amd64.deb"
  printf "Downloading VSCodium %s from the VSCodium GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/$new_ver/$new_pkg"
  kill "$!";printf "done\n";tput cnorm
  printf "Installing VSCodium %s...\n" "$new_ver"
  # sudo gdebi -n "$tmp_dir/$new_pkg" 2>/dev/null
	# sudo apt-get install "$tmp_dir/$new_pkg"
	sudo dpkg -i "$tmp_dir/$new_pkg"; sudo apt-get install --fix-brokenq
  printf "VSCodium %s successfully installed.\n" "$(codium_version)"
}

remove_vscodium() {
  local vsc_cfg_d vsc_cfg_bu_d
  vsc_cfg_d="${HOME}/.config/VSCodium"
  vsc_cfg_bu_d="${HOME}/.config/backup/VSCodium"
  printf "Removing the VSCodium editor...\n"
  sudo dpkg --remove codium
  [[ -d "$vsc_cfg_d" ]] && rm -rf "$vsc_cfg_d"
  [[ -d "$vsc_cfg_bu_d" ]] && rm -rf "$vsc_cfg_bu_d"
  printf "VSCodium editor has been removed.\n"
}

apply_settings() {
  local json_file repository vsc_cfg_d
  repository=$(assign_repo)
  vsc_cfg_d="${HOME}/.config/VSCodium/User"
  json_file="settings.json"
  [[ -d "$vsc_cfg_d" ]] || mkdir -p "$vsc_cfg_d"
  printf "Applying VSCodium settings...\n"
  cp -v "$repository/VSCodium/User/$json_file" "$vsc_cfg_d/"
  printf "VSCodium settings applied.\n"
}

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="12 Feb 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, configures, updates,  removes the VSCodium editor.

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -h  Displays help.
  -i  Installs the VSCodium editor.
  -r  Removes the VSCodium editor from the system.
  -s  Applies VSCodium settings.
  -u  Updates the VSCodium editor to the latest version.
_HELP_
  exit "$errcode"
}

main() {
  local noOpt opt optstr
  check_dependencies
  noOpt=1
  optstr=":hirsu"
  while getopts "$optstr" opt; do
	  case "$opt" in
		  h )
			  help 0
      ;;
		  i )
			  exists codium && leave "VSCodium $(codium_version) is already installed."
        sudo_login 2
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
			  tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
			  trap cleanup EXIT
			  new_ver="$(newest_version)"
        [[ -z "$new_ver" ]] && die "No download available. Try again later." 1
        echo "${lightyellow}Installing VSCodium $new_ver...${normal}"
			  install_vscodium
        apply_settings
      ;;
		  r )
        exists codium || leave "VSCodium is not installed."
        sudo_login 2
        remove_vscodium
      ;;
		  s )
        exists codium || leave "VSCodium is not installed."
        apply_settings
      ;;
		  u )
        exists codium || leave "VSCodium is not installed."
        sudo_login 2
			  tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
			  tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
			  trap cleanup EXIT
			  new_ver="$(newest_version)"
        [[ "$new_ver" ]] || die "No download available. Try again later." 1
			  compare_versions
      ;;
		  ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
			  help 2
	  esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  box "$script v$version"
  exit
}

## Execution ##

main "$@"
