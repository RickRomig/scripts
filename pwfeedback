#!/usr/bin/env bash
##########################################################################
# Script Name  : pwfeedback
# Description  : Enables/disables display of asterisks when entering password.
# Dependencies : none
# Arguments    : [-e] [-d] [-h] [-s] (see help function for details.)
# Author       : Richard B. Romig, 27 Sep 2020
# Email        : rick.romig@gmail.com
# Comments     : Preferred (default) method is /etc/sudoers.d/0pwfeedback.
# 07 Sep 2021  : In disable_pwfeedback, added call to visudo to edit sudoers.
# 07 Oct 2021  : In disable_pwfeedback, removed call to visudo and
#              : used 'sed' to remove 'pwfeedback' from the sudoers file.
# 15 Nov 2021  : Corrected error in 0pwfeedback file creation.
# 25 Feb 2022  : Added `getopts` for command-line options. Added help function.
# 07 Mar 2022  : Reverted to visudo to change sudoers for safety reasons.
# 17 Mar 2022  : Added option to display of password feedbak status.
# 30 Sep 2022  : Changed some variables & printf statements.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.4.0"
readonly _updated="30 Sep 2022"
readonly pwfb_dir="/etc/sudoers.d"
readonly pwfb_file="0pwfeedback"
readonly red_error="${lightred}ERROR:${normal}"

## Functions ##

pwfeedback_status() {
  pwfb=$(sudo grep 'pwfeedback' /etc/sudoers)
  if [[ -n "$pwfb" || -f "$pwfb_dir/$pwfb_file" ]]; then
    printf "Password feedback is enabled by "
    [[  -n "$pwfb" ]] && printf "sudoers.\n" || printf "%s.\n" "$pwfb_file"
  else
    printf "Password feeback is not enabled.\n"
  fi
}

enable_pwfeedback() {
  pwfb=$(sudo grep 'pwfeedback' /etc/sudoers)
  if [[ -n "$pwfb" || -f "$pwfb_dir/$pwfb_file" ]]; then
    printf "Password feedback is already enabled by "
    [[  -n "$pwfb" ]] && printf "sudoers.\n" || printf "%s.\n" "$pwfb_file"
  else
    printf "Creating %s ...\n" "$pwfb_file"
    printf "Defaults  pwfeedback\n" | sudo tee "$pwfb_dir/$pwfb_file" > /dev/null
    # sudo sh -c 'echo "Defaults pwfeedback" > /etc/sudoers.d/0pwfeedback'
    sudo chmod 440 "$pwfb_dir/$pwfb_file"
    printf "Password feedback enabled by %s.\n" "$pwfb_file"
  fi
}

disable_pwfeedback() {
  pwfb=$(sudo grep 'pwfeedback' /etc/sudoers)
  if [[ -f "$pwfb_dir/$pwfb_file" ]]; then
    sudo rm -fv "$pwfb_dir/$pwfb_file"
    printf "Password feeback is now disabled. %s has been deleted.\n" "$pwfb_dir/$pwfb_file"
  elif [[ -n "$pwfb" ]]; then
    # Use of visudo to edit /etc/sudoers is highly recommended.
    printf "Remove 'pwfeedback' from the sudoers file using visudo.\n"
    sudo visudo
    sudo grep -qw pwfeedback /etc/sudoers || printf "Password feeback is now disabled.\n"
  else
    printf "Password feedback is already disabled.\n"
  fi
}

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${green}Usage:${normal} $_script [OPTIONS]
${orange}OPTIONS:${normal}
  -e    Enable password feedback
  -d    Disable password feedback
  -h    Help
  -s    Status of password feedback
END_HELP
  printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

## Execution ##

printf "Enable/Disable password feedback in the terminal.\n"

if [[ "$#" -eq 0 ]]; then
  printf "%s No argument passed\n" "$red_error" >&2
  help 2
else
  optstr=":edhs"
  while getopts "$optstr" opt; do
    case "$opt" in
      e )
        user_in_sudo
        enable_pwfeedback
        break ;;
      d )
        user_in_sudo
        disable_pwfeedback
        break ;;
      h )
        help 0 ;;
      s )
        user_in_sudo
        pwfeedback_status
        break ;;
      ? )
        printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
        help 2 ;;
    esac
  done
fi
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
exit
