#!/usr/bin/env bash
###############################################################################
# Script Name  : insert-header
# Description  : Insert a header into a shell script or C source code.
# Dependencies : bat, micro (used by edit_view_quit.)
# Arguments    : see help(). Shell script or C/C++ source file
# Author       : Copyright (C) 2019, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Jun 2019
# Updated      : 20 Jul 2025
# Comments     : Assumes first line of the target file is either a hash-bang or a C/C++ comment
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

set -eu

## Global Variables ##

script_dir=$(dirname "$(readlink -f "${0}")"); readonly script_dir
readonly script="${0##*/}"
readonly version="4.4.25201"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="20 Jul 2025"
  cat << _HELP_
${orange}$script${normal} $version ($updated)
Inserts a header into a shell script or a C/C++ source file.

${green}Usage:${normal} $script [-h] [-c c-source-file] [-p cpp-source-file] [-s shell-script]
${orange}Available options:${normal}
  -c  Insert C code header
      $script -c <c-source.c>
  -h  Show this help message and exit
  -p  Insert C++ code header
      $script -p <cpp-source.cpp>
  -s  Insert Shell script header
      $script -s <shell-script>
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

create_tmp_file() {
	tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
	trap cleanup EXIT
}

insert_header() {
	local coder code_file code_type cur_yr copy_holder email_addr email_addr1 work_org today license template_dir template_file
	code_file="$1"
	code_type="$2"
	template_file="$3"
	coder="Rick"
	copy_holder="Richard B. Romig"
	email_addr="rick.romig@gmail.com"
	email_addr1="rick.romig@mymetronet.com"
	work_org="Mosfanet"
	license="GNU General Public License, version 2.0"
	today=$(date +"%d %b %Y")
	cur_yr=$(echo -e "\UA9 $(date +%Y)")
	template_dir="$script_dir/Templates"

	case $code_type in
    "C"|"C++" )
      sed -e '1d' \
        -e "s/<PROGNAME>/$code_file/" \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<AUTHOR>/$copy_holder/" \
        -e "s/<ADDR>/$email_addr/" \
        -e "s/<ADDR1>/$email_addr1/" \
        -e "s/<ORG>/$work_org/" \
        -e "s/<TODAY>/$today/" \
        -e "s/<LICENSE>/$license/" "$template_dir/$template_file" > "$tmp_file"
      sed -i -e "1r ${tmp_file}" "$code_file"
      ;;
    "Shell" )
	    sed -e '1d' \
        -e "s/<FILE>/$code_file/" \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<AUTHOR>/$copy_holder/" \
        -e "s/<EMAIL>/$email_addr/" \
        -e "s/<EMAIL1>/$email_addr1/" \
        -e "s/<ORG>/$work_org/" \
        -e "s/<TODAY>/$today/" \
        -e "s/<CODER>/$coder/" \
        -e "s/<LICENSE>/$license/" "$template_dir/$template_file" > "$tmp_file"
      sed -i -e "1r ${tmp_file}" "$code_file"
      ;;
    * )
      printf "%sInvalid code type.%s\n" "$lightred" "$normal" >&2
	esac
	printf "The %s header has been inserted into %s." "$code_type" "$code_file"
}

main() {
	local code_file code_type template_file noOpt opt optstr
	noOpt=1
	optstr=":c:hp:s:v"
	while getopts "$optstr" opt; do
    case "$opt" in
      c )
				code_file="$OPTARG"
				[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
        code_type="C"
        template_file="c-header.txt"
        create_tmp_file
        ;;
      h )
        help 0
        ;;
      p )
				code_file="$OPTARG"
				[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
        code_type="C++"
        template_file="cppset-header.txt"
        create_tmp_file
        ;;
      s )
				code_file="$OPTARG"
				[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$RED_ERROR" "$code_file" >&2; help 2; }
        code_type="Shell"
        template_file="bash-header.txt"
        create_tmp_file
        ;;
     : )
        printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
        ;;
      ? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
    esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	[[ "$code_file" ]] || { printf "%s No code file provided.\n" "$RED_ERROR" >&2; help 2; }
	insert_header "$code_file" "$code_type" "$template_file"
	edit_view_quit "$code_file"
	over_line "$script $version"
	printf "MOTD: "; leave ""
}

## Execution ##

main "$@"
