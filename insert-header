#!/usr/bin/env bash
###############################################################################
# Script Name  : insert-header
# Description  : Insert a header into a shell script or C source code.
# Dependencies : bat, micro (nano)
# Arguments    : Bash script or c source file
# Author       : Copyright (C) 2019, Richard B. Romig, 05 June 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Assumes first line or the target file is either a hash-bang or
#              : a C-style comment
#              : bat - https://github.com/sharkdp/bat/releases/
#              : less or cat can be substituted for bat
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="v3.1.1"
readonly _updated="09 Oct 2023"
readonly conf_dir="$HOME/.config/scripts"
readonly conf_file="$_script.conf"
today=$(date +"%d %b %Y"); readonly today
cur_yr=$(echo -e "\UA9 $(date +%Y)"); readonly cur_yr

# Data to insert into new bash script
# template directory, copy_holder, email_addr, email_addr1, coder, license contained in script's .conf file.

## Functions ##

create_conf() {
  [[ -d "$conf_dir" ]] || mkdir -p "$conf_dir"
  echo "Complete all fields"
  read -rp "Full name: " copy_holder
  read -rp "Primary email: " email_addr
  read -rp "Alternate email: " email_addr1
  read -rp "Organization: " work_org
  read -rp "Coder name: " coder
  read -rp "License: " license
  read -rp "Template diretory (full path): " template_dir

  echo "
  copy_holder='$copy_holder'
  email_addr='$email_addr'
  email_addr1='$email_addr1'
  work_org='$work_org'
  coder='$coder'
  license='$license'
  template_dir='$template_dir'
  " > "$conf_dir/$conf_file"
}

usage() {
  local errcode="${1:-2}"
  cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -c  C code
      $_script -c <c-source.c>
  -e  Edit $_script.conf
  -p  C++ code
      $_script -p <c-source.cpp>
  -s  Shell script
      $_script -s <shell-script>
  -u  Usage instructions
END_HELP
  exit "$errcode"
}

cleanup() {
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

## Execution ##

noOpt=1
optstr=":c:ep:s:u"
while getopts "$optstr" opt; do
  case "$opt" in
    c )
			code_file="$OPTARG"
			[[ -f "$code_file" ]] || { printf "%s %s not found\n" "$red_error" "$code_file" >&2; usage 2; }
      code_type="C"
    ;;
    e )
			micro "$conf_dir/$conf_file"
			printf "%s edited.\n" "$_script"
			leave "$_script v$_version ($_updated)"
    ;;
    p )
			code_file="$OPTARG"
			[[ -f "$filename" ]] || { printf "%s %s not found\n" "$red_error" "$code_file" >&2; usage 2; }
      code_type="C++"
    ;;
    s )
			code_file="$OPTARG"
			[[ -f "$filename" ]] || { printf "%s %s not found\n" "$red_error" "$code_file" >&2; usage 2; }
      code_type="Shell"
    ;;
    u )
      usage 0
    ;;
    : )
      printf "%s Must supply an argument to -%s.\n" "$red_error" "$OPTARG" >&2
      usage 2
    ;;
    ? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			usage 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; usage 1; }

## Source script configuration file ##

[[ -f "$conf_dir/$conf_file" ]] || create_conf
source "$conf_dir/$conf_file"

tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
trap cleanup EXIT

clear
box " $_script $_version (Updated $_updated)"
printf "Inserts a header into either a shell script or a C/C++ source file.\n"
printf "Licensed under the GNU General Public License, version 2.\n"
printf "Copyright 2019-2023, Richard B. Romig\n"

case $code_type in
  "C" )
    printf "\n%sInserting C header into %s...%s\n" "$green" "$code_file" "$normal"
    sed -e '1d' \
        -e "s/<PROGNAME>/$code_file/" \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<AUTHOR>/$copy_holder/" \
        -e "s/<ADDR>/$email_addr/" \
        -e "s/<ADDR1>/$email_addr1/" \
        -e "s/<ORG>/$work_org/" \
        -e "s/<TODAY>/$today/" \
        -e "s/<LICENSE>/$license/" "$template_dir/c-header" > "$tmp_file"
    sed -i -e "1r ${tmp_file}" "$code_file"
  ;;
  "C++" )
    printf "\n%sInserting C++ header into %s...%s\n" "$green" "$code_file" "$normal"
    sed -e '1d' \
        -e "s/<PROGNAME>/$code_file/" \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<AUTHOR>/$copy_holder/" \
        -e "s/<ADDR>/$email_addr/" \
        -e "s/<ADDR1>/$email_addr1/" \
        -e "s/<ORG>/$work_org/" \
        -e "s/<TODAY>/$today/" \
        -e "s/<LICENSE>/$license/" "$template_dir/cpp-header" > "$tmp_file"
    sed -i -e "1r ${tmp_file}" "$code_file"
  ;;
  "Shell" )
    printf "\n%sInserting shell header into %s...%s\n" "$green" "$code_file" "$normal"
    sed -e '1d' \
        -e "s/<FILE>/$code_file/" \
        -e "s/<YEAR>/$cur_yr/" \
        -e "s/<AUTHOR>/$copy_holder/" \
        -e "s/<EMAIL>/$email_addr/" \
        -e "s/<EMAIL1>/$email_addr1/" \
        -e "s/<ORG>/$work_org/" \
        -e "s/<TODAY>/$today/" \
        -e "s/<CODER>/$coder/" \
        -e "s/<LICENSE>/$license/" "$template_dir/bash-header" > "$tmp_file"
    sed -i -e "1r ${tmp_file}" "$code_file"
  ;;
  * )
    printf "%sInvalid code type.%s\n" "$lightred" "$normal" >&2
esac

printf "%s header has been inserted into %s.\n" "$code_type" "$code_file"
edit_view_quit "$code_file"

printf "\n"
leave ""
