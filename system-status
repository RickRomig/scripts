#!/usr/bin/env bash
#####################################################################
# Script Name  : check-status
# Description  : Displays a snapshot of system resources
# Dependencies : lm-sensors, sensors
# Arguments    : none
# Author       : Copyright (C) 2018,Richard Romig, 17 November 2018
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Inspired by Joe Collins <https://www.ezeeLinux.com>
#              : and Luke Smith <https://lukesmith.xyz>
# 13 Feb 2022  : Added `-x fuse.portal` to df command to eliminate this error:
#              : df: /run/user/1000/doc: Operation not permitted
# License      : GNU General Public License, version 2.0
#####################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.5.2"
readonly _updated="04 May 2023"

## Functions ##

check_dependencies() {
  if [[ -x /usr/bin/sensors ]]; then
  	printf "lm-sensors - OK\n"
  elif sudo apt-get install lm-sensors -yy; then
  	printf "lm-sensors - OK\n"
  else
  	die "lm-sensors cannot be installed." 1
	fi
	sleep 2
}

nvme_temperature() {
  printf "%s%-21s%s%s\n" "$orange" "NVME temperature:" "$normal" "$(/usr/bin/sensors | awk '/Composite/ {printf $2 " "}' | sed 's/+//g')"
}

hdd_temperature() {
  sensors | grep -w drivetemp >/dev/null 2>&1 || sudo modprobe drivetemp
  printf "%s%-21s%s%s\n" "$orange" "SSD/HDD temperature:" "$normal" "$(/usr/bin/sensors | awk '/\(low / {printf $2 " "}' | sed 's/+//g')"
}

cpu_temperature(){
	cpu_temp=$(/usr/bin/sensors | awk '/^Package/ {print $4}')
	[[ -z "$cpu_temp" ]] && cpu_temp=$(/usr/bin/sensors | awk '/^CPU/ {print $2}')
	[[ -z "$cpu_temp" ]] && cpu_temp=$(/usr/bin/sensors | awk '/^Core 0:/ {print $3}')
	[[ -z "$cpu_temp" ]] && cpu_temp=$(/usr/bin/sensors | awk '/^temp1:/ && /\(high/ {print $2}')
	printf "\n%s%-21s%s%s\n" "$orange" "CPU temperature:" "$normal" "$(echo "$cpu_temp" | sed 's/^+//')"
}

memory_usage() {
	printf "\n%sMemory usage:%s %s\n" "$orange" "$normal" "$(/usr/bin/free -h | awk '/^Mem:/ {print $3 "/" $2}')"
  printf "Process\t\tPercentage\n"
  ps axch -o cmd:15,%mem --sort=-%mem | head -n 10
}

cpu_usage() {
	printf "\n%sCPU usage:%s\n" "$orange" "$normal"
  printf "Process\t\tPercentage\n"
  ps axch -o cmd:15,%cpu --sort=-%cpu | head -n 10
}

disk_usage() {
	printf "\n%sDisk usage:%s\n" "$orange" "$normal"
  df -hT -x fuse.portal | sed -n '1p;/^\//p'
}

main() {
  printf "%sSystem Status%s\n" "$lightyellow" "$normal"
  printf "%s%-16s%s\n" "$orange" "Computer name:" "$(uname -n)"
  printf "%-16s%s\n" "Distribution:" "$(get_distribution)"
  printf "%-16s%s%s\n" "Kernel Version:" "$(uname -sr)" "$normal"
  memory_usage
  cpu_usage
  cpu_temperature
  [[ -c /dev/nvme0 ]] && nvme_temperature
  [[ -b /dev/sda ]] && hdd_temperature
  disk_usage
  printf "\nThe system has been %s\n" "$(/usr/bin/uptime -p)"
  printf "\n%s %s (%s)\n" "$_script" "$_version" "$_updated"
  exit
}

## Execution ##

check_dependencies
clear
main
