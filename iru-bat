#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-bat
# Description  : Installs, updates, and removes the Bat utillity program.
# Dependencies : curl, gdebi, wget
# Arguments    : -c -h -i -r -u (See the help function for details.)
# Author       : Richard B. Romig, 09 Jan 2022
# Email        : rick.romig@gmail.com
# Comments     :
# 30 Jan 2022  : Added confirmation for install/update.
# 31 Jan 2022  : Added option to write Bat configuration file.
# 15 Feb 2022  : Changed method for `new_ver` variable assignment.
# 22 Feb 2022  : Incorporated `getopts` to process options.
# 27 Feb 2022  : Check ldd version (< 2.29 will not work with bat 0.20.0 and above)
# 28 Feb 2022  : Displays distro if new bat version is not compatable.
# 01 Mar 2022  : Fixed new_ver function to get 7th field of download URL.
# 02 Mar 2022  : Check libc6 version instead of ldd.
# 11 Mar 2022  : Added function to extract installed version number of bat.
# 22 Mar 2022  : Check for known compatible distributions instead of ldd/libc6 version.
# 29 Mar 2022  : Added $OPTARG to Invalid option message.
# 05 May 2022  : Replaced curl with wget for consistency.
# 12 May 2022  : Added optstr and opt variables to getopts routine.
# 28 Aug 2022  : Installs latest version compatible with current distribution.
# 01 Sep 2022  : -u option updates installed version only. Does not do initial install.
# 02 Sep 2022  : Removed confirm_install, unnecessary.
# 07 Sep 2022  : Moved existence checks out of functions to getopts.
# 18 Nov 2022  : Renamed install and remove functions.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

readonly _script=$(basename "$0")
readonly _version="0.4.2"
readonly _updated="18 Nov 2022"
readonly url="https://github.com/sharkdp/bat/releases"
readonly bat_cfg=$HOME"/.config/bat"

## Functions ##

cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  check_package wget
  check_package gdebi
}

check_distro() {
  codename=$(lsb_release -c -s)
  case "$codename" in
    bullseye|elsie|focal|jammy|ulyana|ulyssa|uma|una|vanessa ) return "$TRUE" ;;
    * ) return "$FALSE" ;;
  esac
}

bat_ver() {
  bat --version | awk '{print $2}'
}

newest_version() {
  wget -qO "$tmp_file" "$url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
  check_distro || new_ver="0.19.0"
  echo "$new_ver"
}

compare_versions() {
  cur_ver="$(bat_ver)"
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}Bat $cur_ver is the current version. No update required.${normal}"
    check_distro || echo "Bat $new_ver is the latest version compatible with $(get_distribution)."
  else
    echo "${lightyellow}Current version of Bat is $cur_ver, updating to $new_ver...${normal}"
    check_distro || echo "Bat $new_ver is the latest version compatible with $(get_distribution)."
    install_bat
  fi
}

install_bat() {
  local new_pkg="bat_${new_ver}_amd64.deb"
  echo "Downloading Bat from the sharkdp GitHub repository..."
  wget -q -P "$tmp_dir/" "$url/download/v$new_ver/$new_pkg"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  echo "Bat $(bat_ver) installed."
}

remove_bat() {
  echo "Removing the Bat utility..."
  sudo dpkg --remove bat
  [[ -d "$bat_cfg" ]] && rm -rf "$bat_cfg"
  echo "Bat and its configuration files have been removed."
}

apply_config() {
  [[ -d "$bat_cfg" ]] || mkdir -p "$bat_cfg"
  echo "Applying Bat configuration..."
  bat_config
  echo "Bat configuration applied"
}

bat_config() {
  cat << EOF > "$bat_cfg/config"
# Set the theme to "OneHalfDark"
--theme="OneHalfDark"

# Show line numbers, Git modifications, file header, and grid
--style="numbers,changes,header,grid"

# Use italic text on the terminal (not supported on all terminals)
# --italic-text=always

# Add mouse scrolling support in less (does not work with older
# versions of "less")
# --pager="less -FR"

# paging option - *auto*, always, never
--paging=always

# Use C++ syntax (instead of C) for .h header files
# --map-syntax h:cpp

# Use "gitignore" highlighting for ".ignore" files
# --map-syntax .ignore:.gitignore
--map-syntax ".ignore:Git Ignore"
EOF
  echo "Bat configuration file created."
}

help() {
  local errcode="${1:-2}"
  cat << EOF
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -c    Installs/updates Bat configuration file.
  -h    Displays help.
  -i    Installs the Bat utility.
  -r    Removes the Bat utility from the system.
  -u    Updates the Bat utility to the latest version.
EOF
  exit "$errcode"
}

## Execution ##

check_dependencies
printf "\U1F427 %s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Installs, updates, or removes the Bat utililty.\n"

if [[ $# -eq 0 ]]; then
  echo "${lightred}ERROR:${normal} No argument passed." >&2
  help 2
else
  optstr=":chiru"
  while getopts "$optstr" opt; do
    case "$opt" in
      c )
        exists bat || leave "Bat is not installed. Run '$_script -i' to install."
        apply_config
        ;;
      h )
        help 0
        ;;
      i )
        exists bat && leave "Bat $(bat_ver) is already installed."
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
        tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
        trap cleanup EXIT
        new_ver="$(newest_version)"
        echo "${lightyellow}Installing Bat version $new_ver...${normal}"
        check_distro || echo "Bat $new_ver is the latest version compatible with $(get_distribution)."
        install_bat
        apply_config
        ;;
      r )
        exists bat || leave "Bat is not installed. Run '$_script -i' to install."
        remove_bat
        ;;
      u )
        exists bat || leave "Bat is not installed. Run '$_script -i' to install."
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
        tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
        trap cleanup EXIT
        new_ver="$(newest_version)"
        compare_versions
        ;;
      ? )
        echo "${lightred}ERROR:${normal}Invalid option -${OPTARG}" >&2
        help 2
        ;;
    esac
  done
fi
