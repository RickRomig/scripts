#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-bat
# Description  : Installs, updates, and removes the Bat utillity program.
# Dependencies : gdebi, wget git
# Arguments    : -c -h -i -r -u (See the help function for details.)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 09 Jan 2022
# Updated      : 10 Jan 2025
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="5.12.25010"
readonly gh_url="https://github.com/sharkdp/bat/releases"
readonly cfg_d=$HOME"/.config/bat"

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  local packages=( gdebi git wget )
  check_packages "${packages[@]}"
}

assign_repo() {
	local localip repo
	localip=$(local_ip)
	repo="$HOME/Downloads/configs"
	case "$localip" in
		10|16|22 )
			repo="$HOME/gitea/configs" ;;
		* )
			[[ -d "$repo" ]] || git clone --quiet "$GITEA_URL/configs.git" "$repo"
	esac
	echo "$repo"
}

check_distro() {
  local codename
  codename=$(lsb_release -c -s)
  case "$codename" in
    bookworm|bullseye|boron|faye|jammy|noble|virginia|wilma|xia ) return "$TRUE" ;;
    * ) return "$FALSE" ;;
  esac
}

bat_version() {
  bat --version | cut -d' ' -f2
}

newest_version() {
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
  check_distro || new_ver="0.19.0"
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver="$(bat_version)"
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}Bat $cur_ver is the current version. No update required.${normal}"
    check_distro || echo "Bat $new_ver is the latest version compatible with $(get_distribution)."
  else
    echo "${lightyellow}Installed version of Bat is $cur_ver, updating to $new_ver...${normal}"
    check_distro || echo "Bat $new_ver is the latest version compatible with $(get_distribution)."
    install_bat
  fi
}

install_bat() {
  local new_pkg="bat_${new_ver}_amd64.deb"
  sudo_login 2
  printf "Downloading Bat %s from the sharkdp GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/v$new_ver/$new_pkg"
  kill "$!"; tput cnorm
  printf "done\nInstalling Bat %s...\n" "$new_ver"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  printf "Bat %s installed.\n" "$(bat_version)"
}

remove_bat() {
  local cfg_bu_d="$HOME/.config/backup/bat"
  sudo_login 2
  printf "Removing Bat %s...\n" "$(bat_version)"
  sudo dpkg --remove bat
  [[ -d "$cfg_d" ]] && rm -rf "$cfg_d"
  [[ -d "$cfg_bu_d" ]] && rm -rf "$cfg_bu_d"
  printf "Bat and its configuration files have been removed.\n"
}

dl_bat_config() {
  local cfg_file repository
  repository=$(assign_repo)
  cfg_file="config"
  [[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
  printf "Applying Bat configuration...\n"
  cp -v "$repository/bat/$cfg_file" "$cfg_d/"
  printf "Bat configuration applied.\n"
}

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="10 Jan 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, updates, or removes the Bat utililty.

${green}Usage:${normal} $script [OPTION]
${orange}Available options:${normal}
  -c  Installs/updates Bat configuration file.
  -h  Displays help.
  -i  Installs the Bat utility.
  -r  Removes the Bat utility from the system.
  -u  Updates the Bat utility to the latest version.
_HELP_
  exit "$errcode"
}

main() {
  local noOpt opt optstr repository
  check_dependencies
	repository=$(assign_repo)
  noOpt=1
  optstr=":chiru"
  while getopts "$optstr" opt; do
    case "$opt" in
      c )
        exists bat || leave "Bat is not installed."
        dl_bat_config "$repository"
      ;;
      h )
        help 0
      ;;
      i )
        exists bat && leave "Bat $(bat_version) is already installed."
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
        tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
        trap cleanup EXIT
        new_ver="$(newest_version)"
        echo "${lightyellow}Installing Bat version $new_ver...${normal}"
        check_distro || echo "Bat $new_ver is the latest version compatible with $(get_distribution)."
        install_bat
        dl_bat_config "$repository"
      ;;
      r )
        exists bat || leave "Bat is not installed."
        remove_bat
      ;;
      u )
        exists bat || leave "Bat is not installed."
        tmp_file=$(mktemp) || die "Failed to create temporary file." 1
        tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
        trap cleanup EXIT
        new_ver="$(newest_version)"
        [[ -z "$new_ver" ]] && die "No download available. Try again later." 1
        compare_versions
      ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
	over_line "$script v$version"
  exit
}

## Execution ##

main "$@"
