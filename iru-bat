#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-bat
# Description  : Installs, updates, and removes the Bat utillity program.
# Dependencies : gdebi, wget git
# Arguments    : See the help function for details.
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 09 Jan 2022
# Updated      : 19 Jul 2025
# Comments     : Use install-batcat if distro version equals latest GitHub release.
#              : Mint 22 installs version 0.24.0 with the Ubuntu version appended.
#              : Debian 13 installs version 0.25.0 with the Debian version appended.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="6.3.25200"
readonly gh_url="https://github.com/sharkdp/bat/releases"

## Functions ##

help() {
	local errcode="${1:-2}"
	local -r updated="19 Jul 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, updates, or removes the Bat utililty.

${green}Usage:${normal} $script [-hiru]
${orange}Available options:${normal}
  -h  Show this help message and exit
  -i  Installs the Bat utility.
  -r  Removes the Bat utility from the system.
  -u  Updates the Bat utility to the latest GitHub release.
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  local packages=( git wget )
  check_packages "${packages[@]}"
}

bat_version() {
  bat --version | cut -d' ' -f2
}

newest_version() {
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver="$(bat_version)"
  if [[ ! "$new_ver" > "$cur_ver" ]]; then
    printf "%s Bat %s is the current version. No update required.%s\n" "$lightyellow" "$cur_ver" "$normal"
  else
    printf "%sInstalled version of Bat is %s, updating to %s...%s\n" "$lightyellow" "$cur_ver" "$new_ver" "$normal"
    install_bat
  fi
}

install_bat() {
  local new_pkg="bat_${new_ver}_amd64.deb"
  sudo_login 2
  printf "Downloading Bat %s from the sharkdp GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/v$new_ver/$new_pkg"
  kill "$!"; tput cnorm
  printf "done\nInstalling Bat %s...\n" "$new_ver"
	sudo dpkg -i "$tmp_dir/$new_pkg"; sudo apt-get install --fix-broken
  printf "Bat %s installed.\n" "$(bat_version)"
}

remove_bat() {
  sudo_login 2
  printf "Removing Bat %s...\n" "$(bat_version)"
  sudo dpkg --remove bat
  [[ -L "$HOME/.config/bat/config" ]] && unlink "$HOME/.config/bat/config"
  find "$HOME/.config/" -type d -name bat -exec rm -rf {} \;
  printf "Bat and its configuration files have been removed.\n"
}

bat_config() {
  local repository
  repository=$(assign_cfg_repo)
	[[ -d "$HOME/.config/bat" ]] || mkdir -p "$HOME/.config/bat"
  printf "Applying Bat configuration...\n"
	[[ -f "$HOME/.config/bat/config" ]] && rm "$HOME/.config/bat/config"
	ln -s "$repository/bat/config" "$HOME/.config/bat/config"
	[[ -L "$HOME/.local/bin/bat" ]] && unlink "$HOME/.local/bin/bat"
  printf "Configuration applied to Bat %s.\n" "$(bat_version)"
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":hiru"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
        help 0
        ;;
      i )
        if exists bat; then
          printf "Bat %s is already installed.\n" "$(bat_version)" >&2
        else
          check_dependencies
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
          tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
          trap cleanup EXIT
          new_ver="$(newest_version)"
          [[ "$new_ver" ]] || die "No download available. Try again later." 1
          printf "%sInstalling Bat version %s...%s\n" "$lightyellow" "$new_ver" "$normal"
          install_bat
          bat_config
        fi
        ;;
      r )
        if exist bat; then
          remove_bat
        else
          printf "Bat is not installed.\n" >&2
        fi
        ;;
      u )
        if exists bat; then
          check_dependencies
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
          tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
          trap cleanup EXIT
          new_ver="$(newest_version)"
          [[ "$new_ver" ]] || die "No download available. Try again later." 1
          compare_versions
        else
          printf "Bat is not installed.\n" >&2
        fi
        ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
  exit
}

## Execution ##

main "$@"
