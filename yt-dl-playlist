#!/usr/bin/env bash
##########################################################################
# Script Name  : yt-dl-playlist
# Description  : Download a playlist of YouTube audio files to current directory
# Dependencies : yt-dlp
# Arguments    : Video URL
# Author       : Copyright Â© 2020, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 28 May 2020
# Updated      : 21 Jul 2025
# Comments     : Accepts only full URL
#              : Downloads to current working directory
#              : Video Playlist
#              : yt-dlp -i -f mp4 --output "%(title)s.%(ext)s" --yes-playlist "$url"
# TODO (Rick)  : Hangs after first file in playlist is downloaded.
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="3.0.25202"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="21 Jul 2025"
  cat << _HELP_
${orange}$script${normal} $version, Updated: $updated
Downloads mp3 audio from a playlist of YouTube videos to current working directory.

${green}Usage:${normal} $script [OPTION] [video-url]

${orange}Available options:${normal}
  -h | --help  Show this help text.
_HELP_
  exit "$errcode"
}

check_dependencies() {
  if [ -x /usr/local/bin/yt-dlp ]; then
    printf "yt-dlp [OK]\n"
    sleep 2
    printf '\e[A\e[K'
    check_package ffmpeg
  else
    die "yt-dlp is not installed." 1
  fi
}

download_playlist() {
  local playlist_url
  box "YouTube Audio Playlist Download" "*"
  printf "\nDownloading mp3 audio for %s\n" "$playlist_url"
  # if /usr/local/bin/yt-dlp --add-metadata -xic --embed-thumbnail --restrict-filename --audio-format mp3 --output "%(title)s.%(ext)s"  --yes-playlist "$url"
  if /usr/local/bin/yt-dlp --ignore-errors --format bestaudio --extract-audio --restrict-filename --audio-format mp3 --audio-quality 160K --output "%(title)s.%(ext)s" --yes-playlist "$playlist_url"
  then
    printf "Download successful\n"
  else
    printf "Download failed\n"
  fi
}

main() {
  local url
  check_dependencies
  if [[ "$#" -eq 0 ]]; then
    printf "%s No argument passed \n" "$RED_ERROR" >&2
    help 2
  elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help 0
  elif [[ "$1" =~ ^https?:\/\/.* ]]; then
    url="$*"
  else
    printf "%s Invalid argument. Must be full URL.\n" "$RED_ERROR" >&2
    help 1
  fi
  download_playlist "$url"
  over_line "$script v$version" "-"
  exit
}

## Execution ##

main "$@"
