#!/usr/bin/env bash
###############################################################################
# Script Name  : install-atom-deb
# Description  : Installs Atom Editor from deb package
# Dependencies : wget, sshfs
# Arguments    : none
# Author       : Richard B. Romig, 14 July 2019
# Email        : rick.romig@gmail.com
# Comments     : This method does not support automatic updates
# Ubuntu dependencies: git libasound2 libcurl4 libgbm1 libgcrypt20 libgtk-3-0
# libnotify4 libnss3 libglib2.0-bin xdg-utils libx11-xcb1 libxcb-dri3-0 libxss1
# libxtst6 libxkbfile1
# TODO (rick)  : Prepare for GitHub sundown of Atom on 15 Dec 2022.
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034,SC2088

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

readonly _script=$(basename "$0")
readonly _version="1.4.2"
readonly _updated="22 Sep 2022"
readonly atom_cfg_dir=$HOME"/.local/share/atom"
readonly atom_dir=$HOME"/.atom/"
readonly config_dir="$HOME/.config/Atom"

## Functions ##

atom_ver() {
  atom --version | awk '/Atom/ {print $NF}'
}

install_atom() {
	cp "$pkg_src/atom-amd64.deb" "$tmp_dir/"
  sudo gdebi -n "$tmp_dir/atom-amd64.deb"
  # Install dependencies if they are missing
  sudo apt install libasound2 libcurl4 libgbm1 libgcrypt20 libgtk-3-0 libnotify4 libnss3 libglib2.0-bin xdg-utils libx11-xcb1 libxcb-dri3-0 libxss1 libxtst6 libxkbfile1
  sudo apt install -f
  cascadia_code
  atom_config
	atom_styles
  leave "Atom Editor v$(atom_ver) installed from .deb package"
}

remove_atom() {
  sudo apt-get remove --purge atom -yy
	[[ -d "$atom_cfg_dir" ]] && rm -rf "$atom_cfg_dir"
  [[ -d "$atom_dir" ]] && rm -rf "$atom_dir"
  [[ -d "$config_dir" ]] && rm -rf "$config_dir"
  leave "Atom editor and configuration files removed."
}

cascadia_code() {
  if [[ ! -d "$/usr/share/fonts/truetype/cascadia-code" ]]; then
    echo "Installing Cascadia-Code fonts."
    sudo apt upgrade -yyq
    sudo apt-get install fonts-cascadia-code -yyq
    echo "Cascadia-Code fonts installed."
  fi
}

atom_config() {
  [[ -d "$atom_cfg_dir" ]] || mkdir -p "$atom_cfg_dir"
	cat << EOF > "$atom_cfg_dir/config.cson"
"*":
	core:
		autoHideMenuBar: true
		packagesWithSnippetsDisabled: []
		projectHome: "/home/rick/Projects/"
		telemetryConsent: "limited"
		themes: [
			"atom-dark-ui"
			"base16-tomorrow-dark-theme"
		]
	editor:
		fontFamily: " 'Cascadia Code', Menlo, Consolas, DejaVu Sans Mono, monospace"
		fontSize: 17
		scrollPastEnd: true
		showIndentGuide: true
		softTabs: true
		softWrap: true
		tabType: "soft"
	"markdown-preview":
		useGitHubStyle: true
	"tree-view":
		hideVcsIgnoredFiles: true
	welcome:
		showOnStartup: false
EOF
	echo "Atom config.cson created."
}

atom_styles() {
  [[ -d "$atom_cfg_dir" ]] || mkdir -p "$atom_cfg_dir"
  cat << EOF > "$atom_cfg_dir/styles.less"
  /*
   * Your Stylesheet
   *
   * This stylesheet is loaded when Atom starts up and is reloaded automatically
   * when it is changed and saved.
   *
   * Add your own CSS or Less to fully customize Atom.
   * If you are unfamiliar with Less, you can read more about it here:
   * http://lesscss.org
   */


  /*
   * Examples
   * (To see them, uncomment and save)
   */

  // style the background color of the tree view
  .tree-view {
    // background-color: whitesmoke;
  }

  // style the background and foreground colors on the atom-text-editor-element itself
  atom-text-editor {
    // color: white;
    // background-color: hsl(180, 24%, 12%);

    // Enaable Cascadia Code ligatures
    text-rendering: optimizeLegibility;

    &.editor .syntax--string.syntax--quoted,
    &.editor .syntax--string.syntax--regexp {
      -webkit-font-feature-settings: "liga" on, "calt" on;
    }
    &.editor .syntax--comment {
      font-style: italic;
    }
  }

  // style UI elements inside atom-text-editor
  atom-text-editor .cursor {
    // border-color: red;
  }
EOF
  printf "Atom styles.less created.\n"
}

check_dependencies() {
  check_package gdebi
  check_package git
  check_package sshfs
  check_package wget
}

## Execution ##

check_dependencies

# Check local IP address
ip_addr="$(local_ip)"
if [[ "$ip_addr" -eq "11" ]]; then
  cfg_src="/data/installation/configs"
	pkg_src="/data/installation/Packages"
else
  mount_server
  cfg_src="/mnt/HP-6005/installs/configs"
	pkg_src="/mnt/HP-6005/installs/Packages"
fi

tmp_dir=$(mktemp -d) || die "Failed to create temporary directory."
tmp_file=$(mktemp) || die "Failed to create temporary file."
trap unmount_server EXIT
[[ -d "$atom_cfg_dir" ]] || mkdir -p "$atom_cfg_dir"

clear
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Installs the Atom Editor from a .deb package.\n"

if exists atom; then
  printf "Atom Editor v%s is installed.\n" "$(atom_ver)"
else
  printf "Atom Editor is not installed.\n"
fi

cur_rel="$(newest_version)"
printf "The latest available version is %s\n\n" "$cur_rel"

printf "Options:\n"
PS3="Choice: "
select opt in "Install Atom Editor" "Remove Atom Editor" "Exit"; do
  case $REPLY in
    1 ) user_in_sudo; install_atom; break ;;
    2 ) user_in_sudo; remove_atom; break ;;
    3 ) leave "Exiting the script. No action taken."; break ;;
    * ) echo "${lightred}Invalid selection.${normal} Try again." ;;
  esac
done
