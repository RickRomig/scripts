#!/usr/bin/env bash
###############################################################################
# Script Name  : install-atom-deb
# Description  : Installs Atom Editor from deb package located on local server.
# Dependencies : gdebi, git, wget, sshfs
# Arguments    : See help functions for options.
# Author       : Copyright (C) 2019 Richard B. Romig, 14 July 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : This method does not support automatic updates
#              : Version 1.63.0 is the final version of Atom (Sundown 15 Dec 2022)
# Ubuntu dependencies for atom: git libasound2 libcurl4 libgbm1 libgcrypt20
# libgtk-3-0 libnotify4 libnss3 libglib2.0-bin xdg-utils libx11-xcb1 libxcb-dri3-0
# libxss1 libxtst6 libxkbfile1
# TODO (rick)  : 
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

readonly _script=$(basename "$0")
readonly _version="1.5.4"
readonly _updated="15 Dec 2022"
readonly atom_cfg_dir=$HOME"/.local/share/atom"
readonly atom_dir=$HOME"/.atom/"
readonly config_dir="$HOME/.config/Atom"

## Functions ##

atom_ver() {
  atom --version | awk '/Atom/ {print $NF}'
}

server_mount() {
    tmp_dir=$(mktemp -d) || die "Failed to create temporary directory."
    mount_server
    trap unmount_server EXIT
}

local_install() {
  local pkg_dir="/data/installation/Packages"
  local package="atom-amd64.deb"
  sudo gdebi -n "$pkg_dir/$package"
}

server_install() {
  local pkg_dir="$HOME/mnt/HP-6005/installs/Packages"
  local package="atom-amd64.deb"
  server_mount
  cp "$pkg_dir/$package" "$tmp_dir/"
  sudo gdebi -n "$tmp_dir/$package"
}

install_atom() {
  ip_addr="$(local_ip)"
  echo "Installing Atom Editor..."
  case "$ip_addr" in
    11 )
      local_install ;;
    * )
      server_install ;;
  esac
  # Install any missing dependencies
  sudo apt upgrade -yyq
  sudo apt install libasound2 libcurl4 libgbm1 libgcrypt20 libgtk-3-0 libnotify4 libnss3 libglib2.0-bin xdg-utils libx11-xcb1 libxcb-dri3-0 libxss1 libxtst6 libxkbfile1
  sudo apt install -f
  # Install fonts, configuration file, and styles file
  cascadia_code
  atom_config
	atom_styles
  echo "Atom Editor v$(atom_ver) installed from .deb package"
}

update_atom() {
  ip_addr="$(local_ip)"
  echo "Updating from Atom $(atom_ver) ..."
  case "$ip_addr" in
    11 )
      local_install ;;
    * )
      server_install ;;
  esac
  echo "Atom updated to version $(atom_ver)"
}

remove_atom() {
  local atom_list="/etc/apt/sources.list.d/atom.list"
  sudo apt-get remove --purge atom -yy
  [[ -f "$atom_list" ]] && rm "$atom_list"
	[[ -d "$atom_cfg_dir" ]] && rm -rf "$atom_cfg_dir"
  [[ -d "$atom_dir" ]] && rm -rf "$atom_dir"
  [[ -d "$config_dir" ]] && rm -rf "$config_dir"
  echo "Atom editor and configuration files removed."
}

cascadia_code() {
  local font_dir="/usr/share/fonts/truetype/cascadia-code"
  if [[ ! -d "$font_dir" ]]; then
    echo "Installing Cascadia-Code fonts."
    sudo apt-get install fonts-cascadia-code -yyq
    echo "Cascadia-Code fonts installed."
  fi
}

atom_config() {
  [[ -d "$atom_cfg_dir" ]] || mkdir -p "$atom_cfg_dir"
	cat << EOF > "$atom_cfg_dir/config.cson"
"*":
	core:
		autoHideMenuBar: true
		packagesWithSnippetsDisabled: []
		projectHome: "/home/rick/Projects/"
		telemetryConsent: "limited"
		themes: [
			"atom-dark-ui"
			"base16-tomorrow-dark-theme"
		]
	editor:
		fontFamily: " 'Cascadia Code', Menlo, Consolas, DejaVu Sans Mono, monospace"
		fontSize: 17
		scrollPastEnd: pkg_dir="/data/installation/Packages"true
		showIndentGuide: true
		softTabs: true
		softWrap: true
		tabType: "soft"
	"markdown-preview":
		useGitHubStyle: true
	"tree-view":
		hideVcsIgnoredFiles: true
	welcome:
		showOnStartup: false
EOF
	echo "Atom config.cson created."
}

atom_styles() {
  [[ -d "$atom_cfg_dir" ]] || mkdir -p "$atom_cfg_dir"
  cat << EOF > "$atom_cfg_dir/styles.less"
  /*
   * Your Stylesheet
   *
   * This stylesheet is loaded when Atom starts up and is reloaded automatically
   * when it is changed and saved.
   *
   * Add your own CSS or Less to fully customize Atom.
   * If you are unfamiliar with Less, you can read more about it here:
   * http://lesscss.org
   */


  /*
   * Examples
   * (To see them, uncomment and save)
   */

  // style the background color of the tree view
  .tree-view {
    // background-color: whitesmoke;
  }

  // style the background and foreground colors on the atom-text-editor-element itself
  atom-text-editor {
    // color: white;
    // background-color: hsl(180, 24%, 12%);

    // Enable Cascadia Code ligatures
    text-rendering: optimizeLegibility;

    &.editor .syntax--string.syntax--quoted,
    &.editor .syntax--string.syntax--regexp {
      -webkit-font-feature-settings: "liga" on, "calt" on;
    }
    &.editor .syntax--comment {
      font-style: italic;
    }
  }

  // style UI elements inside atom-text-editor
  atom-text-editor .cursor {
    // border-color: red;
  }
EOF
  printf "Atom styles.less created.\n"
}

check_dependencies() {
  check_package gdebi
  check_package git
  check_package sshfs
  check_package wget
}

help() {
	errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-h	Display help
	-i	Install Atom Editor version 1.63.0
	-r	Remove Atom Editor
	-s	Install configuration and style settings
	-u	Update Atom Editor to version 1.63.0
END_HELP
	printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
	exit "$errcode"
}

## Execution ##

check_dependencies

clear
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Installs the Atom Editor from a .deb package.\n"

if [[ "$#" -eq 0 ]]; then
  echo "${lightred}ERROR:${normal} No argument passed." >&2
  help 1
else
  optstr=":hirsu"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
				echo "Help for $_script:"
        help 0
        ;;
      i )
        exists atom && leave "Atom $(atom_ver) is already installed."
        install_atom
        ;;
      r )
        exists atom || leave "Atom is not installed."
        remove_atom
        ;;
      s )
        exists atom || leave "Atom is not installed."
        atom_config
        atom_styles
        ;;
      u )
        exists atom || leave "Atom is not installed."
        update_atom
        ;;
      ? )
        echo "${lightred}ERROR:${normal} Invalid option -${OPTARG}" >&2
        help 2
        ;;
    esac
  done
fi
