#!/usr/bin/env bash
##########################################################################
# Script Name  : mount-sshfs
# Description  : Mount or unmount an SSHFS share.
# Dependencies : sshfs
# Arguments    : None
# Author       : Copyright (C) 2020 Richard B. Romig, 18 May 2020
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Mount points are at ~/mnt/
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.3.4"
readonly _updated="09 Nov 2023"

## Functions ##

mount_share() {
  local ip_addr="$1"
  local share="$2"
  ping -c3 "$localnet.$ip_addr" > /dev/null 2>&1 || die "$share at $localnet.$ip_addr is not online."
  if [[ -d "$HOME/mnt/$share/" ]]; then
    mounted=$(mount | grep "$share")
    if [[ -z "$mounted" ]]; then
      if [[ "$share" == "NASD97167" ]]; then
        sshfs -o follow_symlinks rick@"$localnet.$ip_addr:" "$HOME/mnt/$share/"
      else
        sshfs -o follow_symlinks rick@"$localnet.$ip_addr:/home/rick" "$HOME/mnt/$share/"
      fi
      echo "$share home directory:"
      ls "$HOME/mnt/$share/"
      echo "$share at $localnet.$ip_addr has been mounted."
    else
      echo "$share at $localnet.$ip_addr is already mounted."
    fi
  else
    # Share does not exist, create it.
    mkdir -p "$HOME/mnt/$share"
    if [[ "$share" == "NASD97167" ]]; then
      sshfs -o follow_symlinks rick@"$localnet.$ip_addr:" "$HOME/mnt/$share/"
    else
      sshfs -o follow_symlinks rick@"$localnet.$ip_addr:/home/rick" "$HOME/mnt/$share/"
    fi
    echo "$share home directory:"
    ls "$HOME/mnt/$share/"
    echo "$share at $localnet.$ip_addr has been created and mounted."
  fi
}

unmount_share() {
  local share="$1"
  [[ -d "$HOME/mnt/$share/" ]] || die "No mountpoint created for $share."
  mounted=$(mount | grep "$share")
  if [[ -n "$mounted" ]]; then
    cd "$HOME" || cd_fail
    if fusermount -u "$HOME/mnt/$share/"; then
      echo "$share has been unmounted."
    else
      echo "$red_error $share has not been unmounted." >&2
      fail_msg
    fi
  else
    echo "$share is not mounted."
  fi
}

cd_fail() {
  echo "$red_error The cd shell builtin failed." >&2
  echo "The SSHFS share has not been unmounted." >&2
  fail_msg
}

fail_msg() {
  echo "Make sure you are not in the mountpoint and run the following command:" >&2
  echo -e "\t${orange}fusermount -u $HOME/mnt/$share/${normal}" >&2
  exit 1
}

## Execution ##

check_package sshfs

echo "$_script v$_version ($_updated)"
echo -e "Mount or unmount an SSHFS share.\n"
options=( "Mount Finance" "Unmount Finance" "Mount Gitea Server" "Unmount Gitea Server" "Mount EliteBook 850-G3" \
"Unmount EliteBook 850-G3" "Mount HP-6005" "Unmount HP-6005" "Mount Lenovo" "Unmount Lenovo"  "Mount NAS" "Unmount NAS" \
"Quit" )
COLUMNS=60
PS3="Choose an action: "
select opt in "${options[@]}"; do
  case $REPLY in
    1 ) mount_share 21 "HP-ProBook-6570b"; break ;;
    2 ) unmount_share "HP-ProBook-6570b"; break ;;
    3 ) mount_share 16 "Gitea-Server"; break ;;
    4 ) unmount_share "Gitea-Server"; break ;;
    5 ) mount_share 22 "EliteBook-850"; break ;;
    6 ) unmount_share "EliteBook-850"; break ;;
    7 ) mount_share 11 "HP-6005"; break ;;
    8 ) unmount_share "HP-6005"; break ;;
    9 ) mount_share 15 "Lenovo-M91p"; break ;;
    10 ) unmount_share "Lenovo-M91p"; break ;;
    11 ) mount_share 4 "NASD97167"; break ;;
    12 ) unmount_share "NASD97167"; break ;;
    13 ) echo "Exiting. No action taken."; break ;;
    * ) echo "${lightred}Invalid option.${normal} Choose 1-13." >&2
  esac
done
exit
