#!/usr/bin/env bash
##########################################################################
# Script Name  : mount-sshfs
# Description  : Mount or unmount a local SSHFS share.
# Dependencies : sshfs
# Arguments    : None
# Author       : Copyright (C) 2020 Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 18 May 2020
# Updated      : 22 Sep 2024
# Comments     : Mount points are at ~/mnt/
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="4.4.24266"
readonly _updated="22 Sep 2024"
readonly local_host="${HOSTNAME:-$(hostname)}"

## Functions ##

mount_share() {
	local octet share
	octet="$1"
  share="$2"
  ping -c3 "$localnet.$octet" > /dev/null 2>&1 || die "$share at $localnet.$octet is not online."
	[[ -d "$HOME/mnt/$share/" ]] || mkdir -p "$HOME/mnt/$share"
	printf "Mounting %s...\n" "$share"
	if [[ "$share" == "NASD97167" ]]; then
  	sshfs -o follow_symlinks rick@"$localnet.$octet:" "$HOME/mnt/$share/"
	else
		sshfs -o follow_symlinks rick@"$localnet.$octet:/home/rick" "$HOME/mnt/$share/"
	fi
	printf "Home directory at %s:\n" "$share"
	ls "$HOME/mnt/$share/"
	printf "%s at %s.%s has been mounted.\n" "$share" "$localnet" "$octet"
}

unmount_share() {
  local share="$1"
    cd "$HOME" || cd_fail
    if fusermount -u "$HOME/mnt/$share/"; then
      printf "%s has been unmounted.\n" "$share"
    else
      printf "%s %s has not been unmounted." >&2 "$red_error" "$share"
      fail_msg
    fi
}

mounted() {
	local share="$1"
	mount | grep -q "$share" && return "$TRUE" || return "$FALSE"
}

handle_mount() {
	local octet share
	octet="$1"
  share="$2"
  if mounted "$share"; then
		if default_yes "Unmount $share"; then
			unmount_share "$share"
		else
			printf "%s left mounted.\n" "$share"
		fi
	else
		mount_share "$octet" "$share"
	fi
}

cd_fail() {
  printf "%s The cd shell builtin failed.\n" "$red_error" >&2
  printf "The SSHFS share has not been unmounted.\n" >&2
  fail_msg
}

fail_msg() {
  printf "Make sure you are not in the mountpoint and run the following command:\n" >&2
  printf "\t%sfusermount -u \$HOME/mnt/%s/%s\n" "$orange" "$share" "$normal"  >&2
  exit 1
}

help() {
	local errcode="${1:-2}"
	cat << END_HELP
${orange}$_script${normal} $_version, Updated $_updated
Mounts/Unmounts an SSHFS share.

${green}Usage:${normal} $_script [OPTION]

${orange}Availabel options:${normal}
  -e  toggle mount/umount HP EliteBook 850 G3 (laptop)
  -f  toggle mount/umount HP ProBook 6570b (Finance)
  -g  toggle mount/umount HP Compaq Elite 8300 USDT (Gitea Server)
  -h  help
  -l  toggle mount/umount Lenovo M91p (VM and media)
  -m  toggle mount/umount HP 800 G2 (Main system)
  -n  toggle mount/umount QNAP NAS (network attached storage)
  -s  toggle mount/umount HP Compaq 6005 Pro SSF (file server)
END_HELP
	exit "$errcode"
}

## Execution ##

check_package sshfs

printf "Mount or unmount an SSHFS share.\n"

noOpt=1
optstr=":efghlmns"
while getopts "$optstr" opt
do
	case "$opt" in
		e )
			share_name="EliteBook-850"
			ip_address=22
			if [[ "$local_host" == "hp-850-g3" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		f )
			share_name="HP-ProBook-6570b"
			ip_address=21
			if [[ "$local_host" == "hp-probook-6570" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		g )
			share_name="Gitea-Server"
			ip_address=16
			if [[ "$local_host" == "hp-8300-usdt" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		h )
			help 0
		;;
		l )
			share_name="Lenovo-M91p"
			ip_address=15
			if [[ "$local_host" == "lenovo-m91p" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		m )
			share_name="HP-800-G2"
			ip_address=10
			if [[ "$local_host" == "hp-800g2-sff" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		n )
			share_name="NASD97167"
			ip_address=4
			if [[ "$local_host" == "NASD97167" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		s )
			share_name="HP-6005"
			ip_address=11
			if [[ "$local_host" == "hp-6005" ]]; then
				diehard "Cannot mount/unmount local system." "$_script v$_version"
			else
				handle_mount "$ip_address" "$share_name"
			fi
		;;
		?)
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
leave "$_script v$_version"
