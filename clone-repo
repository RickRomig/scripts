#!/usr/bin/env bash
##########################################################################
# Script Name  : clone-repo
# Description  : Clone a git repository from local Gitea server or GitHub
# Dependencies : git
# Arguments    : None
# Author       : Copyright (C) 2022, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 19 Oct 2022
# Updated      : 06 Aug 2025
# Comments     : clone_repo() is part of functionlib
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="4.0.25217"

## Functions ##

help() {
	local errcode="${1:-2}"
	local -r updated="06 Aug 2025"
	cat << _HELP_
${orange}$script${normal} $version, Upated: $updated
Clone a git repository from GitHub or the local Gitea server

${green}Usage:${normal} $script [-cfghilsw]
${orange}Available options:${normal}
  -c  Clone configs repository
  -f  Clone fnloc repository
  -g  Clone gitea server repository
  -h  Show this help message and exit
  -i  Clone i3wm-debian repository
  -l  Clone local homepage repository
  -s  Clone scripts repository
  -w  Clone fnloc-win repository
_HELP_
  exit "$errcode"
}

check_repo() {
  local -r git_repo="$1"
  local -r dl_dir="$HOME/Downloads"
  if [[ -d "$dl_dir/$git_repo" ]]; then
    if [[ $(find "$dl_dir/$git_repo" -type f) ]]; then
      printf "%s is not empty. Updating the directory...\n" "$dl_dir/$git_repo"
      pushd "$dl_dir/$git_repo" || die "pushd failed"
      git pull
      popd || die "popd failed"
    else
      clone_repo "$git_repo"
    fi
  else
    clone_repo "$git_repo"
  fi
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":cfghilsw"
  check_package git
  while getopts "$optstr" opt; do
    case "$opt" in
      c )
        check_repo "configs" ;;
      f )
        check_repo "fnloc" ;;
      g )
        check_repo "gitea-server" ;;
      h )
        help 0 ;;
      i )
        check_repo "i3wm-debian" ;;
      l )
        check_repo "homepage" ;;
      s )
        check_repo "scripts" ;;
      w )
        check_repo "fnloc-win" ;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
    esac
		noOpt=0
  done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
