#!/usr/bin/env bash
##########################################################################
# Script Name  : weather
# Description  : Displays local weather conditions in the terminal.
# Dependencies : curl, jq (JSON processor)
# Arguments    : location (optional)
# Author       : Copyright (C) 2021, Richard B. Romig, LudditeGeek@Mosfnet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 14 Jul 2021
# Updated      : 27 Jun 2024
# Comments     : Based on script by Kris Occhipinti https://filmsbykris.com
#              : 3-day forecast is ASCII text and does not scale.
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC2034 # for select loop (opt isn't used, uses $REPLY)

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="6.8.24179"
readonly _updated="27 Jun 2024"
location="${1:-Huber+Heights}"

## Functions ##

check_dependencies() {
  local packages=( curl jq )
  check_packages "${packages[@]}"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by a variable name or in a trap.
cleanup() {
  [[ -f "$tmp_file" ]] && rm "$tmp_file"
}

timeout_exit() {
  # local wx_loc; wx_loc="$(echo "$1" | sed 's/+/ /g')"
  local wx_loc; wx_loc="${1//[+_]/ }"
  printf "Current weather data for %s is not available.\n" "$wx_loc"
  printf "Try again later.\n\n"
}

show_help() {
  clear
  cat << END_HELP
${orange}$_script${normal} $_version, Upated: $_updated
Displays current weather and 3-day forecast for a location.

${green}Usage:${normal} $_script [location]

${orange}Available options:${normal}
  -h | --help  Display this help text.

${orange}Examples:${normal}
$_script  # Uses default location
$_script Cincinnati
$_script New+York
$_script "Los Angeles"

* Locations with spaces must have a '+' in place of the space or be enclosed in double quotes.
* A US state can be indicated with a comma after the city name.
  Kettering,OH or Kettering, OH
* If no location is passed, the default location will be used.
* 3-digit airport codes can be used as a location (LAX, ATL, DAY).
* Menu options include current conditions, 3-day forecast, change locations, and help.
* For help: $_script -h or $_script --help or Choice 4 in the menu.

END_HELP
}

current_wx() {
  local wx_loc url json
  local city state latitude longitude description temp_F temp_C feels_F feels_C humidity pressure wind_dir wind_spd precip uv_index sunrise sunset
  local tcolor fcolor ucolor uvwarn
  wx_loc="$1"
  url="http://wttr.in/$wx_loc?format=j1"
  json=$(curl -s "$url")
  echo "$json" | grep -q 'Unknown location' && { echo "Location data not available from http://wttr.in. Try again later."; return 1; }

  # Location data
  city=$(echo "$json"|jq -r ."nearest_area[0]|(.areaName[0].value)")
  state=$(echo "$json"|jq -r ."nearest_area[0]|(.region[0].value)")
  # country=$(echo "$json"|jq -r ."nearest_area[0]|(.country[0].value)")
  latitude=$(echo "$json"|jq -r ."nearest_area[0]|(.latitude)")
  longitude=$(echo "$json"|jq -r ."nearest_area[0]|(.longitude)")
  # latlong=$(echo "$json"|jq -r ."request[0]|(.query)")

  # Weather conditions
  description=$(echo "$json"|jq -r ."current_condition[0]|(.weatherDesc[0].value)")
  temp_F=$(echo "$json"|jq -r ."current_condition[0]|(.temp_F)")
  temp_C=$(echo "$json"|jq -r ."current_condition[0]|(.temp_C)")
  feels_F=$(echo "$json"|jq -r ."current_condition[0]|(.FeelsLikeF)")
  feels_C=$(echo "$json"|jq -r ."current_condition[0]|(.FeelsLikeC)")
  humidity=$(echo "$json"|jq -r ."current_condition[0]|.humidity")
  pressure=$(echo "$json"|jq -r ."current_condition[0]|.pressureInches")
  wind_dir=$(echo "$json"|jq -r ."current_condition[0]|.winddir16Point")
  wind_spd=$(echo "$json"|jq -r ."current_condition[0]|.windspeedMiles")
  precip=$(echo "$json"|jq -r ."current_condition[0]|.precipInches")
  uv_index=$(echo "$json"|jq -r ."current_condition[0]|.uvIndex")
  sunrise=$(echo "$json"|jq -r ."weather[0]|(.astronomy[0].sunrise)")
  sunset=$(echo "$json"|jq -r ."weather[0]|(.astronomy[0].sunset)")

  # Set colors
  tcolor=$(temp_color "$temp_F")
  fcolor=$(feels_color "$feels_F")
  ucolor=$(uv_color "$uv_index")
  uvwarn=$(uv_warning "$uv_index")

  # Display current conditions
  clear
  box "$_script v$_version"
  if [[ "$json" ]]; then
    printf "\n%sLocation:%s %s, %s\n" "$green" "$normal" "$city" "$state"
    printf "%sLat/Long:%s %s, %s\n\n" "$green" "$normal" "$latitude" "$longitude"
    printf "%sCurrent conditions:%s\n" "$green" "$normal"
    printf "%15s: %s\n" "Atomosphere" "$description"
    printf "%15s: %s%s\U2109 / %s\U2103 %s\n" "Temperature" "$tcolor" "$temp_F" "$temp_C" "$normal"
    printf "%15s: %s%s\U2109 / %s\U2103 %s\n" "Feels like" "$fcolor" "$feels_F" "$feels_C" "$normal"
    printf "%15s: %s%s - %s%s\n" "UV index" "$ucolor" "$uv_index" "$uvwarn" "$normal"
    printf "%15s: %s%%\n" "Humidity" "$humidity"
    printf "%15s: %s inches\n" "Barometer" "$pressure"
    printf "%15s: %s inches\n" "Precipitation" "$precip"
    printf "%15s: %s at %s mph\n" "Wind" "$wind_dir" "$wind_spd"
    printf "%15s: %s\n" "Sunrise" "$sunrise"
    printf "%15s: %s\n\n" "Sunset" "$sunset"
  else
    timeout_exit "$wx_loc"
  fi
}

temp_color() {
  # Set color for temperature
  local temp_F="$1"
  local tcolor
  if [[ "$temp_F" -ge 90 ]]; then
    tcolor=${red}
  elif [[ "$temp_F" -ge 75 ]]; then
    tcolor=${orange}
  elif [[ "$temp_F" -le 32 ]]; then
    tcolor=${blue}
  elif [[ "$temp_F" -le 50 ]]; then
    tcolor=${lightblue}
  else
    tcolor=${default} # Temperature is between 50 and 75 degrees Fahrenheit
  fi
  echo "$tcolor"
}

feels_color() {
  # Set color for heat index temperature
  local feels_F="$1"
  local fcolor
  if [[ "$feels_F" -ge 90 ]]; then
    fcolor=${red}
  elif [[ "$feels_F" -ge 75 ]]; then
    fcolor=${orange}
  elif [[ "$feels_F" -le 32 ]]; then
    fcolor=${blue}
  elif [[ "$feels_F" -le 50 ]]; then
    fcolor=${lightblue}
  else
    fcolor=${default} # Temperature is between 50 and 75 degrees Fahrenheit
  fi
  echo "$fcolor"
}

uv_color() {
  # Set color for UV index.
  local uv_index="$1"
  local ucolor
  if [[ "$uv_index" -ge 11 ]]; then
    ucolor=${red}
  elif [[ "$uv_index" -ge 8 ]]; then
    ucolor=${lightred}
  elif [[ "$uv_index" -ge 6 ]]; then
    ucolor=${orange}
  elif [[ "$uv_index" -ge 3 ]]; then
    ucolor=${lightyellow}
  else
    ucolor=${default}  # UV index is less than 3
  fi
  echo "$ucolor"
}

uv_warning() {
  # Set color for UV index.
  local uv_index="$1"
  local uvwarn
  if [[ "$uv_index" -ge 11 ]]; then
    uvwarn="Extreme Risk"
  elif [[ "$uv_index" -ge 8 ]]; then
    uvwarn="Very High Risk"
  elif [[ "$uv_index" -ge 6 ]]; then
    uvwarn="High Risk"
  elif [[ "$uv_index" -ge 3 ]]; then
     uvwarn="Moderate Risk"
  else
    uvwarn="Low Risk"  # UV index is less than 3
  fi
  echo "$uvwarn"
}

wx_forecast() {
  local url="http://wttr.in"
  local wx_loc="$1"
  tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
  trap cleanup EXIT
  clear
  box "$_script v$_version"
  printf "\n"
  if curl -so "$tmp_file" "$url/$wx_loc"; then
    sed '1 s/:.*//;/Follow/d' "$tmp_file"
  else
    timeout_exit "$wx_loc"
  fi
}

## Execution ##

if [[ "$#" -gt 0 ]]; then
  [[ "$1" == "-h" || "$1" == "--help" ]] && { show_help; exit; }
fi

check_dependencies

while true; do
  clear
  box "$_script v$_version"
  under_line "${location//[+_]/ }"
  COLUMNS="40"
  options=(
    "Current conditions"
    "3-day forecast"
    "Change location"
    "Usage/Help"
    "Quit"
  )
  PS3="Choice: "
  select opt in "${options[@]}"; do
    case $REPLY in
      1 )
        # current_wx "$(echo "$location" | sed 's/ /+/g')"
        current_wx "${location// /+}"
        anykey
        break
      ;;
      2 )
        # wx_forecast "$(echo "$location" | sed 's/ /+/g')"
        wx_forecast "${location// /+}"
        anykey
        break
      ;;
     3 )
        printf "\nChange location.\n"
        printf "Replace any spaces with + or _\n"
        printf "Just pressing ENTER will use location based on public IP.\n"
        read -rp "New location: " location
        break
      ;;
      4 )
        show_help
        anykey
        break
      ;;
      5 )
        printf "%sMOTD:%s " "$darkgray" "$normal"
        leave ""
      ;;
      * )
        printf "%s Invalid choice. Choose 1, 2, 3, 4, or 5\n" "$red_error" >&2
    esac
  done
done
