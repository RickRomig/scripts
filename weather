#!/bin/bash
##########################################################################
# Script Name  : weather
# Description  : Displays local weather conditions in the terminal.
# Dependencies : curl, jq (JSON processor)
# Arguments    : location (optional)
# Author       : Copyright (C) 2021, Richard B. Romig, 14 Jul 2021
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Based on script by Kris Occhipinti https://filmsbykris.com
#              : 3-day forecast is ASCII text and does not scale.
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.5.9"
readonly _updated="24 Mar 2023"

## Functions ##

check_dependencies() {
  local packages=( curl jq )
  check_packages "${packages[@]}"
}

cleanup() {
  [[ -f "$tmp_file" ]] && rm "$tmp_file"
}

show_help() {
  cat << END_HELP
${orange}Usage:${normal} $_script [location]
Example 1: $_script Cincinnati
Example 2: $_script New+York
Example 3: $_script "Los Angeles"
* Locations with spaces must have a '+' in place of the space
  or be enclosed in double quotes.
* If no location is passed, the default location will be used.
For help: $_script -h or $_script --help, or Choice 3 in the menu.
END_HELP
  anykey
}

current_wx() {
  local wx_loc="$1"
  local url="http://wttr.in/$wx_loc?format=j1"
  json=$(curl -s "$url")

  # Location data
  city=$(echo "$json"|jq -r ."nearest_area[0]|(.areaName[0].value)")
  state=$(echo "$json"|jq -r ."nearest_area[0]|(.region[0].value)")
  # country=$(echo "$json"|jq -r ."nearest_area[0]|(.country[0].value)")
  latitude=$(echo "$json"|jq -r ."nearest_area[0]|(.latitude)")
  longitude=$(echo "$json"|jq -r ."nearest_area[0]|(.longitude)")
  # latlong=$(echo "$json"|jq -r ."request[0]|(.query)")

  # Weather conditions
  description=$(echo "$json"|jq -r ."current_condition[0]|(.weatherDesc[0].value)")
  temp_F=$(echo "$json"|jq -r ."current_condition[0]|(.temp_F)")
  temp_C=$(echo "$json"|jq -r ."current_condition[0]|(.temp_C)")
  feels_F=$(echo "$json"|jq -r ."current_condition[0]|(.FeelsLikeF)")
  feels_C=$(echo "$json"|jq -r ."current_condition[0]|(.FeelsLikeC)")
  humidity=$(echo "$json"|jq -r ."current_condition[0]|.humidity")
  pressure=$(echo "$json"|jq -r ."current_condition[0]|.pressureInches")
  wind_dir=$(echo "$json"|jq -r ."current_condition[0]|.winddir16Point")
  wind_spd=$(echo "$json"|jq -r ."current_condition[0]|.windspeedMiles")
  precip=$(echo "$json"|jq -r ."current_condition[0]|.precipInches")
  uv_index=$(echo "$json"|jq -r ."current_condition[0]|.uvIndex")
  sunrise=$(echo "$json"|jq -r ."weather[0]|(.astronomy[0].sunrise)")
  sunset=$(echo "$json"|jq -r ."weather[0]|(.astronomy[0].sunset)")

  # Set colors
  tcolor="${default}"
  temp_color
  fcolor="${default}"
  feels_color
  ucolor="${default}"
  uv_warning
  uvwarn="Low Risk"
  uv_warning

  # Display current conditions
  clear
  box "$_script v$_version ($_updated)"
  if [[ -n "$json" ]]; then
    printf "\nLocation: %s, %s\n" "$city" "$state"
    printf "Coordinates: %s latitude %s longitude\n\n" "$latitude" "$longitude"
    printf "Current conditions:\n"
    printf "%15s: %s\n" "Atomosphere" "$description"
    printf "%15s: %s%s\U2109 (%s\U2103 )%s\n" "Temperature" "$tcolor" "$temp_F" "$temp_C" "$normal"
    printf "%15s: %s%s\U2109 (%s\U2103 )%s\n" "Feels like" "$fcolor" "$feels_F" "$feels_C" "$normal"
    printf "%15s: %s%s - %s%s\n" "UV index" "$ucolor" "$uv_index" "$uvwarn" "$normal"
    printf "%15s: %s%%\n" "Humidity" "$humidity"
    printf "%15s: %s inches\n" "Barometer" "$pressure"
    printf "%15s: %s inches\n" "Precipitation" "$precip"
    printf "%15s: %s at %s mph\n" "Wind" "$wind_dir" "$wind_spd"
    printf "%15s: %s\n" "Sunrise" "$sunrise"
    printf "%15s: %s\n\n" "Sunset" "$sunset"
  else
    printf "Current weather data for %s is not available.\n" "$wx_loc" | sed 's/+/ /g'
    printf "Try again later.\n\n"
    exit 1
  fi
  anykey
}

wx_forecast() {
  local url="http://wttr.in"
  local wx_loc="$1"
  clear
  box "$_script v$_version ($_updated)"
  printf "\n"
  # curl -s "$url/$wx_loc" | sed '1 s/:.*//;/Follow/d'
  if ! curl -so "$tmp_file" "$url/$wx_loc"; then
    printf "Weather forecast for %s is not available.\n\n" "$wx_loc" | sed 's/+/ /g'
    exit 1
  else 
    sed '1 s/:.*//;/Follow/d' "$tmp_file"
  fi
  
  anykey
}

temp_color() {
  # Set color for temperature
  if [[ "$temp_F" -ge 90 ]]; then
    tcolor=${red}
  elif [[ "$temp_F" -ge 75 ]]; then
    tcolor=${orange}
  elif [[ "$temp_F" -le 32 ]]; then
    tcolor=${lightpurple}
  elif [[ "$temp_F" -le 50 ]]; then
    tcolor=${blue}
  else
    tcolor=${default} # Temperature is between 50 and 75 degrees Fahrenheit
  fi
}

feels_color() {
  # Set color for heat index temperature
  if [[ "$feels_F" -ge 90 ]]; then
    fcolor=${red}
  elif [[ "$feels_F" -ge 75 ]]; then
    fcolor=${orange}
  elif [[ "$feels_F" -le 32 ]]; then
    fcolor=${lightpurple}
  elif [[ "$feels_F" -le 50 ]]; then
    fcolor=${blue}
  else
    fcolor=${default} # Temperature is between 50 and 75 degrees Fahrenheit
  fi
}

uv_color() {
  # Set color for UV index.
  if [[ "$uv_index" -ge 11 ]]; then
    ucolor=${red}
  elif [[ "$uv_index" -ge 8 ]]; then
    ucolor=${lightred}
  elif [[ "$uv_index" -ge 6 ]]; then
    ucolor=${orange}
  elif [[ "$uv_index" -ge 3 ]]; then
    ucolor=${lightyellow}
  else
    ucolor=${default}  # UV index is less than 3
  fi
}

uv_warning() {
  # Set color for UV index.
  if [[ "$uv_index" -ge 11 ]]; then
    uvwarn="Extreme Risk"
  elif [[ "$uv_index" -ge 8 ]]; then
    uvwarn="Very High Risk"
  elif [[ "$uv_index" -ge 6 ]]; then
    uvwarn="High Risk"
  elif [[ "$uv_index" -ge 3 ]]; then
     uvwarn="Moderate Risk"
  else
    uvwarn="Low Risk"  # UV index is less than 3
  fi
}

## Execution ##

tmp_file=$(mktemp -q) || dies "Failed to create temporary file." 1
trap cleanup EXIT

location="${1:-Dayton}"
if [[ "$1" == "-h" || "$1" == "--help" ]]; then show_help; exit; fi

check_dependencies
while true; do
  clear
  box "$_script v$_version ($_updated)"
  under_line "Location: $(echo "$location" | sed 's/+/ /g')"
  COLUMNS="40"
  PS3="Choice: "
  select opt in "Current conditions" "3-day forecast" "Usage/Help" "Quit"; do
    case $REPLY in
      1 ) current_wx "$(echo $location | sed 's/ /+/g')"; break ;;
      2 ) wx_forecast "$(echo $location | sed 's/ /+/g')"; break ;;
      3 ) show_help; break ;;
      4 ) clear; exit ;;
      * ) printf "%s Invalid choice. Choose 1, 2, 3, or 4\n" "$red_error" >&2
    esac
  done
done
