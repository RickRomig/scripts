#!/usr/bin/env bash
##########################################################################
# Script Name  : install-fnloc
# Description  : Installs fnloc/lloc - apps to count lines of code.
# Dependencies : none
# Arguments    : none
# Author       : Copyright (C) 2020, Richard B. Romig, 09 Feb 2021
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.1"
readonly _updated="14 Oct 2023"
readonly package="fnloc_2.3.1_amd64.deb"
readonly package_name="FnLoC"
readonly package_version="2.3.1"
readonly package_dir="$HOME/Downloads/fnloc"

## Functions ##

about_fnloc() {
  cat << EOF
FnLoC (Funtion Lines of Code) is a program that counts lines of code in C source
code files, breaking out functions and the number of lines of code with them. The
program will also count lines of code in associated header files. A wrapper script
is included. View the README file for detailed information.
EOF
}

help() {
  errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-a  About FnLoC
  -d  Download & install FnLoC .deb package
  -h	Display help
	-i	Clone FnLoC repo & install .deb package
	-r	Remove FnLoC
$_script $_version (Updated $_updated)	
END_HELP
  exit "$errcode"
}

clone_fnloc_repo() {
  local repo_path="fnloc.git"
  git clone "$Gitea_URL/$repo_path" "$package_dir"
}

dl_deb_pkg() {
  local repo_path="fnloc/raw/branch/main"
  [[ -d "$package_dir" ]] || mkdir -p "$package_dir"
  curl -so "$package_dir/$package" "$Gitea_URL/$repo_path/$package"
}

install_fnloc() {
  user_in_sudo
  dpkg -l | grep -qw fnloc && { printf "%s %s already installed." "$package_name" "$package_version"; exit; }
  sudo dpkg -i "$package_dir/$package"
  printf "%s %s installed.\n" "$package_name" "$package_version"
}

## Execution ##

printf "Installs %s %s\n" "$package_name" "$package_version"

noOpt=1
optstr=":adhir"
while getopts "$optstr" opt; do
  case "$opt" in
    a )
      about_fnloc
    ;;
    d )
      dl_deb_pkg
      install_fnloc
    ;;
    h )
      help 0
    ;;
    i )
      clone_fnloc_repo
      install_fnloc
    ;;
    r )
      user_in_sudo
      clone_fnloc_repo
      dpkg -l | grep -qw fnloc || { printf "%s is not installed." "$package_name"; exit; }
      sudo dpkg -r fnloc
      printf "%s %s removed.\n" "$package_name" "$package_version"
    ;;
    ? )
      printf "\e[91mERROR:\e[0m Invalid option -%s\n" "$OPTARG" >&2
      help 2
  esac
  noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "\e[91mERROR:\e[0m No argument passed.\n" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
exit
