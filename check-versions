#!/usr/bin/env bash
##########################################################################
# Script Name  : check-versions
# Description  : Checks GitHub for latest versions of select programs and
#              : displays latest versions with currently installed versions.
# Dependencies : curl
# Arguments    : none
# Author       : Copyright (C) 2021, Richard B. Romig, 24 Aug 2021
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Apps checked: atom, bat, ddgr, glow, marktext, micro, pulsar, vscodium
#              : Ignores Beta and Release Candidate versions in GitHub releases.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global variables ##

readonly red_error="${lightred}ERROR:${normal}"

## Functions ##

check_dependencies() {
	check_package curl
}

cleanup() {
	[[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

get_versions() {
  local github_url="https://github.com"
  local new_ver="Not found"
  local packages=( bat marktext micro vSCodium )

  printf "GitHub Packages\n"
  printf "%-15s%-16s%s\n" "Package" "Latest version" "Installed version"
  for package in "${packages[@]}"; do
    # Set URL of GitHub repoository and currently installed version of package.
    case "$package" in
      "bat" )
        local release_path="sharkdp/bat/releases"
        cur_ver=$(dpkg -l | awk '$2 == "bat" {print $3}' | sed 's/[+-].*//') ;;
      "micro" )
        local release_path="zyedidia/micro/releases"
        cur_ver=$(dpkg -l | awk '$2 == "micro" {print $3}' | sed 's/[+-].*//') ;;
      "marktext" )
        local release_path="marktext/marktext/releases"
        cur_ver=$(dpkg -l | awk '$2 == "marktext" {print $3}' | sed 's/[+-].*//') ;;
      "atom" )
        local release_path="atom/atom/releases"
        cur_ver=$(dpkg -l | awk '$2 == "atom" {print $3}' | sed 's/[+-].*//') ;;
		  "vSCodium" )
			  local release_path="VSCodium/vscodium/releases"
			  cur_ver=$(dpkg -l | awk '$2 == "codium" {print $3}' | sed 's/[+-].*//') ;;
      "pulsar" )
        local release_path="pulsar-edit/pulsar/releases"
			  cur_ver=$(dpkg -l | awk '$2 == "pulsar" {print $3}' | sed 's/[+-].*//') ;;
      * )
        printf "%s Invalid package name - %s\n" "$red_error" "${package,,}" >&2
    esac

    # Download package's GitHub release page to a temporary file.
    curl -s -o "$tmp_file" "$github_url/$release_path"
    # Extract newest version number, ignoring beta and release candidate releases.
    new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
    # Print capitalized package name
    printf "%s%-15s" "${darkgray}" "${package^}"
    # Print newest version
    if [[ -z "$new_ver" ]]; then
      printf "%s%-16s" "${red}" "No release"
    else
      printf "%s%-16s" "${gray}" "$new_ver"
    fi
    # Print current installed version.
    if [[ -z "$cur_ver" ]]; then
      printf "%s%s\n" "${gray}" "not installed"
    elif [[ "$new_ver" == "$cur_ver" ]]; then
      printf "%s%s\n" "${gray}" "$cur_ver"
    else
      printf "%s%s\n" "${orange}" "$cur_ver"  # new version available
    fi
  done
  printf "%s\n" "${normal}"
}

deb_versions() {
	local debpkgs=( bluefish geany git glow gnome-terminal lxterminal nano kitty terminator xfce4-terminal xterm )
  printf "Apt Pacakages\n"
	printf "%-15s%s\n" "Package" "Version"
	for debpkg in "${debpkgs[@]}"; do
		if exists "$debpkg"; then
		  printf "%s%-15s%s" "${darkgray}" "${debpkg^}" "${gray}"
			case "$debpkg" in
        bluefish )
          printf "%s\n" "$(bluefish --version | awk '/^Bluefish/ {print $NF}')" ;;
				geany )
					printf "%s\n" "$(geany --version | cut -d' ' -f2)" ;;
        git )
          printf "%s\n" "$(git --version | cut -d' ' -f3)" ;;
				glow )
					printf "%s\n" "$(glow --version | cut -d' ' -f3 | sed 's/^v//')" ;;
				nano )
					printf "%s\n" "$(nano --version | awk '/version/ {print $NF}')" ;;
        kitty )
          printf "%s\n" "$(kitty --version | cut -d' ' -f2)" ;;
        terminator )
          printf "%s\n" "$(dpkg -l | awk '$2 == "terminator" {print $3}' | sed 's/[+-].*//')" ;;
        gnome-terminal )
          printf "%s\n" "$(dpkg -l | awk '$2 == "gnome-terminal" {print $3}' | sed 's/[+-].*//')" ;;
        lxterminal )
          printf "%s\n" "$(dpkg -l | awk '$2 == "lxterminal" {print $3}' | sed 's/[+-].*//')" ;;
        xfce4-terminal )
          printf "%s\n" "$(dpkg -l | awk '$2 == "xfce4-terminal" {print $3}' | sed 's/[+-].*//')" ;;
        xterm )
          printf "%s\n" "$(dpkg -l | awk '$2 == "xterm" {print $3}' | sed 's/[+-].*//')" ;;
				* )
          printf "%s Invalid package name - %s\n" "$red_error" "${debpkg^}" >&2
			esac
		fi
	done
	printf "%s\n" "${normal}"
}

main() {
  local _script; _script=$(basename "$0")
  local _version="0.10.1"
  local _updated="07 Mar 2023"
  clear
  printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  printf "Newest & installed versions of select programs.\n\n"
  get_versions
  deb_versions
  leave ""
}

## Execution ##

check_dependencies
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
trap cleanup EXIT
main
