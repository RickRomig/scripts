#!/usr/bin/env bash
##########################################################################
# Script Name  : check-versions
# Description  : Checks GitHub for latest versions of select programs and
#              : displays latest versions with currently installed versions.
# Dependencies : curl
# Arguments    : none
# Author       : Richard B. Romig, 24 Aug 2021
# Email        : rick.romig@gmail.com
# Comments     : Apps checked: atom, bat, ddgr, glow, marktext, micro, pulsar, vscodium
#              : Ignores Beta and Release Candidate versions in GitHub releases.
# 24 Feb 2022  : Adjustment for package & new version >= 8 characters.
# 01 Mar 2022  : Fixed new_ver function to get 7th field of download URL.
# 10 Mar 2022  : Formatted output using printf width specifiers.
# 12 May 2022  : Added sed command to current version routine for micro.
# 16 May 2022  : Added sed command to current version routine for bat & glow.
# 20 Jun 2022  : Added Atom Editor to applications to check.
# 16 Jul 2022  : Added VSCodium Editor to applications to check.
# 17 Aug 2022  : Modified prntf width specifiers to allow longer version numbers.
# 28 Aug 2022  : Modified variables for GitHub releases URLs.
# 11 Sep 2022  : Added Cascadia-Code-fonts to applications to check.
# 12 Sep 2022  : Removed Cascadia-Code-Fonts and Stacer from applications to check.
# 13 Sep 2022  : Removed ddgr and glow from applications to check.
# 30 Sep 2022  : Moved script, version, update variables to main function.
# 08 Dec 2022  : Added Pulsar (Atem fork) to array and get_versions function.
# 08 Dec 2022  : Cleaned up printf statements. Prints "No release" if none available.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Functions ##

check_dependencies() {
	check_package curl
}

cleanup() {
	[[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

get_versions() {
  local package="$1"
  local github_url="https://github.com"

  # Set URL of GitHub repoository and currently installed version of package.
  case "$package" in
    "bat" )
      local release_path="sharkdp/bat/releases"
      cur_ver=$(dpkg -l | awk '$2 == "bat" {print $3}' | sed 's/[+-].*//') ;;
    "micro" )
      local release_path="zyedidia/micro/releases"
      cur_ver=$(dpkg -l | awk '$2 == "micro" {print $3}' | sed 's/[+-].*//') ;;
    "marktext" )
      local release_path="marktext/marktext/releases"
      cur_ver=$(dpkg -l | awk '$2 == "marktext" {print $3}' | sed 's/[+-].*//') ;;
    "atom" )
      local release_path="atom/atom/releases"
      cur_ver=$(dpkg -l | awk '$2 == "atom" {print $3}' | sed 's/[+-].*//') ;;
		"vSCodium" )
			local release_path="VSCodium/vscodium/releases"
			cur_ver=$(dpkg -l | awk '$2 == "codium" {print $3}' | sed 's/[+-].*//') ;;
    "pulsar" )
      local release_path="pulsar-edit/pulsar/releases"
			cur_ver=$(dpkg -l | awk '$2 == "pulsar" {print $3}' | sed 's/[+-].*//') ;;
   * )
      die "Invalid package name - ${package,,}." 2 ;;
  esac

# Download package's GitHub release page to a temporary file.
  curl -s -o "$tmp_file" "$github_url/$release_path"
  # Extract newest version number, ignoring beta and release candidate releases.
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
  # Print capitalized package name
  printf "%s%-15s" "${darkgray}" "${package^}"
  # Print newest version
  if [[ -z "$new_ver" ]]; then
    printf "%s%-16s" "${red}" "No release"
  else
    printf "%s%-16s" "${gray}" "$new_ver"
  fi
  # Print current (installed) version.
  if [[ -z "$cur_ver" ]]; then
    printf "%s%s%s\n" "${red}" "not installed" "${normal}"
  elif [[ "$new_ver" == "$cur_ver" ]]; then
    printf "%s%s%s\n" "${gray}" "$cur_ver" "${normal}"
  else
    printf "%s%s%s\n" "${orange}" "$cur_ver" "${normal}"  # new version available
  fi
}

main() {
  _script=$(basename "$0")
  local _version="0.7.0"
  local _updated="09 Dec 2022"
  local packages=( atom bat marktext micro pulsar vSCodium )
  clear
  printf "\U1F427 %s v%s (%s)\n" "$_script" "$_version" "$_updated"
  printf "Newest & installed versions of select programs.\n\n"
  printf "%s%-15s%-16s%s%s\n"  "${underline}" "Program" "Latest version" "Installed version" "${normal}"
  for pkg in "${packages[@]}"; do get_versions "$pkg"; done
  printf "\n"
  leave ""
}

## Execution ##

check_dependencies
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
trap cleanup EXIT
main
