#!/usr/bin/env bash
##########################################################################
# Script Name  : install-codium
# Description  : installs vscodium from a repo using apt-get
# Dependencies : git wget
# Arguments    : see help function for options
# Author       : Copyright Â© 2023 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 04 Aug 2023
# Updated      : 15 Nov 2024
# Comments     : Alternative to downloading directly from GitHub repo.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="2.1.24320"
readonly key_file="/usr/share/keyrings/vscodium-archive-keyring.asc"
readonly src_list="/etc/apt/sources.list.d/vscodium.list"
verbose_mode="$FALSE"

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="25 Oct 2024"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Install/Removes VSCodium & applies settings

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -a  Set apt gpg key and source list
  -h  Display help
  -i  Install VSCodium via apt
  -r  Remove VSCodium
  -s  Apply VSCodium settings
  -v  Enable verbose mode
_HELP_
  exit "$errcode"
}

check_dependencies() {
	local packages=( git wget )
	check_packages "${packages[@]}"
}

assign_repo() {
	local localip repo
	localip=$(local_ip)
	case "$localip" in
		10|16|22 )
			repo="$HOME/gitea/configs"
		;;
		* )
			if [[ -d "$HOME/Downloads/configs" ]]; then
				pushd "$HOME/Downloads/configs" || die "pushd failed"
				git pull --quiet origin main
				popd || die "popd failed"
			else
				git clone --quiet "$GITEA_URL/configs.git" "$HOME/Downloads/configs"
			fi
			repo="$HOME/Downloads/configs"
	esac
	printf "%s" "$repo"
}

codium_version() {
	# codium --version | head -n 1
	dpkg -l codium | awk '/ii/ {print $3}'
}

apply_settings() {
	local repository cfg_dir json_file
	repository="$1"
  cfg_dir="${HOME}/.config/VSCodium/User"
  json_file="settings.json"
  [[ -d "$cfg_dir" ]] || mkdir -p "$cfg_dir"
  show_message "Applying VSCodium settings..."
	show_message "Copying $json_file from $repository..."
	cp -v "$repository/VSCodium/User/$json_file" "$cfg_dir"
  show_message "VSCodium settings applied."
}

set_key() {
	local key_url="https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg"
	wget "$key_url"
	show_message "Setting the GPG key..."
	sudo mv pub.gpg "$key_file"
}

set_src() {
	local src_url="https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main"
	show_message "Creating the source list file..."
	echo "deb [ signed-by=$key_file ] $src_url" | sudo tee "$src_list" > /dev/null
}

install_vscodium() {
	show_message "Installing VSCodium..."
	set_key
	set_src
	sudo apt-get update
	sudo apt-get install codium
	printf "VSCodium %s successfully installed.\n" "$(codium_version)"
}

remove_vscodium() {
	local cfg_dir cfg_bu_dir
	cfg_dir="${HOME}/.config/VSCodium"
	cfg_bu_dir="${HOME}/.config/backup/VSCodium"
	show_message "Removing VSCodium..."
	sudo apt-get purge codium
	show_message "Removing VSCodium GPG key ..."
	[[ -f "$key_file" ]] && sudo rm -v "$key_file"
	show_message "Removing VSCodium source list ..."
	[[ -f "$src_list" ]] && sudo rm -v "$src_list"
	show_message "Removing VSCodium configuration files ..."
  [[ -d "$cfg_dir" ]] && rm -rf "$cfg_dir"
	show_message "Removing VSCodium configuration backup ..."
  [[ -d "$cfg_bu_dir" ]] && rm -rf "$cfg_bu_dir"
	printf "VSCodium has been removed.\n"
}

show_message() {
  local message="$1"
  [[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

show_title() {
	box "$script v$version"
	printf "Installs/removes VSCodium\n"
}

main() {
	check_dependencies
  local noOpt opt optstr repository
	repository=$(assign_repo)
	noOpt=1
	optstr=":ahirsv"
	while getopts "$optstr" opt; do
		case "$opt" in
			a)
				exists codium || leave "VSCodium is not installed."
				show_title
				sudo_login 2
				show_message "Checking dependencies..."
				show_message "Setting the GPG key and creating the source list file."
				set_key
				set_src
			;;
			h )
				help 0
			;;
			i )
				exists codium && leave "VSCodium $(codium_version) is already installed."
				show_title
				sudo_login 2
				show_message "Checking dependencies..."
				install_vscodium
				apply_settings "$repository"

			;;
			r )
				exists codium || leave "VSCodium is not installed."
				show_title
				sudo_login 2
				remove_vscodium
			;;
			s )
				exists codium || leave "VSCodium is not installed."
				show_title
				sudo_login 2
				show_message "Checking dependencies..."
				apply_settings "$repository"

			;;
			v )
				verbose_mode="$TRUE"
				show_message "Verbose mode enabled."
			;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	exit
}

## Execution ##

main "$@"