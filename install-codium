#!/usr/bin/env bash
##########################################################################
# Script Name  : install-codium
# Description  : installs vscodium from a repo using apt-get
# Dependencies : git wget
# Arguments    : see help function for options
# Author       : Copyright Â© 2023 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 04 Aug 2023
# Updated      : 04 Oct 2025
# Comments     : Alternative to downloading directly from GitHub repo.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="2.10.25277"
readonly key_file="/usr/share/keyrings/vscodium-archive-keyring.asc"
readonly src_list="/etc/apt/sources.list.d/vscodium.list"
verbose_mode="$FALSE"

## Functions ##

help() {
	local errcode="${1:-2}"
	local updated="04 Oct 2025"
	cat << _HELP_
${orange}$script${normal} $version, updated: ($updated)
Install/Remove VSCodium and apply settings

${green}Usage:${normal} $script [-h] [-va] [-vi] [-vr] [-vs]

${orange}Available options:${normal}
  -a  Set apt gpg key and source list.
  -h  Show this help message and exit.
  -i  Install VSCodium via apt.
  -r  Remove VSCodium.
  -s  Apply VSCodium settings.
  -v  Enable verbose mode. If used, must precede other flags.
_HELP_
  exit "$errcode"
}

# check_dependencies() {
# 	local packages=( git wget )
# 	check_packages "${packages[@]}"
# }

codium_version() {
	# codium --version | head -n 1
	dpkg -l codium | awk '/ii/ {print $3}'
}

set_gpg_key() {
	local -r key_url="https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg"
	wget "$key_url"
	show_message "Setting the GPG key..."
	sudo mv pub.gpg "$key_file"
}

set_src_list() {
	local -r src_url="https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main"
	show_message "Creating the source list file..."
	echo "deb [ signed-by=$key_file arch=amd64 ] $src_url" | sudo tee "$src_list" > /dev/null
}

install_vscodium() {
	show_message "Installing VSCodium..."
	set_gpg_key
	set_src_list
	sudo apt-get update
	sudo apt-get install codium
	apply_settings
	printf "VSCodium %s successfully installed.\n" "$(codium_version)"
}

apply_settings() {
	[[ -d ~/.config/VSCodium/User/ ]] || mkdir -p ~/.config/VSCodium/User/
  show_message "Applying VSCodium settings..."
	[[ -f ~/.config/VSCodium/User/settings.json ]] && rm ~/.config/VSCodium/User/settings.json
	ln -sv ~/Downloads/configs/VSCodium/User/settings.json ~/.config/VSCodium/User/settings.json
  show_message "VSCodium settings applied."
}

remove_vscodium() {
	show_message "Removing VSCodium..."
	sudo apt-get purge codium
	show_message "Removing VSCodium GPG key ..."
	[[ -f "$key_file" ]] && sudo rm -v "$key_file"
	show_message "Removing VSCodium source list ..."
	[[ -f "$src_list" ]] && sudo rm -v "$src_list"
	show_message "Removing VSCodium configuration files ..."
	[[ -L ~/.config/VSCodium/User//settings.json ]] && unlink ~/.config/VSCodium/User/settings.json
	find ~/.config -maxdepth 2 -type d -name VSCodium -exec rm -rf {} \;
	printf "VSCodium has been removed.\n"
}

show_message() {
  local message="$1"
  [[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

main() {
	# check_dependencies
  local noOpt opt optstr
	noOpt=1
	optstr=":ahirsv"
	while getopts "$optstr" opt; do
		case "$opt" in
			a)
				# Set apt gpg key and source list
				if exists codium; then
					sudo_login 2
					set_gpg_key
					set_src_list
				else
					printf "VSCodium is not installed.\n" >&2
				fi
				;;
			h )
				help 0
				;;
			i )
				# Install VSCodium via apt
				if exists codium; then
					printf "VSCodium %s is already installed.\n" "$(codium_version)"
				else
					sudo_login 2
					install_vscodium
				fi
				;;
			r )
				# Remove VSCodium
				if exists codium; then
					sudo_login 2
					remove_vscodium
				else
					printf "VSCodium is not installed.\n" >&2
				fi
				;;
			s )
				# Apply VSCodium settings
				if exists codium; then
					apply_settings
				else
					printf "VSCodium is not installed.\n" >&2
				fi
				;;
			v )
				verbose_mode="$TRUE"
				show_message "Verbose mode enabled."
				;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"