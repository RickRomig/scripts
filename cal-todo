#!/usr/bin/env bash
###############################################################################
# Script Name  : cal-todo
# Description  : Display calendar and ToDo list side by side.
# Dependencies : micro or nano
# Arguments    : see help() function for available options
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Created      : 28 Dec 2022
# Updated      : 13 Oct 2024
# Comments     : base script Copyright (C) 2022 Kris Occhipinti https://filmsbykris.com
#              : Limit to-do list to 7 items to maintain proper formating.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="3.1.24287"
readonly doc_dir="$HOME/.local/share/doc"
readonly todolist="todo.lst"
calendar=$(mktemp -q) || die "Failed to create temporary file." 1

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$calendar" ]] && rm -f "$calendar"
}

help() {
	local errcode updated
	errcode="${1:-2}"
	updated="13 Oct 2024"
	cat << END_HELP
${orange}$script${normal} $version, Updated: $updated
Creates/displays/edits a simple to-do list with a calendar.

${green}Usage:${normal} $script [OPTION]

Usage: $script [OPTION]

${orange}Available options:${normal}
	-c  display current month calendar and to-do list.
	-d  display 3 month calendar and to-do list.
	-e  edit/create to-do list.
	-h  display help
	NOTE: To-do list should be limited to 7 short items to maintain format.
END_HELP
	exit "$errcode"
}

edit_todo() {
	if exists micro; then
		/usr/bin/micro "$doc_dir/$todolist"
	else
		/usr/bin/nano "$doc_dir/$todolist"
	fi
}

create_todo() {
	local templates="$HOME/bin/Templates"
	printf "Creating todo list...\n"
	[[ -d "$doc_dir" ]] || mkdir -p "$doc_dir"
	cp "$templates/$todolist" "$doc_dir/"
	edit_todo
}

main() {
	local noOpt optstr opt
	noOpt=1
	optstr=":cdeh"
	while getopts "$optstr" opt; do
		case "$opt" in
			c )
				[[ -f "$doc_dir/$todolist" ]] || create_todo
				cal > "$calendar"
				paste "$calendar" "$doc_dir/$todolist"
			;;
			d )
				[[ -f "$doc_dir/$todolist" ]] || create_todo
				cal -3 > "$calendar"
				paste "$calendar" "$doc_dir/$todolist"
			;;
			e )
				if [[ -f "$doc_dir/$todolist" ]]; then
					edit_todo
				else
					create_todo
				fi
			;;
			h )
				help 0
			;;
			? )
				printf "%s Invalid option: -%s\n" >&2 "$RED_ERROR" "$OPTARG"
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	leave "$script v$version"
}

## Execution ##

trap cleanup EXIT
main "$@"