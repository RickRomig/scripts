#!/usr/bin/env bash
###############################################################################
# Script Name  : cal-todo
# Description  : Example script to display command output and file side by side.
# Dependencies : none
# Arguments    : none
# Author       : Copyright (C) 2022, Richard B. Romig, Created: 28 Dec 2022
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Comments     : base script Copyright (C) 2022 Kris Occhipinti https://filmsbykris.com
#              : Limit to-do list to 7 items to maintain proper formating.
# TODO (Rick)  : 
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.2"
readonly _updated="04 Feb 2023"
readonly localdoc="$HOME/.local/share/doc"
readonly todolist="todo.lst"
readonly red_error="${lightred}ERROR:${normal}"
calendar=$(mktemp -q) || die "Failed to create temporary file." 1

## Functions ##

cleanup() {
	[[ -f "$calendar" ]] && rm -f "$calendar"
}

help() {
	local errcode="${1:-2}"
	cat << END_HELP
Usage: $_script [OPTION]
OPTIONS:
	-c  display current month calendar and to-do list.
	-d  display 3 month calendar and to-do list.
	-e  edit to-do list.
	-h  display help
	NOTE: To-do list should be limited to 7 short items.
END_HELP
	echo "$_script v$_version ($_updated)"
	exit "$errcode"	
}

edit_todo() {
	if exists micro; then
		/usr/bin/micro "$localdoc/$todolist"
	else
		/usr/bin/nano "$localdoc/$todolist"
	fi
}

create_todo() {
	local todo_list="$HOME/bin/Templates/todo.lst"
	[[ -d "$localdoc" ]] || mkdir -p "$localdoc"
	cp "$todo_list" "$localdoc"/
	edit_todo
}

display_cal_todo() {
	[[ -f "$localdoc/$todolist" ]] || create_todo
	paste "$calendar" "$localdoc/$todolist"
}

## Execution ##

trap cleanup EXIT

if [[ "$#" -eq 0 ]]; then
	printf "%s No argument passed.\n" >&2 "$red_error"
	help 1
else
	optstr=":cdeh"
	while getopts "$optstr" opt; do
		case "$opt" in
			c )
				cal > "$calendar"
				display_cal_todo
				break ;;
			d )
				cal -3 > "$calendar"
				display_cal_todo
				break ;;
			e )
				if [[ -f "$localdoc/$todolist" ]]; then
					edit_todo
				else
					create_todo
				fi
				break ;;
			h )
				help 0
				;;
			? )
				printf "%s Invalid option -%s\n" >&2 "$OPTARG" "$red_error"
				help 2
		esac
	done
fi
leave "$_script v$_version ($_updated)"
