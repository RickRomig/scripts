#!/usr/bin/env bash
##########################################################################
# Script Name  : cronscripts
# Description  : Copies cron scripts to the appropriate directories.
# Dependencies : None
# Arguments    : See help function for list of arguments.
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 17 Feb 2022
# Updated      : 15 Jun 2025
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="5.23.25166"
localip="$(local_ip)"; readonly localip
# path variables
readonly script_path="$HOME/bin"
readonly user_cron_path="$HOME/.local/bin/"
readonly opt_cron_path="/opt/bin/"
readonly sed_path="/usr/share/misc/"

## Functions ##

cp_repo_backup() {
  case "$localip" in
    10|16 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$script_path/git-dwm.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$script_path/git-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$script_path/github-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "Repository archives are"
  esac
}

cp_main_bu() {
  case "$localip" in
  10 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$script_path/sync-nas.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$script_path/sync6005.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$script_path/journal-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$script_path/passwdsync.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv $"$script_path/repo-backup.sh" "$user_cron_path" | awk '{print "==> "$NF}'
  ;;
    * )
      no_copy "Main system sync scripts are"
  esac
}

cp_finance_bu() {
  case "$localip" in
    10 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$script_path/fin-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$script_path/hb-archive.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "Finance archives are"
  esac
}

cpscriptarchive() {
  case "$localip" in
    10|11|12|13|14|15|16|19|20|23 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$script_path/scriptarchive.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "scriptarchive.sh is"
  esac
}

cp_empty_trash() {
  case "$localip" in
    10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$script_path/empty-trash.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "empty-trash.sh is"
  esac
}

cp_redshift_notify() {
  case "$localip" in
    11|12|13|14|15|16|17|18|19|20|21|22|23|24|25 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$script_path/redshift-notify.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "redshift-notify.sh is"
  esac
}

cp_zbackup() {
	case "$localip" in
		11 )
		  [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
		  sudo cp -uv "$script_path/z-backup" "$opt_cron_path" | awk '{print "==> "$NF}'
    ;;
		* )
			no_copy "z-backup is"
	esac
}

cp_zdefrag() {
  local anacron_path="/etc/cron.monthly/"
  case "$localip" in
    10|12|13|15|20|23 )
      sudo cp -uv "$script_path/z-defrag" "$anacron_path" | awk '{print "==> "$NF}'
    ;;
    11|14|16|19 )
      [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
      sudo cp -uv "$script_path/z-defrag" "$opt_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "z-defrag is"
  esac
}

cp_zupdate() {
  local sed_file anacron_path
  sed_file="files/updatelog.sed"
  anacron_path="/etc/cron.weekly/"
  case "$localip" in
    10|12|13|15|17|20|21|22|23|24|25|227 )
      sudo cp -uv "$script_path/z-update" "$anacron_path" | awk '{print "==> "$NF}'
      sudo cp -uv "$script_path/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
    ;;
    11|14|16|19 )
      [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
      sudo cp -uv "$script_path/z-update" "$opt_cron_path" | awk '{print "==> "$NF}'
      sudo cp -uv "$script_path/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "z-update is"
  esac
}

cp_zytdlpupdate() {
  local sed_file anacron_path
	sed_file="files/ytdlp-uplog.sed"
  anacron_path="/etc/cron.daily/"
  case "$localip" in
    10|15|17 )
      sudo cp -uv "$script_path/z-ytdlp-update" "$anacron_path" | awk '{print "==> "$NF}'
      sudo cp -uv "$script_path/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "z-ytdlp-update is"
  esac
}

no_copy() {
  local cron_script="$1"
  printf "%s not applicable to this system and was not copied.\n" "$cron_script"
}

help() {
  local errcode updated
  errcode="${1:-2}"
  updated="18 Apr 2025"
  cat << _HELP_
${orange}$script${normal} $version, Updated: $updated
Copies updated cron scripts to the appropriate directories.

${green}Usage:${normal} $script [OPTIONS]

${orange}Available options:${normal}
  -a    Copy all applicable scripts.
  -b    Copy local backup script.
  -d    Copy defrag script.
  -f    Copy Finance backup scripts.
  -h    Display Help.
  -m    Main PC backup
  -n    Redshift notificaion script.
  -r    Copy repository backup scripts.
  -s    Copy script archive script.
  -t    Copy empty trash script.
  -u    Copy system update script.
  -y    Copy yt-dlp update script.
  NOTE: Multiple arguments may be passed to the script.
_HELP_
  exit "$errcode"
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":abdfhmnrstuy"
  printf "Copying updated cron scripts...\n"
  while getopts "$optstr" opt; do
    case "$opt" in
      a )
        cp_finance_bu
        cp_repo_backup
        cpscriptarchive
        cp_empty_trash
        sudo_login 1
        cp_zupdate
        cp_zdefrag
        cp_zytdlpupdate
        cp_zbackup
      ;;
		  b )
        sudo_login 1
			  cp_zbackup
		  ;;
      d )
        sudo_login 1
        cp_zdefrag
      ;;
      f )
        cp_finance_bu
      ;;
      h )
        help 0
      ;;
      m )
        cp_main_bu
      ;;
      n )
        cp_redshift_notify
      ;;
      r )
        cp_repo_backup
      ;;
      s )
        cpscriptarchive
      ;;
      t )
        cp_empty_trash
      ;;
      u )
        sudo_login 1
        cp_zupdate
      ;;
      y )
        sudo_login 1
        cp_zytdlpupdate
      ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No arguments passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script v$version"
  exit
}

## Execution ##

main "$@"
