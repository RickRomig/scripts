#!/usr/bin/env bash
##########################################################################
# Script Name  : cronscripts
# Description  : Copies cron scripts to the appropriate directories.
# Dependencies : None
# Arguments    : See help function for list of arguments.
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 17 Feb 2022
# Updated      : 04 Oct 2025
# Comments     : For jobs needinng root access, checks if repo script is
#              : newer than the one run by anacron/cron
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="8.2.25277"
localip="$(local_ip)"; readonly localip
# path variables
script_dir=$(dirname "$(readlink -f "${0}")"); readonly script_dir
readonly job_dir="$script_dir/cronjobs"
readonly files_dir="$script_dir/files"
readonly user_cron_path="$HOME/.local/bin/"
readonly opt_cron_path="/opt/bin/"
readonly sed_path="/usr/share/misc/"

## Functions ##

help() {
  local errcode="${1:-2}"
  local updated="04 Oct 2025"
  cat << _HELP_
${orange}$script${normal} $version, Updated: $updated
Copies cronjob scripts to the appropriate directories.

${green}Usage:${normal} $script [-abdfghmrstuv]
${orange}Available options:${normal}
  -a    Copy all applicable scripts.
  -b    Copy local backup script.
  -c    Copy cloned repo update script.
  -d    Copy defrag script.
  -f    Copy Finance backup scripts.
  -g    Copy Git repository backup scripts.
  -h    Show this help message and exit.
  -m    Copy Main PC backup scripts.
  -r    Copy Redshift notification script.
  -s    Copy script archive script.
  -t    Copy empty trash script.
  -u    Copy system update script.
  -y    Copy yt-dlp update script.
  NOTE: Multiple arguments may be passed to the script.
_HELP_
  exit "$errcode"
}

is_older() {
  local cron_script="$1"
  local cron_path="$2"
  [[ "$cron_path/$cron_script" -ot "$job_dir/$cron_script" ]] && return "$TRUE" || return "$FALSE"
}

no_copy() {
  local message="$1"
  printf "%s not applicable to this system and was not copied.\n" "$message"
}

cp_repo_update() {
  case "$localip" in
    10|16|22 )
      no_copy "Cloned repository updates are" ;;
    * )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$job_dir/repo-update.sh" "$user_cron_path" | awk '{print "==> "$NF}'
  esac
}

cp_repo_backup() {
  case "$localip" in
    10|16 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$job_dir/git-dwm.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$job_dir/git-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      ;;
    * )
      no_copy "Repository archives are"
  esac
}

cp_main_bu() {
  case "$localip" in
  10 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$job_dir/sync-nas.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$job_dir/sync6005.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$job_dir/journal-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$job_dir/passwdsync.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv $"$job_dir/repo-backup.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      ;;
    * )
      no_copy "Main system sync scripts are"
  esac
}

cp_finance_bu() {
  case "$localip" in
    10 )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$job_dir/fin-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$job_dir/hb-archive.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      ;;
    * )
      no_copy "Finance archives are"
  esac
}

cp_scriptarchive() {
  case "$localip" in
    17|21|22|24 )
      no_copy "scriptarchive.sh is" ;;
    * )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$job_dir/scriptarchive.sh" "$user_cron_path" | awk '{print "==> "$NF}'
  esac
}

cp_empty_trash() {
  [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
  cp -puv "$job_dir/empty-trash.sh" "$user_cron_path" | awk '{print "==> "$NF}'
}

cp_redshift_notify() {
  case "$localip" in
    10|11|17|19|20|21 )
      no_copy "redshift-notify.sh is" ;;
    * )
      [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
      cp -puv "$job_dir/redshift-notify.sh" "$user_cron_path" | awk '{print "==> "$NF}'
  esac
}

cp_zbackup() {
	case "$localip" in
		11 )
		  [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
      [[ -f "$opt_cron_path/z-backup" ]] || sudo cp -v "$job_dir/z-backup" "$opt_cron_path" | awk '{print "==> "$NF}'
      is_older "z-backup" "$opt_cron_path" && sudo cp -v "$job_dir/z-backup" "$opt_cron_path" | awk '{print "==> "$NF}'
      ;;
		* )
			no_copy "z-backup is"
	esac
}

cp_zdefrag() {
  local -r anacron_path="/etc/cron.monthly/"
  case "$localip" in
    10|12|13|15|19|20|23 )
      [[ -f "$anacron_path/z-defrag" ]] || sudo cp -v "$job_dir/z-defrag" "$anacron_path" | awk '{print "==> "$NF}'
      is_older "z-defrag" "$anacron_path" && sudo cp -v "$job_dir/z-defrag" "$anacron_path" | awk '{print "==> "$NF}'
      ;;
    11|14|16 )
      [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
      [[ -f "$opt_cron_path/z-defrag" ]] || sudo cp -v "$job_dir/z-defrag" "$opt_cron_path" | awk '{print "==> "$NF}'
      is_older "z-defrag" "$opt_cron_path" && sudo cp -v "$job_dir/z-defrag" "$opt_cron_path" | awk '{print "==> "$NF}'
      ;;
    * )
      no_copy "z-defrag is"
  esac
}

cp_zupdate() {
  local -r sed_file="updatelog.sed"
  local -r anacron_path="/etc/cron.weekly/"
  case "$localip" in
    10|12|13|15|17|19|20|21|22|23|24|25 )
			[[ -f "$anacron_path/z-update" ]] || sudo cp -v "$job_dir/z-update" "$anacron_path" | awk '{print "==> "$NF}'
			is_older "z-update" "$anacron_path" && sudo cp -v "$job_dir/z-update" "$anacron_path" | awk '{print "==> "$NF}'
      ;;
    11|14|16 )
      [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
			[[ -f "$opt_cron_path/z-update" ]] || sudo cp -v "$job_dir/z-update" "$opt_cron_path" | awk '{print "==> "$NF}'
      is_older "z-update" "$opt_cron_path" && sudo cp -v "$job_dir/z-update" "$opt_cron_path" | awk '{print "==> "$NF}'
      ;;
  esac
  [[ -f "$sed_path/$sed_file" ]] || sudo cp -v "$files_dir/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
  [[ "$sed_path/$sed_file" -ot "$files_dir/$sed_file" ]] && sudo cp -v "$files_dir/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
}

cp_zytdlpupdate() {
	local -r sed_file="ytdlp-uplog.sed"
  local -r anacron_path="/etc/cron.daily/"
  case "$localip" in
    10|15|17 )
      [[ -f "$anacron_path/z-ytdlp-update" ]] || sudo cp -v "$job_dir/z-ytdlp-update" "$anacron_path" | awk '{print "==> "$NF}'
			is_older "z-ytdlp-update" "$anacron_path" && sudo cp -v "$job_dir/z-ytdlp-update" "$anacron_path" | awk '{print "==> "$NF}'
      [[ -f "$sed_path/$sed_file" ]] || sudo cp -v "$files_dir/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
      [[ "$sed_path/$sed_file" -ot "$files_dir/$sed_file" ]] && sudo cp -v "$files_dir/$sed_file" "$sed_path" | awk '{print "==> "$NF}'
      ;;
    * )
      no_copy "z-ytdlp-update is"
  esac
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":abcdfghmrstuy"
  printf "Copying updated cron scripts...\n"
  while getopts "$optstr" opt; do
    case "$opt" in
      a )
        cp_finance_bu
        cp_repo_backup
        cp_scriptarchive
        cp_empty_trash
        cp_repo_update
        cp_zupdate
        cp_zdefrag
        cp_zytdlpupdate
        cp_zbackup
        ;;
		  b )
			  cp_zbackup ;;
      c )
        cp_repo_update ;;
      d )
        cp_zdefrag ;;
      f )
        cp_finance_bu ;;
      g )
        cp_repo_backup ;;
      h )
        help 0 ;;
      m )
        cp_main_bu ;;
      r )
        cp_redshift_notify ;;
      s )
        cp_scriptarchive ;;
      t )
        cp_empty_trash ;;
      u )
        cp_zupdate ;;
      y )
        cp_zytdlpupdate ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No arguments passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
