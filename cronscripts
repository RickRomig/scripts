#!/usr/bin/env bash
##########################################################################
# Script Name  : cronscripts
# Description  : Copies cron scripts to the appropriate directories.
# Dependencies : None
# Arguments    : See help function for list of arguments.
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 17 Feb 2022
# Updated      : 25 May 2024
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="5.13.24146"
readonly _updated="25 May 2024"
readonly user_cron_path="$HOME/.local/bin/"
readonly opt_cron_path="/opt/bin/"
readonly sed_path="/usr/share/misc/"
localip="$(local_ip)"

## Functions ##

cp_repo_backup() {
  case "$localip" in
    10|16 )
      cp -puv "$HOME/bin/gitea-dwm-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$HOME/bin/gitea-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$HOME/bin/github-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "Repository archives are"
  esac
}

cp_main_bu() {
  case "$localip" in
  10 )
      cp -puv "$HOME/bin/sync-nas.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$HOME/bin/sync6005.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$HOME/bin/journal-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$HOME/bin/passwdsync.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv $"$HOME/bin/repo-backup.sh" "$user_cron_path" | awk '{print "==> "$NF}'
  ;;
    * )
      no_copy "Main system sync scripts are"
  esac
}

cp_finance_bu() {
  [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
  case "$localip" in
    21 )
      cp -puv "$HOME/bin/fin-bu.sh" "$user_cron_path" | awk '{print "==> "$NF}'
      cp -puv "$HOME/bin/hb-archive.sh" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "Finance archives are"
  esac
}

cp_scriptarchive() {
  local script_path="$HOME/bin/scriptarchive.sh"
  [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
  case "$localip" in
    10|11|12|13|14|15|16|19|20|23 )
      cp -puv "$script_path" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "$(basename "$script_path") is"
  esac
}

cp_empty_trash() {
  local script_path="$HOME/bin/empty-trash.sh"
  [[ -d "$user_cron_path" ]] || mkdir -p "$user_cron_path"
  case "$localip" in
    10|11|12|13|14|15|16|17|19|20|21|22|23|24|25|227 )
      cp -puv "$script_path" "$user_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "$(basename "$script_path") is"
  esac
}

cp_zbackup() {
	local script_path="$HOME/bin/z-backup"
	case "$localip" in
		11 )
		  [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
		  sudo cp -uv "$script_path" "$opt_cron_path" | awk '{print "==> "$NF}'
    ;;
		* )
			no_copy "$(basename "$script_path") is"
	esac
}

cp_zdefrag() {
  local script_path="$HOME/bin/z-defrag"
  local anacron_path="/etc/cron.monthly/"
  case "$localip" in
    10|12|13|15|20|23 )
      sudo cp -uv "$script_path" "$anacron_path" | awk '{print "==> "$NF}'
    ;;
    11|14|16|19 )
      [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
      sudo cp -uv "$script_path" "$opt_cron_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "$(basename "$script_path") is"
  esac
}

cp_zupdate() {
  local script_path="$HOME/bin/z-update"
  local sed_file="$HOME/bin/files/updatelog.sed"
  local anacron_path="/etc/cron.weekly/"
  case "$localip" in
    10|12|13|15|17|20|21|22|23|24|25|227 )
      sudo cp -uv "$script_path" "$anacron_path" | awk '{print "==> "$NF}'
      sudo cp -uv "$sed_file" "$sed_path" | awk '{print "==> "$NF}'
    ;;
    11|14|16|19 )
      [[ -d "$opt_cron_path" ]] || sudo mkdir -p "$opt_cron_path"
      sudo cp -uv "$script_path" "$opt_cron_path" | awk '{print "==> "$NF}'
      sudo cp -uv "$sed_file" "$sed_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "$(basename "$script_path") is"
  esac
}

cp_zytdlpupdate() {
  local script_path="$HOME/bin/z-ytdlp-update"
	local sed_file="$HOME/bin/files/ytdlp-uplog.sed"
  local anacron_path="/etc/cron.daily/"
  case "$localip" in
    10|15|17 )
      sudo cp -uv "$script_path" "$anacron_path" | awk '{print "==> "$NF}'
      sudo cp -uv "$sed_file" "$sed_path" | awk '{print "==> "$NF}'
    ;;
    * )
      no_copy "$(basename "$script_path") is"
  esac
}

no_copy() {
  local script="$1"
  printf "%s not applicable to this system and not copied.\n" "$(basename "$script")"
}

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${green}Usage:${normal} $_script [OPTIONS]
${orange}OPTIONS:${normal}
  -a    Copy all scripts to the appropriate directories.
  -b    Copy local backup script.
  -d    Copy defrag script.
  -f    Copy Finance backup scripts.
  -h    Display Help.
  -m    Main PC backup
  -r    Copy repository backup scripts.
  -s    Copy script archive script.
  -t    Copy empty trash script.
  -u    Copy system update script.
  -y    Copy yt-dlp update script.
  NOTE: Multiple arguments may be passed to the script.
END_HELP
  printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

## Execution ##

printf "Copies updated cron scripts to the appropriate directories.\n"

noOpt=1
optstr=":abdfhmrstuy"
while getopts "$optstr" opt; do
  case "$opt" in
    a )
      cp_finance_bu
      cp_passwdsync
      cp_repo_backup
      cp_scriptarchive
      cp_empty_trash
      sudo_login 2
      cp_zupdate
      cp_zdefrag
      cp_zytdlpupdate
      cp_zbackup
    ;;
		b )
      sudo_login 2
			cp_zbackup
		;;
    d )
      sudo_login 2
      cp_zdefrag
    ;;
    f )
      cp_finance_bu
    ;;
    h )
      help 0
    ;;
    m )
      cp_main_bu
    ;;
    r )
      cp_repo_backup
    ;;
    s )
      cp_scriptarchive
    ;;
    t )
      cp_empty_trash
    ;;
    u )
      sudo_login 2
      cp_zupdate
    ;;
    y )
      sudo_login 2
      cp_zytdlpupdate
    ;;
    ? )
      printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
      help 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No arguments passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
leave "$_script v$_version"