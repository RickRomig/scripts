#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-micro
# Description  : Installs, updates, and removes the Micro CLI text editor.
# Dependencies : curl wget
# Arguments    : [-h] [-i] [-r]] [-u] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 10 Jan 2022
# Updated      : 09 Jul 2025
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="6.10.25190"
readonly gh_url="https://github.com/zyedidia/micro/releases"

## Functions ##

help() {
	local errcode="${1:-2}"
	local -r updated="09 Jul 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, configures, updates, or removes the Micro CLI text editor.

${green}Usage:${normal} $script [-h] [-i] [-r] [-u]

${orange}Available options:${normal}
  -h  Show this help message and exit.
  -i  Installs the Micro CLI text editor.
  -r  Removes the Micro CLI text editor from the system.
  -u  Updates the Micro CLI text editor to the latest GitHub release.
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

micro_version() {
  micro -version | awk '/Version/ {print $NF}'
}

newest_version() {
  check_package wget
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /linux/ {print $7;exit}' | sed 's/^v//')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver=$(micro_version)
  if [[ ! "$new_ver" > "$cur_ver" ]]; then
    printf "%sMicro %s is the current version. No update required.%s\n" "$lightyellow" "$cur_ver" "$normal"
  else
    printf "%sInstalled version of Micro is %s, updating to %s...\n" "$lightyellow" "$cur_ver" "$normal"
    install_micro
  fi
}

install_micro() {
  local new_pkg="micro-${new_ver}-linux64.tar.gz"
  sudo_login 2
  check_package wget
  printf "Downloading Micro %s from the zyedidia GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/v$new_ver/$new_pkg"
  kill "$!";printf "done\n";tput cnorm
  printf "Installing Micro %s...\n" "$new_ver"
  tar -xzvf "$tmp_dir/$new_pkg" -C "$tmp_dir/"
  sudo cp -v "$tmp_dir/micro-$new_ver"/micro /usr/bin/
  sudo cp -v "$tmp_dir/micro-$new_ver"/micro.1 /usr/share/man/man1/
  exist xclip || sudo apt-get install -y xclip
  printf "Micro %s installed.\n" "$(micro_version)"
}

remove_micro() {
  local cur_ver cfg_d
  cfg_d="$HOME/.config/micro"
  cur_ver=$(micro_version)
  sudo_login 2
  printf "Removing the Micro CLI text editor...\n"
  sudo dpkg --remove micro
  [[ -L "$cfg_d/settings.json" ]] && unlink "$cfg_d/settings.json"
  [[ -L "$cfg_d/bindings.json" ]] && unlink "$cfg_d/bindings.json"
  find "$HOME/.config" -type d -name micro -exec rm -rf {} \;
  printf "Micro %s and configuration files have been removed.\n" "$cur_ver"
}

micro_configs() {
  local repository cfg_d
  cfg_d="$HOME/.config/micro"
	repository=$(assign_cfg_repo)
  [[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
  printf "Applying Micro settings and bindings...\n"
  [[ -f "$"$cfg_d/settings.json"" ]] && rm "$cfg_d/settings.json"
  ln -s "$repository/micro/settings.json" "$cfg_d/settings.json"
  [[ -f "$"$cfg_d/bindings.json"" ]] && rm "$cfg_d/bindings.json"
  ln -s "$repository/micro/bindings.json" "$cfg_d/bindings.json"
  micro -plugin install bookmark
  printf "Micro setttings applied.\n"
}

main() {
  local noOpt opt optstr new_ver cfg_d
  noOpt=1
  optstr=":hiru"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
        help 0
        ;;
      i )
        if  exists micro; then
          printf "Micro %s is already installed.\n" "$(micro_version)" >&2
        else
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
          tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
          trap cleanup EXIT
          new_ver="$(newest_version)"
          printf "%sInstalling Micro version %s...%s\n" "$lightyellow" "$new_ver" "$normal"
          install_micro
          micro_configs
        fi
        ;;
      r )
        if  exists micro; then
          remove_micro
        else
          printf "Micro is not installed.\n" >&2
        fi
        ;;
      u )
        if  exists micro; then
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
          tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
          trap cleanup EXIT
          new_ver="$(newest_version)"
          [[ "$new_ver" ]] || die "No download available. Try again later." 1
          compare_versions
        else
          printf "Micro is not installed.\n" >&2
        fi
        ;;
      ? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
    noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
