#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-micro
# Description  : Installs, updates, and removes the Micro CLI text editor.
# Dependencies : gdebi, wget
# Arguments    : [-b] [-h] [-i] [-r] [-s] [-u] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 10 Jan 2022
# Updated      : 24 Aug 2024
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="5.10.24237"
readonly _updated="24 Aug 2024"
readonly gh_url="https://github.com/zyedidia/micro/releases"
readonly cfg_d=$HOME"/.config/micro"

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

check_dependencies() {
  local packages=( gdebi wget )
  check_packages "${packages[@]}"
}

micro_version() {
  # micro --version | awk '/Version/ {print $NF}'
  dpkg -l micro | awk '/ii/ {print $3}'
}

newest_version() {
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver=$(micro_version)
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo "${lightyellow}Micro $cur_ver is the current version. No update required.${normal}"
  else
    echo "${lightyellow}Installed version of Micro is $cur_ver, updating to $new_ver...${normal}"
    install_micro
  fi
}

install_micro() {
  local new_pkg="micro-${new_ver}-amd64.deb"
  printf "Downloading Micro %s from the zyedidia GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/v$new_ver/$new_pkg"
  kill "$!";printf "done\n";tput cnorm
  printf "Installing Micro %s...\n" "$new_ver"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  check_package xclip
  printf "Micro %s installed.\n" "$(micro_version)"
}

remove_micro() {
  local cur_ver cfg_bu_d
  cur_ver=$(micro_version)
  cfg_bu_d="$HOME/.config/backup/micro"
  echo "Removing the Micro CLI text editor..."
  sudo dpkg --remove -y micro
  [[ -d "$cfg_d" ]] && rm -rf "$cfg_d"
  [[ -d "$cfg_bu_d" ]] && rm -rf "$cfg_bu_d"
  [[ -d /root/.config/micro ]] && sudo rm -rf /root/.config/micro
  echo "Micro $cur_ver and configuration files have been removed."
}

apply_settings() {
  local json_file localip repository
  localip=$(local_ip)
  json_file="settings.json"
  [[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
  echo "Applying Micro settings..."
  if [[ "$localip" == "16" ]]; then
    repository="HOME/gitea/configs/micro"
    cp -v "$repository/$json_file" "$cfg_d/"
  else
    repository="configs/raw/branch/main/micro"
  curl -so "$cfg_d/$json_file" "$Gitea_URL/$repository/$json_file"
  fi
  echo "Micro setttings applied."
}

apply_bindings() {
  local json_file localip repository
  localip=$(local_ip)
  json_file="bindings.json"
  [[ -d "$cfg_d" ]] || mkdir -p "$cfg_d"
  echo "Applying Micro keybindings..."
  if [[ "$localip" == "16" ]]; then
    repository="HOME/gitea/configs/micro"
    cp -v "$repository/$json_file" "$cfg_d/"
  else
    repository="configs/raw/branch/main/micro"
    curl -so "$cfg_d/$json_file" "$Gitea_URL/$repository/$json_file"
  fi
  echo "Micro keybindings applied."
}

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${orange}$_script${normal} $_version ($_updated)
Installs, configures, updates, or removes the Micro CLI text editor.

${green}Usage:${normal} $_script [OPTION]

${orange}Available options:${normal}
  -b  Installs/updates the Micro key-bindings json file.
  -h  Displays help.
  -i  Installs the Micro CLI text editor.
  -r  Removes the Micro CLI text editor from the system.
  -s  Installs/updates the Micro settings json file.
  -u  Updates the Micro CLI text editor to the latest version.
END_HELP
  exit "$errcode"
}

## Execution ##

noOpt=1
optstr=":bhirsu"
while getopts "$optstr" opt; do
  case "$opt" in
    b )
      exists micro || leave "Micro is not installed."
      apply_bindings
    ;;
    h )
      help 0
    ;;
    i )
      exists micro && leave "Micro $(micro_version) is already installed."
      tmp_file=$(mktemp) || die "Failed to create temporary file." 1
      tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
      trap cleanup EXIT
      sudo_login 2
      check_dependencies
      new_ver="$(newest_version)"
      echo "${lightyellow}Installing Micro version $new_ver...${normal}"
      install_micro
      apply_settings
      apply_bindings
    ;;
    r )
      exists micro || leave "Micro is not installed."
      sudo_login 2
      remove_micro
    ;;
    s )
      exists micro || leave "Micro is not installed."
      apply_settings
    ;;
    u )
      exists micro || leave "Micro is not installed."
      tmp_file=$(mktemp) || die "Failed to create temporary file." 1
      tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
      trap cleanup EXIT
      sudo_login 2
      check_dependencies
      new_ver="$(newest_version)"
      [[ "$new_ver" ]] || die "No download available. Try again later." 1
      compare_versions
    ;;
    ? )
      echo "$red_error Invalid option -${OPTARG}" >&2
      help 2
  esac
  noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
box "$_script v$_version"
exit
