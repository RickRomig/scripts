#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-micro
# Description  : Installs, updates, and removes the Micro CLI text editor.
# Dependencies : curl wget
# Arguments    : [-hiru] (See help function)
# Author       : Copyright (C) 2022, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 10 Jan 2022
# Updated      : 04 Oct 2025
# Comments     : Debian 13 & LMDE 7 installs version 2.0.14 from repo.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="6.12.25277"
readonly gh_url="https://github.com/zyedidia/micro/releases"

## Functions ##

help() {
	local errcode="${1:-2}"
	local -r updated="04 Oct 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, configures, updates, or removes the Micro CLI text editor.

${green}Usage:${normal} $script [-hiru]
${orange}Available options:${normal}
  -h  Show this help message and exit.
  -i  Installs the Micro CLI text editor.
  -r  Removes the Micro CLI text editor from the system.
  -u  Updates the Micro CLI text editor to the latest GitHub release.
_HELP_
  exit "$errcode"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
  [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

micro_version() {
  micro -version | awk '/Version:/ {print $NF}'
}

newest_version() {
  check_package wget
  wget -qO "$tmp_file" "$gh_url"
  new_ver=$(awk -F'/' '/download/ && /linux/ {print $6;exit}' "$tmp_file" | grep -Ev 'beta|-rc' | sed 's/^v//')
  echo "$new_ver"
}

compare_versions() {
  local cur_ver
  cur_ver=$(micro_version)
  if [[ ! "$new_ver" > "$cur_ver" ]]; then
    printf "%sMicro %s is the current version. No update required.%s\n" "$lightyellow" "$cur_ver" "$normal"
  else
    printf "%sInstalled version of Micro is %s, updating to %s...%s\n" "$lightyellow" "$cur_ver" "$new_ver" "$normal"
    install_micro
  fi
}

install_micro() {
  local new_pkg="micro-${new_ver}-linux64.tar.gz"
  sudo_login 2
  check_package wget
  printf "Downloading Micro %s from the zyedidia GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$gh_url/download/v$new_ver/$new_pkg"
  kill "$!";printf "done\n";tput cnorm
  printf "Installing Micro %s...\n" "$new_ver"
  tar -xzvf "$tmp_dir/$new_pkg" -C "$tmp_dir/"
  sudo cp -v "$tmp_dir/micro-$new_ver"/micro /usr/bin/
  sudo cp -v "$tmp_dir/micro-$new_ver"/micro.1 /usr/share/man/man1/
  exists xclip || sudo apt-get install -y xclip
  printf "Micro %s installed.\n" "$(micro_version)"
}

remove_micro() {
  cur_ver=$(micro_version)
  sudo_login 2
  printf "Removing the Micro CLI text editor...\n"
  sudo dpkg --remove micro
  [[ -L  ~/.config/micro/settings.json ]] && unlink ~/.config/micro/settings.json
  [[ -L  ~/.config/micro/bindings.json ]] && unlink ~/.config/micro/bindings.json
  find ~/.config -type d -name micro -exec rm -rf {} \;
  printf "Micro %s and configuration files have been removed.\n" "$cur_ver"
}

micro_configs() {
  [[ -d  ~/.config/micro ]] || mkdir -p  ~/.config/micro
  printf "Applying Micro settings and bindings...\n"
  [[ -f  ~/.config/micro/settings.json ]] && rm ~/.config/micro/settings.json
  [[ -f ~/.config/micro/bindings.json ]] && rm  ~/.config/micro/bindings.json
  if [[ -d ~/gitea/configs ]]; then
    ln -sv ~/gitea/configs/micro/settings.json  ~/.config/micro/settings.json
    ln -sv ~/gitea/configs/micro/bindings.json  ~/.config/micro/bindings.json
  elif [[ -d ~/Downloads/configs ]]; then
    ln -sv ~/Downloads/configs/micro/settings.json  ~/.config/micro/settings.json
    ln -sv ~/Downloads/configs/micro/bindings.json  ~/.config/micro/bindings.json
  fi
  micro -plugin install bookmark
  printf "Micro setttings applied.\n"
}

main() {
  local noOpt opt optstr new_ver
  noOpt=1
  optstr=":hiru"
  while getopts "$optstr" opt; do
    case "$opt" in
      h )
        help 0
        ;;
      i )
        if  exists micro; then
          printf "Micro %s is already installed.\n" "$(micro_version)" >&2
        else
          grep '^13' /etc/debian_version && { printf "Install Micro from Debian repository.\n"; exit 1; } # Comment line if Micro version > 2.0.14
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
          tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
          trap cleanup EXIT
          new_ver="$(newest_version)"
          printf "%sInstalling Micro version %s...%s\n" "$lightyellow" "$new_ver" "$normal"
          install_micro
          micro_configs
        fi
        ;;
      r )
        if  exists micro; then
          remove_micro
        else
          printf "Micro is not installed.\n" >&2
        fi
        ;;
      u )
        if  exists micro; then
          tmp_file=$(mktemp) || die "Failed to create temporary file." 1
          tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
          trap cleanup EXIT
          new_ver="$(newest_version)"
          [[ "$new_ver" ]] || die "No download available. Try again later." 1
          compare_versions
        else
          printf "Micro is not installed.\n" >&2
        fi
        ;;
      ? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
    noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
