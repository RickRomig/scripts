#!/usr/bin/env bash
##########################################################################
# Script Name  : install-keepassxc
# Description  : Installs/removes KeePassXC from Flathub or distro repos
# Dependencies : git
# Arguments    : -c -d -f -h -r (see help function)
# Author       : Copyright (C) 2021, Richard B. Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 26 Jan 2021
# Updated      : 05 Jun 2024
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.12.24157"
readonly _updated="05 Jun 2024"
readonly cfg_dir="$HOME/.config/keepassxc"

## Functions ##

kpxc_ver() {
  dpkg -l | awk '$2 == "keepassxc" {print $3}' | sed 's/[+-].*//'
}

keepass_ver() {
  flatpak list | awk '/KeePassXC/ {print $3}'
}

flathub_keepassxc() {
  sudo_login 2
  sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  flatpak install --user flathub org.keepassxc.KeePassXC
  printf "KeePassXC %s installed from flathub.\n" "$(keepass_ver)"
}

distro_keepassxc() {
  sudo_login 2
  sudo apt-get install keepassxc -yy
  create_ini
  printf "Keepassxc %s installed from distro repositories.\n" "$(kpxc_ver)"
}

remove_flatpak_keepassxc() {
  printf "Removing the KeePassXC flatpak...\n"
  [[ -d "HOME/.var/app/org.keepassxc.KeePassXC" ]] && flatpak uninstall --noninteractive --assumeyes org.keepassxc.KeePassXC
  printf "KeePassXC flatpak removed.\n"
}

remove_distro_keeepassxc() {
  local cfg_bu_d="$HOME/.config/backup/keepassxc"
  sudo_login 2
  printf "Removing the KeePassXC DEB package...\n"
  sudo apt-get remove --purge keepassxc -yy
  [[ -d "$cfg_dir" ]] && rm -rf "$cfg_dir"
  [[ -d "$cfg_bu_d" ]] && rm -rf "$cfg_bu_d"
  printf "KeePassXC DEB package removed.\n"
}

create_ini() {
	local localip repository ini_file
	localip=$(local_ip)
  ini_file="keepassxc.ini"
  [[ -d "$cfg_dir" ]] || mkdir -p "$cfg_dir"
  printf "Appying %s ...\n" "$ini_file"
  if [[ "$localip" == "16" ]]; then
    repository="$HOME/gitea/configs/keepassxc"
    cp -v "$repository/$ini_file" "$cfg_dir"
  else
    repository="configs/raw/branch/main/keepassxc"
	  wget -P "$cfg_dir" "$Gitea_URL/$repository/$ini_file"
  fi
  printf "%s created and applied.\n" "$ini_file"
}

help() {
  errcode="${1:-2}"
  cat << END_HELP
Usage: $_script [OPTIONS]
OPTIONS:
  -c  Apply KeePassXC configuration.
  -d  Install KeePassXC from distribution repositories.
  -f  Install KeePassXC from flathub repositories.
  -h  Display help.
  -r  Remove KeePassXC from the system.
$_script v$_version (Updated $_updated)
END_HELP
  exit "$errcode"
}

## Execution ##

box "$_script v$_version"
echo "Installs KeePassXC password manager"
noOpt=1
optstr=":cdfhr"
while getopts "$optstr" opt; do
  case "$opt" in
    c )
      create_ini
    ;;
    d )
      if exists keepassxc; then
        printf "KeePassXC version %s is already installed from distro.\n" "$(kpxc_ver)"
      elif  flatpak list | grep -qw KeePassXC; then
        printf "KeePassXC %s is already installed from flatpak.\n" "$(keepass_ver)"
      else
        distro_keepassxc
      fi
    ;;
    f )
      if exists keepassxc; then
        printf "KeePassXC version %s is already installed from distro.\n" "$(kpxc_ver)"
      elif  flatpak list | grep -qw KeePassXC; then
        printf "KeePassXC %s is already installed from flatpak.\n" "$(keepass_ver)"
      else
        flathub_keepassxc
      fi
    ;;
    h )
      help 0
    ;;
    r )
      if flatpak list | grep -qw KeePassXC; then
        remove_flatpak_keepassxc
      elif exists keepassxc; then
        remove_distro_keeepassxc
      else
        leave "KeePassXC is not installed."
      fi
    ;;
    ? )
      printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
      help 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
exit
