#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-yt-dlp
# Description  : Installs, updates, removes yt-dlp from yt-dlp GitHub repo
# Dependencies : curl, ffmpeg, ffprobe, atomicparsley, ytdlpuplog.sed, z-ytupdate
# Arguments    : -h -i -r -u (see help function for more information)
# Author       : Copyright (C) 2023, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 20 Jun 2023
# Updated      : 04 Jun 2025
# Comments     : Removes distro repo version if installed.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

readonly script="${0##*/}"
readonly version="2.3.25155"

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="04 Apr 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, removes, updates YouTube-dlp.

${green}Usage:${normal} $script [OPTION]
${orange}Available options:${normal}
	-h 	Show this help message and exit
	-i 	Install yt-dlp (binary)
	-r 	Remove yt-dlp (binary)
	-u 	Update yt-dlp (binary)
	-x	Remove yt-dlp (repo version)
_HELP_
  exit "$errcode"
}

check_dependencies() {
  local packages=( atomicparsley curl ffmpeg ffmpeg-doc )
  check_packages "${packages[@]}"
}

ytdlp_deb() {
	[[ -f /usr/bin/yt-dlp ]] && return "$TRUE" || return "$FALSE"
}

ytdlp_bin() {
	[[ -f /usr/local/bin/yt-dlp ]] && return "$TRUE" || return "$FALSE"
}

ytdlp_version() {
	/usr/local/binc/yt-dlp --version
}

update_ytdlp() {
	printf "Updating yt-dlp ...\n"
	/usr/local/binc/yt-dlp --update
}

install_ytdlp() {
  local url
	url="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp"
	printf "Installing yt-dlp, and update scripts...\n"
  sudo curl -# -L "$url" -o /usr/local/binc/yt-dlp
  [[ -x /usr/bin/python3 ]] && sudo ln -s /usr/bin/python3 /usr/bin/python
  sudo chmod a+rx /usr/local/binc/yt-dlp
  # Copies update & log cleanup scripts
  [[ -x "$HOME/bin/z-ytdlp-update" ]] && sudo cp -v "$HOME/bin/z-ytdlp-update" /etc/cron.daily/
  [[ -f "$HOME/bin/files/ytdlp-uplog.sed" ]] && sudo cp -v "$HOME/bin/files/ytdlp-uplog.sed" /usr/share/misc
	[[ -L "$HOME/.local/bin/yt-dlp" ]] || ln -s /usr/local/bin/yt-dlp "$HOME/.local/bin/yt-dlp"
  printf "%s v%s installed.\n" "yt-dlp" "$(ytdlp_version)"
}

remove_repo_ver() {
	local deb_version
	deb_version=$(dpkg -l yt-dlp | awk '/ii/ {print $3}' | sed 's/[+-].*//')
  # Purges repo version of yt-dlp & removes orphaned dependencies
	printf "yt-dlp %s installed from distro repos. Removing this version.\n" "$deb_version"
  sudo apt-get purge -y yt-dlp
  sudo apt-get autoremove -y
  printf "Repository version of yt-dlp removed from the system.\n"
}

remove_ytdlp() {
  # Removes the yt-dl.org version
  printf "Removing yt-dlp v%s...\n" "$(ytdlp_version)"
  sudo rm /usr/local/binc/yt-dlp
  remove_configs
  remove_updater
  remove_logs
	printf "ytdlp.org version of yt-dlp removed.\n"
}

remove_configs() {
  # Remove yt-dl.org configuration file, if it exists
  if [[ -d "$HOME/.config/yt-dlp" ]]; then
    printf "Removing user yt-dlp configuration file...\n"
    rm -rf "$HOME/.config/yt-dlp"
    printf "User yt-dlp configuration file removed.\n"
  else
    printf "No user yt-dlp configuration file found.\n"
  fi
  # Remove global configuration file, if it exists
  if [[ -f "/etc/yt-dlp.conf" ]]; then
    printf "Removing global yt-dlp configuration file...\n"
    sudo rm "/etc/yt-dlp.conf"
    printf "Global yt-dlp configuration file removed.\n"
  else
    printf "No global yt-dlp configuration file found.\n"
  fi
}

remove_updater() {
	if [[ -f /usr/share/misc/ytdlp-uplog.sed ]]; then
		sudo rm /usr/share/misc/ytdlp-uplog.sed
		printf "ytdlp-uplog.sed removed.\n"
	else
		printf "ytdlp-uplog.sed not found.\n"
	fi
	if [[ -x /etc/cron.daily/z-ytdlp-update ]]; then
		sudo rm /etc/cron.daily/z-ytdlp-update
		printf "z-ytdlp-update script removed.\n"
	else
		printf "z-ytdlp-update script not found.\n"
	fi
}

remove_logs() {
  # Remove update log file if it exists
  if [[ -f /var/log/ytdlpup.log ]]; then
    sudo rm /var/log/ytdlpup.log
    printf "yt-dlp update log file removed.\n"
  else
    printf "No yt-dlp log file found.\n"
  fi
}

install_intro() {
  cat << _INTRO_
Installs yt-dlp from yt-dl.org to /usr/local/bin along with an update
script that runs as a daily anacron job which saves the results to a log
file at /var/log/ytdlpup.log. A sed file to cleanup and format the log file
is installed at /usr/share/misc/ytdlpuplog.sed
If the version from the distro's repostitory is installed, it will be removed.
_INTRO_
}

remove_intro() {
  cat << END_INTRO
Removes yt-dlp and its configuration files, removing both the version
installed via the distribution's repositories and the version downloaded
from the yt-dl downloads page.
END_INTRO
}

main() {
  local noOpt opt optstr
	noOpt=1
	optstr=":hirux"
	while getopts "$optstr" opt; do
		case "$opt" in
			h )
				help 0
			;;
			i )
				ytdlp_bin && leave "yt-dlp $(ytdlp_version) already installed."
				sudo_login 2
				install_intro
				check_dependencies
				ytdlp_deb && remove_repo_ver
				install_ytdlp
			;;
			r )
				remove_intro
				ytdlp_deb && remove_repo_ver
				ytdlp_bin || leave "yt-dlp is not installed."
				sudo_login 2
				remove_ytdlp
			;;
			u )
				ytdlp_bin || leave "yt-dlp is not installed."
				sudo_login 2
				update_ytdlp
			;;
			x )
				ytdlp_deb || leave "The repo version of yt-dlp is not installed."
				printf "Removing %s installed from the distribution repository.\n" "yt-dlp"
				sudo_login 2
				remove_repo_ver
			;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
