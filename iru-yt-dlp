#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-yt-dlp
# Description  : Installs, updates, removes yt-dlp from yt-dlp GitHub repo
# Dependencies : curl, ffmpeg, ffprobe, atomicparsley, ytdlpuplog.sed, z-ytupdate
# Arguments    : -h -i -r -u (see help function for more information)
# Author       : Copyright (C) 2023, Richard B. Romig, 20 Jun 2023
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Removes distro repo version if installed.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.1.1"
readonly _updated="21 Jun 2023"
readonly ytdlp_prg="yt-dlp"
readonly update_script="z-ytdlp-update"
readonly sed_file="ytdlp-uplog.sed"
readonly script_dir="$HOME/bin"
readonly sed_dir="$HOME/bin/files"
readonly ytdlp_location="/usr/local/bin"
readonly sed_location="/usr/share/misc"
readonly cron_location="/etc/cron.daily"

## Functions ##

check_dependencies() {
  local packages=( atomicparsley curl ffmpeg ffmpeg-doc )
  check_packages "${packages[@]}"
}

ytdlp_version() {
	"$ytdlp_location/$ytdlp_prg" --version
}

update_ytdlp() {
	printf "Updating yt-dlp ...\n"
	"$ytdlp_location/$ytdlp_prg" --update
}

install_ytdlp() {
  local url="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp"
	printf "Installing %s, and update scripts...\n" "$ytdlp_prg"
  sudo curl -# -L "$url" -o "$ytdlp_location/$ytdlp_prg"
  [[ -x /usr/bin/python3 ]] && sudo ln -s /usr/bin/python3 /usr/bin/python
  sudo chmod a+rx "$ytdlp_location/$ytdlp_prg"
  # Copies update & log cleanup scripts
  [[ -x "$script_dir/$update_script" ]] && sudo cp -v "$script_dir/$update_script" "$cron_location/"
  [[ -f "$sed_dir/$sed_file" ]] && sudo cp -v "$sed_dir/$sed_file" "$sed_location"
  printf "%s v%s installed.\n" "$ytdlp_prg" "$(ytdlp_version)"
}

remove_repo_ver() {
  # Purges repo version of yt-dlp & removes orphaned dependencies
	printf "%s v%s installed distro repos. Removing this version.\n" "$ytdlp_prg" "$(dpkg -l | awk '$2 == "yt-dlp" {print $3}' | sed 's/[+-].*//')"
  sudo apt-get purge -yyq yt-dlp
  sudo apt-get autoremove -yyq
  printf "Repository version of %s removed from the system.\n" "$ytdlp_prg"
}

remove_ytdlp() {
  # Removes the yt-dl.org version
  printf "Removing %s v%s...\n" "$ytdlp_prg" "$(ytdlp_version)"
  sudo rm "$ytdlp_location/$ytdlp_prg"
  remove_configs
  remove_updater
  remove_logs
	printf "ytdlp.org version of %s removed." "$ytdlp_prg"
}

remove_configs() {
  # Remove yt-dl.org configuration file, if it exists
  if [[ -d "$HOME/.config/yt-dlp" ]]; then
    printf "Removing user %s configuration file...\n" "$ytdlp_prg"
    rm -rf "$HOME/.config/yt-dlp"
    printf "User %s configuration file removed.\n" "$ytdlp_prg"
  else
    printf "No user %s configuration file found.\n" "$ytdlp_prg"
  fi
  # Remove global configuration file, if it exists
  if [[ -f "/etc/yt-dlp.conf" ]]; then
    printf "Removing global %s configuration file...\n" "$ytdlp_prg"
    sudo rm "/etc/yt-dlp.conf"
    printf "Global %s configuration file removed.\n" "$ytdlp_prg"
  else
    printf "No global %s configuration file found.\n" "$ytdlp_prg"
  fi
}

remove_updater() {
	[[ -f "$sed_location/$sed_file" ]] && sudo rm "$sed_location/$sed_file"
	if [[ -x "$cron_location/$update_script" ]]; then
		sudo rm "$cron_location/$update_script"
  	printf "%s update script removed.\n" "$update_script"
	else
		printf "%sl update script not found.\n" "$update_script"
	fi
}

remove_logs() {
	local log_location="/var/log/ytdlpup.log"
  # Remove update log file if it exists
  if [[ -f "$log_location" ]]; then
    sudo rm "$log_location"
    printf "%s update log file removed.\n" "$ytdlp_prg"
  else
    printf "No %s log file found.\n" "$ytdlp_prg"
  fi
}

help() {
	errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-h 	Display help
	-i 	Install yt-dlp
	-r 	Remove yt-dlp
	-u 	Update yt-dlp
	-x	Remove yt-dlp (repo version)
END_HELP
	printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

install_intro() {
  cat << EOF
Installs yt-dlp from yt-dl.org to /usr/local/bin along with an update
script that runs as a daily anacron job which saves the results to a log
file at /var/log/ytdlpup.log. A sed file to cleanup and format the log file
is installed at /usr/share/misc/ytdlpuplog.sed
If the version from the distro's repostitory is installed, it will be removed.
EOF
}

remove_intro() {
  cat << EOF
Removes yt-dlp and its configuration files, removing both the version
installed via the distribution's repositories and the version downloaded
from the yt-dl downloads page.
EOF
}

## Execution ##

noOpt=1
optstr=":hirux"
while getopts "$optstr" opt; do
	case "$opt" in
		h )
			help 0
		;;
		i )
			[[ -f "$ytdlp_location/$ytdlp_prg" ]] && leave "$ytdlp_prg $(ytdlp_version) already installed."
			user_in_sudo
			check_dependencies
			install_intro
			dpkg -l | grep -qw yt-dlp && remove_repo_ver
			install_ytdlp
		;;
		r )
			remove_intro
			dpkg -l | grep -qw yt-dlp && remove_repo_ver
			[[ -f "$ytdlp_location/$ytdlp_prg" ]] || leave "$ytdlp_prg $(ytdlp_version) is not installed."
			user_in_sudo
			remove_ytdlp
		;;
		u )
			[[ -f "$ytdlp_location/$ytdlp_prg" ]] || leave "$ytdlp_prg $(ytdlp_version) is not installed."
			user_in_sudo
			update_ytdlp
		;;
		x )
			dpkg -l | grep -qw yt-dlp || leave "The repo version of $ytdlp_prg is not installed."
			printf "Removing %s installed from the distribution repository.\n" "$ytdlp_prg"
			user_in_sudo
			remove_repo_ver
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
exit
