#!/usr/bin/env bash
##########################################################################
# Script Name  : iru-yt-dlp
# Description  : Installs, updates, removes yt-dlp from yt-dlp GitHub repo
# Dependencies : curl, ffmpeg, ffprobe, atomicparsley, ytdlpuplog.sed, z-ytupdate
# Arguments    : -h -i -r -u (see help function for more information)
# Author       : Copyright (C) 2023, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 20 Jun 2023
# Updated      : 29 Jun 2025
# Comments     : Removes distro repo version if installed.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script_dir=$(dirname "$(readlink -f "${0}")"); readonly script_dir
readonly script="${0##*/}"
readonly version="2.6.25180"

## Functions ##

help() {
	local errcode="${1:-2}"
	local updated="27 Jun 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs, removes, updates YouTube-dlp.

${green}Usage:${normal} $script [-h] [-i] [-r] [-u] [-x]
${orange}Available options:${normal}
	-h 	Show this help message and exit
	-i 	Install yt-dlp (binary)
	-r 	Remove yt-dlp (binary)
	-u 	Update yt-dlp (binary)
	-x	Remove yt-dlp (distro version)
_HELP_
  exit "$errcode"
}

check_dependencies() {
  local packages=( atomicparsley curl ffmpeg ffmpeg-doc )
  check_packages "${packages[@]}"
}

ytdlp_deb() {
	dpkg -l yt-dlp 2>/dev/null && return "$TRUE" || return "$FALSE"
}

ytdlp_bin() {
	[[ -f /usr/local/bin/yt-dlp ]] && return "$TRUE" || return "$FALSE"
}

ytdlp_version() {
	ytdlp_bin && /usr/local/bin/yt-dlp --version
}

deb_version() {
	ytdlp_deb && dpkg -l yt-dlp | awk '/ii/ {print $3}' | sed 's/[+-].*//'
}

update_ytdlp() {
	printf "Updating yt-dlp ...\n"
	/usr/local/bin/yt-dlp --update
}

install_updater() {
	local -r updater="$script_dir/z-ytdlp-update"
	local -r cleanup="$script_dir/files/ytdlp-uplog.sed"
  [[ -x "$updater" ]] && sudo cp -v "$updater" /etc/cron.daily/
  [[ -f "$cleanup" ]] && sudo cp -v "$cleanup" /usr/share/misc/

}

install_ytdlp() {
  local -r url="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp"
	printf "Installing yt-dlp, and update scripts...\n"
	sudo_login 2
  sudo curl -# -L "$url" -o /usr/local/bin/yt-dlp
  sudo chmod a+rx /usr/local/bin/yt-dlp
  [[ -x /usr/bin/python3 ]] && sudo ln -s /usr/bin/python3 /usr/bin/python
	[[ -L "$HOME/.local/bin/yt-dlp" ]] || ln -s /usr/local/bin/yt-dlp "$HOME/.local/bin/yt-dlp"
	install_updater
  printf "%s v%s installed.\n" "yt-dlp" "$(ytdlp_version)"
}

remove_ytdlp_repo() {
	local -r ytdlp_docs="/usr/share/doc/yt-dlp"
	printf "Removing yt-dlp %s installed from distro repos.\n" "$(deb_version)"
	sudo_login 2
  sudo apt-get purge -y yt-dlp
  sudo apt-get autoremove -y
	[[ -d "$ytdlp_docs" ]] && sudo rm -rf "$ytdlp_docs"
  printf "Repository version of yt-dlp removed\n"
}

remove_ytdlp() {
  # Removes the yt-dl.org version
  printf "Removing yt-dlp %s installed from yt-dlp.org...\n" "$(ytdlp_version)"
	sudo_login 2
  sudo rm /usr/local/bin/yt-dlp
  remove_configs
  remove_updater
  remove_ytdlp_logs
	printf "ytdlp.org version of yt-dlp removed.\n"
}

remove_configs() {
	local user_config="$HOME/.config/yt-dlp"
	local global_config="/etc/yt-dlp.conf"
	printf "Removing yt-dlp configuration files...\n"
  if [[ -d "$user_config" ]]; then
    rm -rf "$user_config"
    printf "%s removed.\n" "$user_config"
  else
    printf "%s not found.\n" "$user_config"
  fi
  if [[ -f "$global_config" ]]; then
    sudo rm "$global_config"
		printf "%s removed.\n" "$global_config"
	else
    printf "%s not found.\n" "$global_config"
  fi
}

remove_updater() {
	local -r sed_file="/usr/share/misc/ytdlp-uplog.sed "
	local -r updater="/etc/cron.daily/z-ytdlp-update"
	printf "Removing the yt-dlp updater...\n"
	if [[ -f "$sed_file" ]]; then
		sudo rm "$sed_file"
		printf "%s removed.\n" "$sed_file"
	else
		printf "%s not found.\n" "$sed_file"
	fi
	if [[ -x "$updater" ]]; then
		sudo rm "$updater"
		printf "%s removed.\n" "$updater"
	else
		printf "%s not found.\n" "$updater"
	fi
}

remove_ytdlp_logs() {
	local -r log_file="/var/log/ytdlpup.log"
	printf "Removing yt-dlp log file...\n"
  if [[ -f "$log_file" ]]; then
    sudo rm "$log_file"
    printf "%s removed.\n" "$log_file"
  else
    printf "%s not found.\n" "$log_file"
  fi
}

install_intro() {
  cat << _INTRO_
Installs yt-dlp from yt-dl.org to /usr/local/bin along with an updater
script that runs as a daily anacron job saving the results to a log file
at /var/log/ytdlpup.log.
A sed file to cleanup and format the log file is installed at /usr/share/misc/ytdlpuplog.sed
If the version from the distro's repostitory is installed, it is removed.
_INTRO_
}

remove_intro() {
  cat << END_INTRO
Removes yt-dlp and its configuration files, removing both the version
installed via the distribution's repositories and the version downloaded
from the yt-dl.org downloads page.
END_INTRO
}

main() {
  local noOpt opt optstr
	noOpt=1
	optstr=":hirux"
	while getopts "$optstr" opt; do
		case "$opt" in
			h )
				help 0
				;;
			i )
				if ytdlp_bin; then
					printf "yt-dlp %s is already installed.\n" "$(ytdlp_version)"
				else
					install_intro
					check_dependencies
					ytdlp_deb && remove_ytdlp_repo
					install_ytdlp
				fi
				;;
			r )
				remove_intro
				ytdlp_deb && remove_ytdlp_repo
				if ytdlp_bin; then
					remove_ytdlp
				else
					printf "yt-dlp is not installed.\n"
				fi
				;;
			u )
				if ytdlp_bin; then
					update_ytdlp
				else
					printf "yt-dlp is not installed.\n"
				fi
				;;
			x )
				if ytdlp_bin; then
					printf "Removing yt-dlp %s installed from the distribution repository.\n" "$(deb_version)"
					remove_ytdlp_repo
				else
					printf "The distribution version of yt-dlp is not installed.\n"
				fi
				;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
