#!/usr/bin/env bash
#############################################################################
# Script Name  : local-ip-up
# Description  : Scans local network to see which addresses are active.
# Dependencies : iputils-arping, avahi-daemon, avahi-utils, libnss-mdns
# Arguments    : See the help function
# Author       : Copyright Â© 2019 Richard B. Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 01 Dec 2019
# Updated      : 28 Jul 2025
# Comments     : Variables for IP range do not work, must be hard coded.
#              : Local host will not respond to arping.
#              : Local host will respond using arping in iputils-arping.
#              : Installing arping will uninstall iputils-arping & sudo required.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
#############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
#############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Global Variables ##

readonly script="${0##*/}"
readonly version="4.9.25209"
SECONDS=0
COUNT=0

## Functions ##

help() {
	local errcode="${1:-2}"
	local updated="28 Jul 2025"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Scans local network to see which addresses are active.

${green}Usage:${normal} $script [-adhs]
${orange}Available options:${normal}
  -a  Scan entire network.
  -d  Scan DHCP assigned addresses.
  -h  Show this help message and exit.
  -s  Scan static addresses.
  ${orange}Note:${normal} Uses iputils-arping.
_HELP_
  exit "$errcode"
}

check_dependencies() {
  local packages=( avahi-daemon avahi-utils libnss-mdns iputils-arping )
  check_packages "${packages[@]}"
}

arping_check() {
  local addr="$1"
  arping -c 1 "$addr" | grep -E "0 response|0 packets received" > /dev/null 2>&1 && return 1 || return 0
}

scan_static_addresses() {
  local hname ip_addr
  for ip_addr in $LOCALNET.{1..25}; do
    if arping_check "$ip_addr"; then
      hname=$(avahi-resolve -a "$ip_addr" 2>/dev/null | awk '{print $NF}' | sed 's/\.local$//')
      printf "%s\t" "$ip_addr"
      if [[ "$hname" ]]; then
        printf "%s\n" "$hname"
      else
        case $ip_addr in
          "192.168.0.1" ) printf "Gateway (TP Link AC1750)\n" ;;
          "192.168.0.2" ) printf "D-Link AP\n" ;;
          "192.168.0.3" ) printf "unassigned\n" ;;
          "192.168.0.4" ) printf "NASD97167 (QNAP NAS)\n" ;;
          "192.168.0.5" ) printf "unassigned\n" ;;
          "192.168.0.6" ) printf "Raspberry Pi 4\n" ;;
          "192.168.0.7" ) printf "unassigned\n" ;;
          "192.168.0.8" ) printf "unassigned\n" ;;
          "192.168.0.9" ) printf "unassigned\n" ;;
          "192.168.0.10" ) printf "hp-800g2-sff (Mint)\n" ;;
          "192.168.0.11" ) printf "hp-6005 (LMDE)\n" ;;
          "192.168.0.12" ) printf "e6500-deb (i3)\n" ;;
          "192.168.0.13" ) printf "probook-6570b (i3)\n" ;;
          "192.168.0.14" ) printf "hp-8300 (Network test)\n" ;;
          "192.168.0.15" ) printf "lenovo-m91p (LMDE)\n" ;;
          "192.168.0.16" ) printf "hp-8300-usdt (Gitea Server)\n" ;;
          "192.168.0.17" ) printf "hp-800-g1-usdt (Mint)\n" ;;
          "192.168.0.18" ) printf "unassigned\n" ;;
          "192.168.0.19" ) printf "unassigned\n" ;;
          "192.168.0.20" ) printf "probook-6570 (Mint)\n" ;;
          "192.168.0.21" ) printf "hp-probook-6570 (Mint)\n" ;;
          "192.168.0.22" ) printf "hp-850-g3 (i3)\n" ;;
          "192.168.0.23" ) printf "hp-2560p (i3)\n" ;;
          "192.168.0.24" ) printf "e-475m (i3)\n" ;;
          "192.168.0.25" ) printf "unassigned\n" ;;
          * )
            printf "\tUnknown host\n"
        esac
      fi
      (( COUNT++ ))
    fi
  done
}

scan_dhcp_addresses() {
  local hname ip_addr
  for ip_addr in $LOCALNET.{100..250}; do
    if arping_check "$ip_addr"; then
      hname=$(avahi-resolve -a "$ip_addr" 2>/dev/null | awk '{print $NF}' | sed 's/\.local$//')
      printf "%s\t" "$ip_addr"
      if [[ -n "$hname" ]]; then
        printf "%s\n" "$hname"
      else
        printf "Unknown host\n"
      fi
      (( COUNT++ ))
    fi
  done
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":adhs"
  while getopts "$optstr" opt; do
    case "$opt" in
      a )
        check_dependencies
        tput civis
        printf "\nScanning the network...\n"
        printf "%s%sIP Address\tHostname%s\n" "$underline" "$green" "$normal"
        scan_static_addresses
        scan_dhcp_addresses
        tput cnorm
        ;;
      d )
        check_dependencies
        tput civis
        printf "\nScanning DHCP addresses on the network...\n"
        printf "%s%sIP Address\tHostname%s\n" "$underline" "$green" "$normal"
        scan_dhcp_addresses
        tput cnorm
        ;;
      h )
        help 0
        ;;
      s )
        check_dependencies
        tput civis
        printf "\nScanning static IP addresses on the network...\n"
        printf "%s%sIP Address\tHostname%s\n" "$underline" "$green" "$normal"
        scan_static_addresses
        tput cnorm
        ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  printf "\n%d active addresses discovered in %s.\n\n" "$COUNT" "$(format_time SECONDS)"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
