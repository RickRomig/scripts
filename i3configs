#!/usr/bin/env bash
##########################################################################
# Script Name  : i3configs
# Description  : Copy default i3 configuration files for bookworm and newer
# Dependencies : curl
# Arguments    : See help function
# Author       : Copyright Â© 2023 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 18 Apr 2023
# Comments     : Assumes i3wm, polybar, rofi, dunst have been installed
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.2.1"
readonly _updated="21 Feb 2024"

## Functions ##

help() {
	errcode="${1:-2}"
	cat << END_HELP
$_script copies default i3 configuration files from the local Gitea server.
The files may need to be modified to fit a particular system configuration.
Assumes i3wm has been installed from the i3debian repo_path on the local Gitea server.
Assumes Debian 12 (Bookworm) or LMDE 6 (Faye) is installed.
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-a	Copy autostart.sh (Launches programs necessary for i3 to run.)
	-b	Copy polybar/config.ini (Status bar configuration)
	-c	Copy config (i3wm configuration)
	-d	Copy dunstrc
	-e	Copy everything (all configuration files and scripts)
	-h	Display help
	-k	Copy bindings.list (List of default keybindings, read by ~/bin/i3kb.sh)
	-l	Copy logout (Rofi menu of logout actions)
	-p	Copy polybar-i3 launch script
	-r	Copy rofi configuration files
	-s	Copy sxhkdrc (i3 keybindings)
	-w	Copy workspaces.conf (Workspace configurations)
END_HELP
	printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

is_bookworm() {
	local codename
	codename=$(/usr/bin/lsb_release --codename --short)
	case "$codename" in
		bookworm|faye )
			return "$TRUE"
		;;
		* )
			return "$FALSE"
	esac
}

copy_config_file() {
	local i3_file="$1"
	local i3_dir="$HOME/.config/i3"
	local repo_path="i3debian/raw/branch/main/.config/i3"
	[[ -d "$i3_dir" ]] || mkdir -p "$i3_dir"
	[[ "$i3_file" == "sxhkd/sxhkdrc" ]] && check_sxhkd
	[[ -f "$i3_dir/$i3_file" ]] && cp -pv "$i3_dir/$i3_file" "$i3_dir/$i3_file".bak
	curl -so "$i3_dir/$i3_file" "$Gitea_URL/$repo_path/$i3_file"
	printf "%s copied from the Gitea Server.\n" "$i3_dir/$i3_file"
}

copy_polybar_config() {
	local pb_cfg="$1"
	local polybar_dir="$HOME/.config/polybar"
	local repo_path="i3debian/raw/branch/main/.config/polybar"
	[[ -d "$polybar_dir" ]] || mkdir -p "$polybar_dir"
	[[ -f "$polybar_dir/$pb_cfg" ]] && cp -pv "$polybar_dir/$pb_cfg" "$polybar_dir/$pb_cfg".bak
	curl -so "$polybar_dir/$pb_cfg" "$Gitea_URL/$repo_path/$pb_cfg"
	# Remove battery and wlan from modules-right in polybar config.ini if not needed
	lspci | grep -q 'Network controller:' || sed -i '/^modules-right/s/ wlan//' ~/.config/polybar/config.ini
	[[ ! -d /sys/class/power_supply/BAT0 && ! -d /sys/class/power_supply/BAT1 ]] && sed -i '/^modules-right/s/ battery//' ~/.config/polybar/config.ini
	printf "%s copied from the Gitea Server.\n" "$polybar_dir/$pb_cfg"
}

copy_polybar_launch() {
	local pbl_script="$1"
	local pbl_dir="$HOME/.local/bin"
	local repo_path="i3debian/raw/branch/main/.local/bin"
	[[ -f "$pbl_dir/$pbl_script" ]] && cp -pv "$pbl_dir/$pbl_script" "$pbl_dir/$pbl_script".bak
	curl -so "$pbl_dir/$pbl_script" "$Gitea_URL/$repo_path/$pbl_script"
	printf "%s copied from the Gitea Server.\n" "$pbl_dir/$pbl_script"
}

check_sxhkd() {
	[[ -d "$HOME/.config/i3/sxhkd" ]] || mkdir -p "$HOME/.config/i3/sxhkd"
}

copy_rofi_config() {
	local rofi_dir="$HOME/.config/rofi"
	local repo_path="i3debian/raw/branch/main/.config/rofi"
	local rofi_cfg="config.rasi"
	local dark_colors="arc_dark_colors.rasi"
	local trans_colors="arc_dark_transparent_colors.rasi"
	[[ -d "$rofi_dir" ]] || mkdir -p "$rofi_dir"
	curl -so "$rofi_dir/$rofi_cfg" "$Gitea_URL/$repo_path/$rofi_cfg"
	curl -so "$rofi_dir/$dark_colors" "$Gitea_URL/$repo_path/$dark_colors"
	curl -so "$rofi_dir/$trans_colors" "$Gitea_URL/$repo_path/$trans_colors"
	printf "Rofi configuration files copied from the Gietea Server.\n"
}

copy_dunst_config() {
	local dunst_cfg="dunstrc"
	local dunst_dir="$HOME/.config/dunst"
	local repo_path="i3debian/raw/branch/main/.config/dunst"
	[[ -d "$dunst_dir" ]] || mkdir -p "$dunst_dir"
	curl -so "$rofi_dir/$dunst_cfg" "$Gitea_URL/$repo_path/$dunst_cfg"
	printf "%s copied from the Gietea Server.\n" "$dunst_cfg"
}

copy_dmconf() {
	local dm_script="dmconf.sh"
	local bin_dir="$HOME/.local/bin"
	local repo_path="i3debian/raw/branch/main/.local/bin"
	curl -so "$bin_dir/$dm_script" "$Gitea_URL/$repo_path/$dm_script"
	printf "%s copied from the Gitea Server.\n" "$dm_script"
}

## Execution ##

# is_bookworm || 	die "Unsupported Debian installation." 1

if exists i3; then
	printf "i3wm is installed.\n"
	sleep 2
	printf '\e[A\e[K'
	check_package curl
else
	printf "i3wm is not installed.\n"
	help 0
fi
noOpt=1
optstr=":abcdehklprsw"
while getopts "$optstr" opt; do
	case "$opt" in
		a )
			copy_config_file "autostart.sh"
		;;
		b )
			copy_polybar_config "config.ini"
		;;
		c )
			copy_config_file "config"
		;;
		d )
			copy_dunst_config
		;;
		e )
			copy_config_file "config"
			copy_config_file "sxhkd/sxhkdrc"
			copy_config_file "workspaces.conf"
			copy_config_file "autostart.sh"
			copy_config_file "logout"
			copy_dmconf
			copy_config_file "bindings.list"
			copy_dunst_config
			copy_polybar_config "config.ini"
			copy_polybar_launch "polybar-i3"
			copy_rofi_config
		;;
		h )
			help 0
		;;
		k )
			copy_config_file "bindings.list"
		;;
		l )
			copy_config_file "logout"
		;;
		p )
			copy_polybar_launch "polybar-i3"
			copy_dmconf
		;;
		r )
			copy_rofi_config
		;;
		s )
			copy_config_file "sxhkd/sxhkdrc"
		;;
		w )
			copy_config_file "workspaces.conf"
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
exit
