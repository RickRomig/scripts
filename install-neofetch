#!/usr/bin/env bash
##########################################################################
# Script Name  : install-neofetch
# Description  : Installs and configures neofetch
# Dependencies : none
# Arguments    : -c -h -i -r (See the help function for details.)
# Author       : Copyright (C) 2022, Richard B. Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 25 Jul 2022
# Updated      : 02 Oct 2024
# Comments     : NeoFetch is no longer in development. Rrecommnd Fastfetch.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

script=$(basename "$0"); readonly script
readonly version="1.13.24276"
readonly neofetch_cfg_d="${HOME}/.config/neofetch"

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="02 Oct 2024"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs/Configures/Removes Neofetch

${green}Usage:${normal} $script [OPTION]
${orange}Available options:${normal}
  -c  Apply Neofetch configuration
  -h  Display help
  -i  Install and configure Neofetch
  -r  Remove Neofetch and configuration
_HELP_
  exit "$errcode"
}

neofetch_version() {
	/usr/bin/neofetch --version | cut -d' ' -f2
	# dpkg -l neofetch | awk '/ii/ {print $3}' | sed 's/[~+-].*//'
}

install_neofetch() {
	local thumbnail_dir="${HOME}/.cache/thumbnails/neofetch"
	printf "%s Neofetch is no longer in developemnt as of 26 April 2024.\n" "$RED_WARNING"
	sudo apt-get updates >/dev/null
	sudo apt-get install -yy neofetch
	apply_config
	[[ -d "$thumbnail_dir" ]] || mkdir -p "$thumbnail_dir"
	printf "Neofetch %s installed.\n" "$(neofetch_version)"
}

apply_config() {
	local localip repository cfg_conf
	localip=$(local_ip)
	cfg_conf="config.conf"
	[[ -d "$neofetch_cfg_d" ]] || mkdir -p "$neofetch_cfg_d"
  printf "Appying %s ...\n" "$cfg_conf"
	if [[ "$localip" == "16" ]]; then
    repository="$HOME/gitea/configs/neofetch"
    cp -v "$repository/$cfg_conf" "$neofetch_cfg_d/"
  else
		respository="configs/raw/branch/main/neofetch"
		curl -so "$neofetch_cfg_d/$cfg_conf" "$Gitea_URL/$respository/$cfg_conf"
	fi
	printf "Neofetch configuration applied.\n"
}

remove_neofetch() {
	local cfg_bu_dir="${HOME}/.config/backup/neofetch"
	printf "Removing Neofetch %s...\n" "$(neofetch_version)"
	sudo apt-get purge -yy neofetch
	[[ -d "$neofetch_cfg_d" ]] && rm -rf "$neofetch_cfg_d"
	[[ -d "$cfg_bu_dir" ]] && rm -rf "$cfg_bu_dir"
	printf "Neofetch and configuration files removed.\n"
	sed -i '/neofetch/Id' "$HOME/.bashrc"
}

main() {
  local noOpt opt optstr
	noOpt=1
	optstr=":chir"
	while getopts "$optstr" opt; do
		case "$opt" in
			c )
				exists neofetch || leave "Neofetch is not installed."
				apply_config
			;;
			h )
				help 0
			;;
			i )
				exists neofetch && leave "Neofetch $(neofetch_version) is already installed."
				in_repo neofetch || leave "Neofetch is no longer in the repositories."
				sudo_login 2
				install_neofetch
			;;
			r )
				exists neofetch || leave "Neofetch is not installed."
				sudo_login 2
				remove_neofetch
			;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	leave "$script v$version"
}

## Execution ##

main "$@"
