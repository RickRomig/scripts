#!/usr/bin/env bash
##########################################################################
# Script Name  : install-neofetch
# Description  : Installs and configures neofetch
# Dependencies : git
# Arguments    : -c -h -i -r (See the help function for details.)
# Author       : Copyright (C) 2022, Richard B. Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 25 Jul 2022
# Updated      : 10 May 2024
# Comments     : NeoFetch is no longer in development. Rrecommnd Fastfetch.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="1.11.24131"
readonly _updated="10 May 2024"
readonly neofetch_cfg_d="${HOME}/.config/neofetch"

## Functions ##

help() {
  local errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-c	Apply Neofetch configuration
	-h	Display help
	-i	Install and configure Neofetch
	-r	Remove Neofetch and configuration
END_HELP
	printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

install_neofetch() {
	local thumbnail_dir="${HOME}/.cache/thumbnails/neofetch"
	printf "%s Neofetch is no longer in developemnt as of 26 April 2024.\n" "$red_warning"
	sudo apt-get updates >/dev/null
	sudo apt-get install -yy neofetch
	apply_config
	[[ -d "$thumbnail_dir" ]] || mkdir -p "$thumbnail_dir"
	printf "Neofetch %s installed.\n" "$(neofetch_version)"
}

apply_config() {
	local respository="configs/raw/branch/main/neofetch"
	local cfg_conf="config.conf"
	[[ -d "$neofetch_cfg_d" ]] || mkdir -p "$neofetch_cfg_d"
	curl -so "$neofetch_cfg_d/$cfg_conf" "$Gitea_URL/$respository/$cfg_conf"
	printf "Neofetch configuration applied.\n"
}

remove_neofetch() {
	local cfg_bu_dir="${HOME}/.config/backup/neofetch"
	printf "Removing Neofetch %s...\n" "$(neofetch_version)"
	sudo apt-get purge -yy neofetch
	[[ -d "$neofetch_cfg_d" ]] && rm -rf "$neofetch_cfg_d"
	[[ -d "$cfg_bu_dir" ]] && rm -rf "$cfg_bu_dir"
	printf "Neofetch and configuration files removed.\n"
}

neofetch_version() {
	neofetch --version | cut -d' ' -f2
}

## Execution ##

printf "Install/Remove Neofetch or apply configuration\n"

noOpt=1
optstr=":chir"
while getopts "$optstr" opt; do
	case "$opt" in
		c )
			exists neofetch || leave "Neofetch is not installed."
      check_package git
			apply_config
		;;
		h )
			help 0
		;;
		i )
			exists neofetch && leave " Neofetch $(neofetch_version) is already installed."
			sudo_login 2
      check_package git
			install_neofetch
		;;
		r )
			exists neofetch || leave "Neofetch is not installed."
			sudo_login 2
			remove_neofetch
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
leave "$_script v$_version"
