#!/usr/bin/env bash
##########################################################################
# Script Name  : odt-to-txt
# Description  : Convert .odt files to .txt or .md files
# Dependencies : odt2txt fzf
# Arguments    : None
# Author       : Copyright (C) 2019, Richard B. Romig, MosfaNet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 10 May 2019
# Updated      : 19 Jul 2024
# Comments     : Run from a directory containing .odt files to be converted.
#              : Leaves orginial .odt files intact.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi
## Functions ##

check_dependencies() {
  local packages=(fzf odt2txt)
  check_packages "${packages[@]}"
}

convert2txt() {
  local odt_file=$1
  local txt_file="${odt_file%%.*}.txt"
  /usr/bin/odt2txt "$odt_file" > "$txt_file"
  echo "$odt_file -> $txt_file"
}

convert2md() {
  local odt_file=$1
  local md_file="${odt_file%%.*}.md"
  /usr/bin/odt2txt "$odt_file" > "$md_file"
  echo "$odt_file -> $md_file"
}

find_odt_files() {
  local num_files
  num_files=$(find . -maxdepth 1 -type f -iname "*.odt" | wc -l)
  if (( num_files > 0 )); then
    printf ".odt filse in %s:\n\n" "$PWD"
    find ./ -maxdepth 1 -type f -name "*.odt" | sed 's/\.\///' | sort
  else
    die "No .odt files found."
  fi
}

select_odt_file() {
  local odt_file
  odt_file=$(find . -maxdepth 3 -type f -name "*.odt" | sed 's/\.\///' | sort -d | fzf --height 40% --reverse --prompt "Select the file to convert: ")
  echo "$odt_file"
}

main() {
  local options _opt ofile
  local script="${0##*/}"
  local version="3.0.25200"

  check_dependencies
  # Disable Crtl+C
  trap '' 2

  while true; do
    clear
    printf "Converts *.odt files to *.txt or *.md\n"
    under_line "${lightyellow}Use with care. May overwrite existing .txt or .md files.${normal}" "*"
    COLUMNS=12
    printf "\nAvailable operations:\n"
    options=(
      "Convert a single .odt file to .txt"
      "Convert a single .odt file to .md"
      "Convert all .odt files to .txt"
      "Convert all .odt files to .md"
      "Quit and exit"
    )
    PS3="Choose an option: "
    select _opt in "${options[@]}"; do
      case $REPLY in
        1 )
          ofile=$(select_odt_file)
          printf "Converting %s to text.\n" "$ofile"
          convert2txt "$ofile"
          anykey; break
          ;;
        2 )
          ofile=$(select_odt_file)
          printf "Converting %s to markdown.\n" "$ofile"
          convert2md "$ofile"
          anykey; break
          ;;
        3 )
          find_odt_files
          printf "Converting .odt files in %s to text...\n\n" "$PWD"
          for ofile in *.odt; do convert2txt "$ofile"; done
          anykey; break
          ;;
        4 )
          find_odt_files
          printf "Converting .odt files in %s to markdown...\n\n" "$PWD"
          for ofile in *.odt; do convert2md "$ofile"; done
          anykey; break
          ;;
        5 )
          trap 2
          printf "All done! Exiting the script.\n"
          over_line "$script v$version"
          exit
          ;;
        * )
          echo "${lightred}Invalid Option!${normal} Choose 1 - 5" >&2
      esac
    done
  done
}

## Execution ##

main "$@"
