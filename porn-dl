#!/usr/bin/env bash
###############################################################################
# Script Name  : porn-dl
# Description  : Download videos from porn sites with best quality
# Dependencies : yt-dlp fzf
# Arguments    : Video URL
# Author       : Copyright Â© 2019, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Apr 2019
# Updated      : 15 Oct 2024
# Comments     : match by regex, starts with http:// or https://
#              : Downloads videos to ~/Videos/Pornography/<category>
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi
 set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="3.0.24289"
readonly updated="15 Oct 2024"
readonly porn_dir=$HOME"/Videos/Pornography"

## Functions ##

display_title() {
  local site="$1"
  clear
  box "${site^} Download" "="
  echo "$script v$version"
}

help() {
  local errcode="${1:-2}"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Dowload videos from adult sites.

${green}Usage:${normal} $script [video_URL] [video_ID]
  ${darkgray}PornHub${normal}
  $script https://www.pornhub.com/view_video.php?viewkey=ph5ccfa07f0e2a6
  ${darkgray}RedTube${normal}
  $script https://redtube.com/5431551
  ${darkgray}SparkBang${normal}
  $script https://spankbang.com/35tlo/video/luana+lani+comp

${orange}Available options:${normal}
  -h | --help  displays these instructions.
  -i | --info  displays information about the script.
_HELP_
  exit "$errcode"
}

script_info() {
  cat << _INFO_
  $script uses yt-dlp to download videos from adult sites such as PornHub
  and RedTube. The video URL is passed to the script on the command line.
  The script will extract the name of the site for later use.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos/Pornography/. Select the category (subdirectory).

  The the video will be downloaded to the selected sub-directory  The script is
  hard-coded to save the file as title.ext. Spaces in the title will be replaced
  by underscores. Metadata will also be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $script [video-url]

  Version: $version
  Updated: $updated
_INFO_
  exit
}

check_dependencies() {
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
    check_package fzf
  else
    die "yt-dlp is not installed." 1
  fi
}

extract_domain() {
  local domain fullurl
  fullurl="$1"
  domain=$(echo "$fullurl" | sed 's|^[^/]*//||;s|^www\.||;s|/.*$||;s|\..*$||')
  echo "$domain"
}

select_directory() {
	local directory porn_dir
	porn_dir=$HOME"/Videos/Pornography"
	directory=$(find "$porn_dir" -type d | sort -d | fzf --height 60% --reverse --prompt "Select destination directory: ")
	printf "%s" "$directory"
}

download_video() {
  local site url destination
  url="$1"
  site="$2"
  display_title "$site"
	destination=$(select_directory)
  printf "\n%s%sDownloading video from %s to " "$bold" "$blue" "${site^}"
	printf "%s...%s\n" "$destination" "$normal"
	dl_2_video "$url" "$destination"
}

dl_2_video() {
  local url dest_dir
  url="$1"
  dest_dir="$2"
  printf "%s...%s\n"  "$porn_dir" "$normal"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$dest_dir/%(title)s.%(ext)s" "$url"
  then
    leave "Download successful."
  else
    ec="$?"
    die "Download failed. Error: $ec" "$ec"
  fi
}

main() {
  local site url
  # Check arguments, fetch URL and extract site name
  if [[ $# -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 2
  elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
    script_info
  elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help 2
  elif [[ "$1" =~ ^https?:\/\/.* ]]; then
    # match by regex, starts with http:// or https://
    url=$*
    # Extract domain without www and .com
    site=$(extract_domain "$url")
    check_dependencies
    download_video "$url" "$site"
  else
    die "Invalid argument. Enter full URL." 1
  fi
}

## Execution ##

main "$@"
