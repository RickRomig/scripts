#!/usr/bin/env bash
###############################################################################
# Script Name  : porn-dl
# Description  : Download videos from porn sites with best quality
# Dependencies : yt-dlp
# Arguments    : Video URL
# Author       : Copyright Â© 2019, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 April 2019
# Updated      : 18 Aug 2024
# Comments     : match by regex, starts with http:// or https:// or by ID number
#              : Downloads videos to ~/Videos/Pornography/<category>
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="2.2.24231"
readonly _updated="18 Aug 2024"
readonly porn_dir=$HOME"/Videos/Pornography"

## Functions ##

display_title() {
  clear
  box "Porn Site Download" "="
  echo "$_script v$_version"
}

help() {
  local errcode="${1:-2}"
  cat << END_HELP
${orange}$_script${normal} $_version ($_updated)
Dowload videos from adult sites.

${green}Usage:${normal} $_script [video_URL] [video_ID]
  ${darkgray}PornHub${normal}
  $_script https://www.pornhub.com/view_video.php?viewkey=ph5ccfa07f0e2a6
  ${darkgray}RedTube${normal}
  $_script https://redtube.com/5431551
  ${darkgray}SparkBang${normal}
  $_script https://spankbang.com/35tlo/video/luana+lani+comp

${orange}Available options:${normal}
  -h | --help  displays these instructions.
  -i | --info  displays information about the script.
END_HELP
  exit "$errcode"
}

script_info() {
  cat <<- END_INFO
  $_script uses yt-dlp to download videos from adult sites such as PornHub
  and RedTube. The video URL is passed to the script on the command line.
  The script will extract the name of the site for later use.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos/Pornography/. Select the category (subdirectory).

  The the video will be downloaded to the selected sub-directory  The script is
  hard-coded to save the file as title.ext. Spaces in the title will be replaced
  by underscores. Metadata will also be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $_script [video-url]
    $_script [video-ID]

  Version: $_version
  Updated: $_updated
END_INFO
  exit
}

check_dependencies() {
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
  else
    die "yt-dlp is not installed." 1
  fi
}

extract_domain() {
  local domain fullurl # sitename
  fullurl="$1"
  domain=$(echo "$fullurl" | sed 's|^[^/]*//||;s|^www\.||;s|/.*$||;s|\..*$||')
  # domain=${domain%%.*}
  # sitename="${domain^}"
  echo "$domain"
}

choose_destination() {
	local sub_dir _opt options
	COLUMNS=40
  options=("Anal" "Asian" "Bi Gay Trans" "Full movies" "Kink" \
  "Masturbation" "Miscellaneous" "Oral" "Pinay" "Straight" "No category")
  PS3="Choose category: "
  select _opt in "${options[@]}"; do
    case "$REPLY" in
      1 ) sub_dir="Anal"; break ;;
      2 ) sub_dir="Asian"; break ;;
      3 ) sub_dir="Bi-gay-trans"; break ;;
      4 ) sub_dir="Full-movies"; break ;;
      5 ) sub_dir="Kink"; break ;;
      6 ) sub_dir="Masturbation"; break ;;
      7 ) sub_dir="Misc"; break ;;
      8 ) sub_dir="Oral"; break ;;
      9 ) sub_dir="Pinay"; break ;;
      10 ) sub_dir="Straight"; break ;;
      11 ) sub_dir="none"; break ;;
    esac
  done
  echo "$sub_dir"
}

dl_2_video() {
  printf "%s...%s\n"  "$porn_dir" "$normal"
  # if /usr/local/bin/yt-dlp -f "bv*+ba/b" --add-metadata -ic --restrict-filename -o "$porn_dir/%(title)s.%(ext)s" "$url"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$porn_dir/%(title)s.%(ext)s" "$url"
  then
    leave "Download successful."
  else
    ec="$?"
    die "Download failed. Error: $ec" "$ec"
  fi
}

dl_2_subdir() {
	local dest_dir="$1"
  [[ -d "$porn_dir/$dest_dir" ]] || mkdir -p "$porn_dir/$dest_dir"
	printf "%s...%s\n"  "$porn_dir/$dest_dir" "$normal"
  # if /usr/local/bin/yt-dlp -f "bv*+ba/b" --add-metadata -ic --restrict-filename -o "$porn_dir/$subdir/%(title)s.%(ext)s" "$url"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$porn_dir/$dest_dir/%(title)s.%(ext)s" "$url"
  then
    leave "Download successful."
  else
    ec="$?"
    die "Download failed. Error: $ec" "$ec"
  fi
}

## Execution ##

# Check arguments, fetch URL and extract site name

if [[ $# -eq 0 ]]; then
  echo "${lightred}Error:${normal} No argument passed." >&2
  help 2
elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
  script_info
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
  help 2
elif [[ "$1" =~ ^https?:\/\/.* ]]; then
  # match by regex, starts with http:// or https://
  url=$*
  # Extract domain without www and .com
  site=$(extract_domain "$url")
else
  die "Invalid argument. Enter full URL." 1 >&2
fi

check_dependencies
display_title

# Choose the download folder
subdir=$(choose_destination)

# Download video to selected folder
printf "\n%s%sDownloading video from %s to " "$bold" "$blue" "${site^}"
case "$subdir" in
  "none" ) dl_2_video;;
  * ) dl_2_subdir "$subdir"
esac
