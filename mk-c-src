#!/usr/bin/env bash
###############################################################################
# Script Name  : mk-c-src
# Description  : create C source file from template
# Dependencies : sed
# Arguments    : new C source file
# Author       : Richard Romig
# Email        : rick.romig@gmail.com
# Comment      : C template includes GNU GPL v2 license
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.0.6"
readonly _updated="16 Oct 2023"
readonly conf_dir="$HOME/.config/scripts"
readonly conf_file="$_script.conf"
today=$(date +"%d %b %Y"); readonly today
cur_yr=$(echo -e "\UA9 $(date +%Y)"); readonly cur_yr

# Data to insert into new bash script
# template directory, copy_holder, email_addr, email_addr1, coder, license contained in script's .conf file.

## Functions ##

create_conf() {
  [[ -d "$conf_dir" ]] || mkdir -p "$conf_dir"
  echo "Complete all fields"
  read -rp "Full name: " copy_holder
  read -rp "Primary email: " email_addr
  read -rp "Alternate email: " email_addr1
  read -rp "Organization: " work_org
  read -rp "Template diretory (full path): " template_dir

  echo "
  copy_holder='$copy_holder'
  email_addr='$email_addr'
  email_addr1='$email_addr1'
  work_org='$work_org'
  template_dir='$template_dir'
  " > "$conf_dir/$conf_file"
}

usage() {
  local errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -c  C code
      $_script -c <filename>
  -e  Edit $_script.conf
  -p  C++ code  
      $_script -p <filename>
  -u  Usage instructions
  -v  Enable verbose mode
$_script $_version ($_updated)
END_HELP
  exit "$errcode"
}

show_me() {
	local message="$1"
	[[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

## Execution ##

printf "%s v%s (Updated: %s)\n" "$_script" "$_version" "$_updated"

noOpt=1
optstr=":c:ep:uv"
while getopts "$optstr" opt; do
	case "$opt" in
		c )
			filename="$OPTARG"
			[[ -f "$filename" ]] && { printf "%s %s already exists\n" "$red_error" "$filename" >&2; usage 2; }
			template_file="c-template"
		;;
		e )
      if [[ -f "$conf_dir/$conf_file" ]]; then
        micro "$conf_dir/$conf_file"
			  show_me "$conf_file edited."
      else
        create_conf
      fi
		;;
		p )
			filename="$OPTARG"
			[[ -f "$filename" ]] && { printf "%s %s already exists\n" "$red_error" "$filename" >&2; usage 2; }
			template_file="cpp-getopts"
		;;
		u )
			usage 0
		;;
		v )
			verbose_mode="$TRUE"
			show_me "Verbose mode enabled."
		;;
    : )
      printf "%s Must supply an argument to -%s.\n" "$red_error" "$OPTARG" >&2
      usage 2
    ;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			usage 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; usage 1; }
shift "$(( OPTIND - 1 ))"

[[ -z "$filename" ]] && leave "No source code file created."

## Source script configuration file ##

[[ -f "$conf_dir/$conf_file" ]] || create_conf
show_me "Sourcing $conf_file."
source "$conf_dir/$conf_file"

printf "Creating C/C++ source code file: %s\n" "$filename"

# Fill in the placeholders and create the source file
show_me "Filling in the template and creating the source code."
sed -e '1d' \
    -e "s/<PROGNAME>/$filename/" \
    -e "s/<YEAR>/$cur_yr/" \
    -e "s/<AUTHOR>/$copy_holder/" \
    -e "s/<ORG>/$work_org/" \
    -e "s/<EMAIL>/$email_addr/" \
    -e "s/<EMAIL1>/$email_addr1/" \
    -e "s/<TODAY>/$today/"  "$template_dir/$template_file" > "$filename"

printf "%s has been created.\n" "$filename"

edit_view_quit "$filename"

printf "\n"
leave ""
