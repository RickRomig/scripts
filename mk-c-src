#!/usr/bin/env bash
###############################################################################
# Script Name  : mk-c-src
# Description  : create C source file from template
# Dependencies : sed
# Arguments    : new C source file
# Author       : Richard Romig
# Email        : rick.romig@gmail.com
# Comment      : C template includes GNU GPL v2 license
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

readonly _script=$(basename "$0")
readonly _version="3.0.0"
readonly _updated="23 Nov 2022"
readonly config_dir="$HOME/.config/scripts"
readonly config_file="$_script.conf"
readonly today=$(date +"%d %B %Y")
readonly cur_yr=$(date +%Y)

# Data to insert into new bash script
# template directory, copy_holder, email_addr, email_addr1, coder, license contained in script's .conf file.

## Functions ##

create_config() {
  [[ -d "$config_dir" ]] || mkdir -p "$config_dir"
  echo "Complete all fields"
  read -rp "Full name: " copy_holder
  read -rp "Primary email: " email_addr
  read -rp "Alternate email: " email_addr1
  read -rp "Template diretory (full path): " template_dir

  echo "
  copy_holder='$copy_holder'
  email_addr='$email_addr'
  email_addr1='$email_addr1'
  template_dir='$template_dir'
  " > "$config_dir/$config_file"
}

usage() {
  local errcode="${1:-2}"
  echo "${orange}Usage:${normal} $_script <source_file>"
  echo "${orange}Example:${normal} $_script my-source.c"
  exit "$errcode"
}

## Source script configuration file ##

[[ -f "$config_dir/$config_file" ]] || create_config
source "$config_dir/$config_file"

## Check arguments ##

if [[ $# -eq 0 ]]; then
  echo "${lightred}Error:${normal} No argment passed." >&2
  usage 2
elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
  echo "$_script v$_version ($_updated)"
  usage 0
elif [[ -f "$1" ]]; then
  echo "${lightred}Error:${normal} $1 already exists." >&2
  usage 2
else
  filename=$1
fi

## Execution ##

echo "$_script v$_version ($_updated)"
echo "Creating $FILE C/C++ source code file."

COLUMNS=40
echo "Which code template are you using?"
PS3="Choice: "
select opt in "C code" "C++ code"
do
  case "$REPLY" in
    1 ) template_file="c-template"; break ;;
    2 ) template_file="cpp-template"; break ;;
    * ) echo "${lightred}Invalid choice.${normal} 1 = C code 2 = C++ code" >&2 ;;
  esac
done

# Fill in the placeholders and create the source file

sed -e '1d' \
    -e "s/<PROGNAME>/$filename/" \
    -e "s/<YEAR>/$cur_yr/" \
    -e "s/<AUTHOR>/$copy_holder/" \
    -e "s/<EMAIL>/$email_addr/" \
    -e "s/<EMAIL1>/$email_addr1/" \
    -e "s/<TODAY>/$today/"  "$template_dir/$template_file" > "$filename"

echo "$filename has been created."
edit_view_quit "$filename"

leave ""
