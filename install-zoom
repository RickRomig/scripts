#!/usr/bin/env bash
##########################################################################
# Script Name  : install-zoom
# Description  : Install/Remove/Update Zoom (Flatpak or deb package)
# Dependencies : gdebi wget
# Arguments    : See help function
# Author       : Copyright (C) 2022, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 10 Nov 2022
# Updated      : 14 Oct 2024
# Comments     :
# TODO (Rick)  : needs to be tested.
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="4.1.24288"

## Functions ##

check_dependencies() {
	local packages=( gdebi wget )
	check_packages "${packages[@]}"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="14 Oct 2024"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Installs or removes the Zoom video conferencing software.

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -d  Install Zoom (deb package)
  -f  Install Zoom (Flatpak from Flathub)
  -h  Display help
  -r  Remove Zoom (deb or flatpak)
  -u  Update Zoom (deb package)
_HELP_
  exit "$errcode"
}

zoom_version() {
	local zoom_ver
	if exist zoom; then
		zoom_ver=$(dpkg -l zoom | awk '/ii/ {print $3}') # $(cat /opt/zoom/version.txt)
	elif flatpak list | grep -qw Zoom; then
		zoom_ver=$(flatpak list | awk '/Zoom/ {print $(NF-2)}')
	fi
	printf "%s" "$zoom_ver"
}

# zoom_deb_ver() {
# 	dpkg -l zoom | awk '/ii/ {print $3}'
# }

# zoom_flat_ver() {
# 	flatpak list | awk '/Zoom/ {print $(NF-2)}'
# }

is_zoom_flatpak() {
  exists flatpak || return "$FALSE"
  flatpak list | grep -qw Zoom && return "$TRUE" || return "$FALSE"
}

install_zoom_deb() {
	local url pkg
	url="$1"
	pkg="$2"
	printf "Dowloading Zoom ..."
  dots "."
	wget -q -P "$tmp_dir" "$url/$pkg"
  kill "$!"
	printf "done\nInstalling the latest version of Zoom...\n"
	tput cnorm
	sudo gdebi -n "$tmp_dir/$pkg"
	sudo apt-get install -f
	printf "Zoom %s is installed.\n" "$(zoom_version)"
}

install_zoom_flatpak() {
	sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	flatpak install flathub us.zoom.Zoom
	printf "Zoom %s installed from Flathub.\n" "$(zoom_version)"
}

update_zoom_deb() {
	local url pkg cur_ver new_ver
	url="$1"
	pkg="$2"
	cur_ver=$(cat /opt/zoom/version.txt)	# $(zoom_version)
	printf "Installed: %s\n" "$cur_ver"
	# new_ver=$(wget --spider https://zoom.us/client/latest/zoom_amd64.deb 2>&1 | grep Location | sed -e 's/.*prod\/\(.*\)\/.*/\1/')
	new_ver=$(wget --spider "$url/$pkg" 2>&1 | grep Location | sed -e 's/.*prod\/\(.*\)\/.*/\1/')
	if [[ "$cur_ver" != "$new_ver" ]]; then
		wget -q -P "$tmp_dir" "$url/$pkg"
		sudo gdebi -n "$tmp_dir/$pkg"
		printf "Zoom upgraded to version %s.\n" "$(cat /opt/zoom/version.txt)"	# "$(zoom_version)"
	else
		printf "Zoom %s is the current version. No update required.\n" "$cur_ver"
	fi
}

remove_zoom() {
	printf "Removing Zoom ...\n"
	exists zoom	&& sudo apt-get remove --purge zoom -yy
	is_zoom_flatpak && flatpak uninstall --noninteractive --assumeyes  us.zoom.Zoom
	printf "Zoom has been removed.\n"
}

webcam_info() {
	if /usr/bin/lsusb | grep -qw Webcam; then
		printf "Attached webcam(s):\n"
		/usr/bin/lsusb | grep -w Webcam | cut -d' ' -f7-
	else
		printf "No webcam attached.\n"
	fi
}

main() {
  local noOpt opt optstr package zoom_url
	package="zoom_amd64.deb"
	zoom_url="https://zoom.us/client/latest"
	noOpt=1
	optstr=":dfhru"
	while getopts "$optstr" opt; do
		case "$opt" in
			d )
				is_zoom_flatpak && leave "Zoom $(zoom_version) is installed, Installatiion canceled."
				exists zoom && printf "Zoom %s is installed. Updating package.\n" "$(zoom_version)"
				webcam_info
				tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
				trap cleanup EXIT
				sudo_login 2
				check_dependencies
				webcam_info
				install_zoom_deb "$zoom_url" "$package"
			;;
			f )
				exists flatpak || leave "Flatpak is not installed. Installatiion canceled."
				is_zoom_flatpak && leave "Zoom $(zoom_version) is already installed."
				exists zoom && remove_zoom
				webcam_info
				install_zoom_flatpak
			;;
			h )
				help 0
			;;
			r )
				if exists zoom || is_zoom_flatpak; then
					sudo_login 2
					remove_zoom
				else
					printf "Zoom is not installed.\n"
				fi
			;;
			u )
				is_zoom_flatpak && leave "Flatpak version of Zoom is installed."
				exists zoom || leave "Zoom is not installed."
				update_zoom_deb "$zoom_url" "$package"
			;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script v$version"
	exit
}

## Execution ##

main "$@"
