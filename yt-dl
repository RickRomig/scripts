#!/usr/bin/env bash
###############################################################################
# Script Name  : yt-dl
# Description  : Download videos from YouTube.com with best quality
# Dependencies : yt-dlp fzf ffmpeg
# Arguments    : Video URL or ID number
# Author       : Copyright Â© 2019, Richard B. Romig, 05 April 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 Apr 2019
# Updated      : 23 Mar 2025
# Comments     : Accepts both full URLs and video id's such as AQcQgfvfF1M
#              : Downloads to selected directory under ~/Videos/
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="7.0.25082"
readonly updated="123 Mar 2025"
FMENU="fzf --header=$(basename "$0") \
           --layout=reverse \
           --exact \
           --border=bold \
           --border=rounded \
           --margin=5% \
           --color=dark \
           --height=95% \
           --info=hidden \
           --header-first \
           --bind change:top \
           --prompt"
ec=0

## Functions ##

help() {
  local errcode="${1:-2}"
  cat << _HELP_
${orange}$script${normal} $version ($updated)
Downloads YouTube videos.

${green}Usage:${normal} $script [YouTube_URL] [video_ID]
  $script https://www.youtube.com/watch?v=/AQcQgfvfF1M
  $script AQcQgfvfF1M

${orange}Available options:${normal}
  -h | --help  displays these instructions.
  -i | --info  displays information about the script.
_HELP_
  exit "$errcode"
}

script_info() {
  cat << _INFO_
  $script uses yt-dlp to download videos from YouTube and similar sites.
  The video URL or ID is passed to the script on the command line. The default
  URL is https://www.youtube.com if only the video ID is passed to the script.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos. Select the category (subdirectory).
  Selecting the 'no category' option downloads the video to ~/Videos.

  The video will be downloaded to the selected sub-directory.  The script is
  hard-coded to save the file as title.ext with spaces in the title replaced
  by underscores. Metadata will be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $script <video-url>
    $script <video-ID>

  Version: $version
  Updated: $updated
_INFO_
  exit
}

check_dependencies() {
  local packages=(ffmpeg fzf)
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
    printf '\e[A\e[K'
    check_packages "${packages[@]}"
  else
    die "yt-dlp is not installed." 1
  fi
}

extract_domain() {
  local domain fullurl
  fullurl="$1"
  domain=$(echo "$fullurl" | sed 's|^[^/]*//||;s|^www\.||;s|/.*$||;s|\..*$||')
  printf "%s" "$domain"
}

select_directory() {
	local video_dir vid_d selected_directory
	video_dir=$HOME"/Videos"
  local directories=()
  for vid_d in $video_dir; do
    [[ -d "$vid_d" ]] && directories+=("$(find "$video_dir" -path "$video_dir/Pornography" -prune -o -type d | sort -d)")
  done
  selected_directory=$($FMENU "Select destination directory: " < <(printf "%s\n" "${directories[@]}"))
	printf "%s" "$selected_directory"
}

download_video() {
  local site url destination
  url="$1"
  site="$2"
  clear
	destination=$(select_directory)
  box "${site^} Download" "="
  printf "\n%s%sDownloading video from %s to " "$bold" "$blue" "${site^}"
	printf "%s...%s\n" "$destination" "$normal"
  if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$destination/%(title)s.%(ext)s" "$url"
  then
    printf "Download successful.\n"
  else
    ec="$?"
    printf "Download failed. Error: %d\n" "$ec"
  fi
}

main() {
  local url
  # Check arguments and fetch URL
  if [[  $# -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 2
  elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
    script_info
  elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help 0
  elif [[ "$1" =~ ^https?:\/\/.* ]]; then
    # match by regex, starts with http:// or https://
    url=$*
  else
    # match by YouTube video ID
    url="https://www.youtube.com/watch?v=$*"
  fi
  check_dependencies
  site=$(extract_domain "$url")
  download_video "$url" "$site"
  over_line "$script $version"
  exit "$ec"
}

## Execution ##

main "$@"
