#!/usr/bin/env bash
###############################################################################
# Script Name  : yt-dl
# Description  : Download videos from YouTube.com with best quality
# Dependencies : yt-dlp
# Arguments    : Video URL or ID number
# Author       : Copyright Â© 2019, Richard B. Romig, 05 April 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments      : Accept both full URLs and video id's such as AQcQgfvfF1M
#              : Downloads to ~/Videos/sub-directory
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="2.3.5"
readonly _updated="14 Feb 2024"
readonly video_dir=$HOME"/Videos"

## Functions ##

display_title() {
  clear
  box "YouTube Download" "="
  echo "$_script v$_version ($_updated)"
}

usage() {
  local errcode="${1:-2}"
  cat <<- EOF
  Usage: $_script [video-url] [video-ID]
  $_script https://www.youtube.com/watch?v=/AQcQgfvfF1M
  $_script AQcQgfvfF1M

  -h or --help will display these instructions.
  -i or --info will display information about the script.
EOF
  exit "$errcode"
}

script_info() {
  cat <<- EOF
  $_script uses yt-dlp to download videos from YouTube and similar sites.
  The video URL or ID is passed to the script on the command line.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos/Pornography/. Select the category (subdirectory).
  The the video will be downloaded to the selected sub-directory  The script is
  hard-coded to save the file as title.ext. Spaces in the title will be replaced
  by underscores. Metadata will also be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $_script [video-url]
    $_script [video-ID]

  Version: $_version
  Updated: $_updated
EOF
  exit
}

check_dependencies() {
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
  else
    die "yt-dlp is not installed." 1
  fi
}

## Execution ##

check_dependencies

display_title

# Check arguments and fetch URL

if [[ -z "$1" ]]; then
  echo "${bold}${lightred}Error:${normal} No argument passed." >&2
  usage 2
elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
  script_info
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
  usage 0
elif [[ "$1" =~ ^https?:\/\/.* ]]; then
  # match by regex, starts with http:// or https://
  # \/ in regex will be seen as / in this context
  url=$*
else
  # match by video ID
  url="https://www.youtube.com/watch?v=$*"
fi

# Choose the download folder

echo $'\n'$"${bold}${blue}Available directories:${normal}"
COLUMNS=40
options=("Automotive" "Band" "Comedy" "History" "Movies" "Music" "Naturism" \
 "Philippines" "Religion" "Sayaw FilipinOH" "Tech-Computers" "Yoga")
PS3="Choose a download folder: "
select opt in "${options[@]}"; do
  case "$REPLY" in
    1 ) subdir="automotive"; break ;;
    2 ) subdir="Band"; break ;;
    3 ) subdir="Comedy"; break ;;
    4 ) subdir="History"; break ;;
    5 ) subdir="Movies"; break ;;
    6 ) subdir="Music"; break ;;
    7 ) subdir="Naturism"; break ;;
    8 ) subdir="Philippines"; break ;;
    9 ) subdir="Religion"; break ;;
    10 ) subdir="Sayaw_FilipinOH"; break ;;
    11 ) subdir="Tech"; break ;;
    12 ) subdir="Yoga"; break ;;
    * ) subdir="none"; break
  esac
done

# Download video to selected folder

echo $'\n'$"${bold}${blue}Downloading from YouTube ...${normal}"
case "$subdir" in
  "none" )
    if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$video_dir/%(title)s.%(ext)s" "$url"
    then
      leave "Download successful."
    else
      ec="$?"
      die "Download failed." "$ec"
    fi
    ;;
  * )
    if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$video_dir/$subdir/%(title)s.%(ext)s" "$url"
    then
      leave "Download successful."
    else
      ec="$?"
      die "Download failed." "$ec"
    fi
esac
