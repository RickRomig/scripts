#!/usr/bin/env bash
###############################################################################
# Script Name  : yt-dl
# Description  : Download videos from YouTube.com with best quality
# Dependencies : yt-dlp
# Arguments    : Video URL or ID number
# Author       : Copyright Â© 2019, Richard B. Romig, 05 April 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 05 April 2019
# Updated      : 08 Jun 2024
# Comments     : Accepts both full URLs and video id's such as AQcQgfvfF1M
#              : Downloads to ~/Videos/sub-directory
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.0.24160"
readonly _updated="08 Jun 2024"
readonly video_dir=$HOME"/Videos"

## Functions ##

display_title() {
  clear
  box "YouTube Download" "="
  echo "$_script v$_version"
}

help() {
  local errcode="${1:-2}"
  cat <<- END_HELP
  Usage: $_script [video-url] [video-ID]
  $_script https://www.youtube.com/watch?v=/AQcQgfvfF1M
  $_script AQcQgfvfF1M

  -h or --help will display these instructions.
  -i or --info will display information about the script.
$_script v$_version ($_updated)
END_HELP
  exit "$errcode"
}

script_info() {
  cat <<- END_INFO
  $_script uses yt-dlp to download videos from YouTube and similar sites.
  The video URL or ID is passed to the script on the command line. The default
  URL is https://www.youtube.com if only the video ID is passed to the script.

  The script will then present a menu of categories corresponding to
  subdirectories under ~/Videos. Select the category (subdirectory).
  Selecting the 'no category' option downloads the video to ~/Videos.

  The video will be downloaded to the selected sub-directory.  The script is
  hard-coded to save the file as title.ext with spaces in the title replaced
  by underscores. Metadata will be added to the file.

  When the download is completed, success or failure is displayed. If the
  download fails, the script exits with an error code.

  Usage:
    $_script <video-url>
    $_script <video-ID>

  Version: $_version
  Updated: $_updated
END_INFO
  exit
}

check_dependencies() {
  if [[ -x /usr/local/bin/yt-dlp ]]; then
    printf "yt-dlp [OK]\n"
    sleep 2
  else
    die "yt-dlp is not installed." 1
  fi
}

# shellcheck disable=SC2034
choose_destination() {
	local sub_dir opt options
	COLUMNS=40
	options=("Automotive" "Band" "Comedy" "History" "Movies" "Music" "Naturism" \
	 "Philippines" "Religion" "Sayaw FilipinOH" "Tech-Computers" "Yoga" "No category")
	PS3="Choose a category: "
	select opt in "${options[@]}"; do
	  case "$REPLY" in
	    1 ) sub_dir="automotive"; break ;;
	    2 ) sub_dir="Band"; break ;;
	    3 ) sub_dir="Comedy"; break ;;
	    4 ) sub_dir="History"; break ;;
	    5 ) sub_dir="Movies"; break ;;
	    6 ) sub_dir="Music"; break ;;
	    7 ) sub_dir="Naturism"; break ;;
	    8 ) sub_dir="Philippines"; break ;;
	    9 ) sub_dir="Projects"; break ;;
	    10 ) sub_dir="Religion"; break ;;
	    11 ) sub_dir="Sayaw_FilipinOH"; break ;;
	    12 ) sub_dir="Tech"; break ;;
	    13 ) sub_dir="Yoga"; break ;;
	    14 ) sub_dir="none"; break ;;
	  esac
	done
	echo "$sub_dir"
}

dl_2_video() {
	if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$video_dir/%(title)s.%(ext)s" "$url"
	then
		leave "Download successful."
	else
		ec="$?"
		die "Download failed." "$ec"
	fi
}

dl_2_subdir() {
	local dest_dir="$1"
	if /usr/local/bin/yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --add-metadata -ic --restrict-filename -o "$video_dir/$dest_dir/%(title)s.%(ext)s" "$url"
	then
		leave "Download successful."
	else
		ec="$?"
		die "Download failed." "$ec"
	fi
}

## Execution ##

check_dependencies

display_title

# Check arguments and fetch URL
if [[ -z "$1" ]]; then
  echo "${bold}${lightred}Error:${normal} No argument passed." >&2
  help 2
elif [[ "$1" == "--info" || "$1" == "-i" ]]; then
  script_info
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
  help 0
elif [[ "$1" =~ ^https?:\/\/.* ]]; then
  # match by regex, starts with http:// or https://
  url=$*
else
  # match by video ID
  url="https://www.youtube.com/watch?v=$*"
fi

# Choose the download folder
subdir=$(choose_destination)

# Download video to selected folder
echo $'\n'$"${bold}${blue}Downloading from YouTube ...${normal}"
case "$subdir" in
  "none" ) dl_2_video;;
  * ) dl_2_subdir "$subdir"
esac
