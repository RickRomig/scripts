#!/usr/bin/env bash
###############################################################################
# Script Name  : check-battery
# Description  : Determine the health of a laptop battery
# Dependencies : upower
# Arguments    : None
# Author       : Copyright (C) 2020, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Crated       : 30 Jul 2020
# Updated      : 16 Jul 2025
# Comments     : Obtains battery data from upower utility.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
  [[ -f "$battery_data" ]] && rm -f "$battery_data"
}

battery_status() {
  printf "\n%sBattery charge:%s\n" "$orange" "$normal"
  grep --color=never -E "state|to\ full|to\ empty|percentage" "$battery_data"
}

battery_capacity() {
  printf "\n%sBattery health:%s\n" "$orange" "$normal"
  grep --color=never -E "energy-full:|energy-full-design:|capacity:" "$battery_data"
}

warning_level() {
  local energy_design energy_actual
  energy_design=$(awk '/energy-full-design:/ {printf "%i", $2}' "$battery_data")
  energy_actual=$(awk '/energy-full:/ {printf "%i", $2}' "$battery_data")
  if [[ "$energy_actual" -eq 0 || "$energy_design" -eq 0 ]]; then
    echo "0"
  else
    awk '/capacity/ {printf "%i", $2}' "$battery_data"
  fi
}

battery_condition() {
  local warn warn_level
  warn_level="$(warning_level)"
  # warn_level="$?"
  if [[ "$warn_level" -le "0" ]]; then
    warn="\U1F4A9"
    printf "    %sReplace the battery!%s  %s\n" "$red" "$normal" "$warn"
  elif [[ "$warn_level" -le "35" ]]; then
    warn="\U1F622"
    printf "    %sThe battery should be replaced.%s  %s\n" "$red" "$normal" "$warn"
  elif [[ "$warn_level" -le "65" ]]; then
    warn="\U26A0\UFE0F"
    printf "    %sThe battery is getting weak.%s  %s\n" "$orange" "$normal" "$warn"
  else
    printf "    %sThe battery is in good condition.%s\n" "$green" "$normal"
  fi
}

battery_specs() {
  local battery_serial battery_tech
  battery_serial=$(awk -F: '/serial/ {print $NF}' "$battery_data" | awk '{$1=$1}1')
  [[ -z "$battery_serial" ]] && battery_serial="Not specified"
  battery_tech=$(awk -F: '/technology/ {print $NF}' "$battery_data" | awk '{$1=$1}1')
  [[ -z "$battery_tech" ]] && battery_tech="Unknown"
  printf "\n%sBattery Data:%s\n" "$orange" "$normal"
  printf "    %-21s%s\n" "Manufacturer:" "$(awk -F: '/vendor/ {print $NF}' "$battery_data" | awk '{$1=$1}1')"
  printf "    %-21s%s\n" "Nodel name:" "$(awk -F: '/model/ {print $NF}' "$battery_data" | awk '{$1=$1}1')"
  printf "    %-21s%s\n" "Serial number:" "$battery_serial"
  printf "    %-21s%s\n" "Technology:" "$battery_tech"
}

ac_status() {
  local status
  status=$(/usr/bin/upower -i "$(/usr/bin/upower -e | grep 'AC')" | awk '/online:/ {print $NF}')
  printf "\n%sAC Power:%s\n" "$orange" "$normal"
  printf "    Laptop is "
  [[ "$status" = "no" ]] && printf "not "
  printf "plugged in to AC power.\n"
}

hidpp_battery() {
  local hidpp_data
  printf "\n%sHID++ Battery:%s\n" "$orange" "$normal"
  if /usr/bin/upower -e | grep -q hidpp; then
    hidpp_data=$(/usr/bin/upower -i "$(/usr/bin/upower -e | grep hidpp)")
    printf "    Device: %s\n" "$(echo "$hidpp_data" | awk '/native-path/ {print $NF}')"
    printf "    %s:   " "$(echo "$hidpp_data" | awk '/model/ {print $NF}')"
    printf "%s\n" "$(echo "$hidpp_data" | awk '/percentage/ {print $NF}')"
  else
    printf "    No HID++ battery present.\n"
  fi
}

battery_check() {
  printf "%s%sBattery Information%s\n" "$bold" "$orange" "$normal"
  if [[ -d /proc/acpi/button/lid/ ]]; then
    if /usr/bin/upower -e | grep -q 'BAT'; then
      battery_data=$(mktemp) || die "Failed to create temporary file." 1
      trap cleanup EXIT
      /usr/bin/upower -i "$(/usr/bin/upower -e | grep BAT)" > "$battery_data"
      printf "\n%sBattery:%s %s\n" "$orange" "$normal" "$(awk '/native-path:/ {print $NF}' "$battery_data")"
      battery_status
      battery_capacity
      battery_condition
      battery_specs
    else
      printf "\n%sNo battery detected.%s\n" "$lightred" "$normal" >&2
    fi
    ac_status
    hidpp_battery
  else
    printf "\nThis system is not a laptop.\n" >&2
  fi
}

main() {
  local script="${0##*/}"
  local version="5.0.25197"
  clear
  check_package upower
  battery_check
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
