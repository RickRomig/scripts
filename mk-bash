#!/usr/bin/env bash
###############################################################################
# Script Name  : mk-bash
# Description  : Creates script file with header information
# Dependencies : bat, micro
# Arguments    : See usage function
# Author       : Copyright (C) 2023, Richard Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Creates the script in the current working directory.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="3.1.0"
readonly _updated="07 Oct 2023"
readonly conf_dir="$HOME/.config/scripts"
readonly conf_file="$_script.conf"
today=$(date +"%d %b %Y"); readonly today
cur_yr=$(echo -e "\UA9 $(date +%Y)"); readonly cur_yr

# Data to insert into new bash script
# template directory, copy_holder, email_addr, email_addr1, coder, license contained in script's .conf file.

## Functions ##

create_conf() {
  [[ -d "$conf_dir" ]] || mkdir -p "$conf_dir"
  printf "Complete all fields\n"
  read -rp "Full name: " copy_holder
  read -rp "Primary email: " email_addr
  read -rp "Alternate email: " email_addr1
  read -rp "Organization: " work_org
  read -rp "Coder name: " coder
  read -rp "License: " license
  read -rp "Template diretory (full path): " template_dir

  echo "
  copy_holder='$copy_holder'
  email_addr='$email_addr'
  email_addr1='$email_addr1'
  work_org='$work_org'
  coder='$coder'
  license='$license'
  template_dir='$template_dir'
  " > "$conf_dir/$conf_file"
}

usage() {
	local errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -b  Standard BASH script
      $_script -b <filename>
  -e  Edit $_script.conf
  -g  getopts BASH script <filename>
      $_script -g <filename>
  -u  Usage instructions
$_script $_version ($_updated)
END_HELP
  exit "$errcode"
}

## Execution ##

noOpt=1
optstr=":b:eg:u"
while getopts "$optstr" opt; do
	case "$opt" in
		b )
			filename="$OPTARG"
			[[ -f "$filename" ]] && { printf "%s %s already exists\n" "$red_error" "$filename" >&2; usage 2; }
			template_file="bash-template"
		;;
		e )
			micro "$conf_dir/$conf_file"
			printf "%s edited.\n" "$_script"
			leave "$_script v$_version ($_updated)"
		;;
		g )
			filename="$OPTARG"
			[[ -f "$filename" ]] && { printf "%s %s already exists\n" "$red_error" "$filename" >&2; usage 2; }
			template_file="bash-getopts"
		;;
		u )
			usage 0
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			usage 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; usage 1; }

## Source script configuration file ##

[[ -f "$conf_dir/$conf_file" ]] || create_conf
source "$conf_dir/$conf_file"

printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
printf "Creating %s BASH script.\n" "$filename"

# Fill in placeholders and create the script from template

sed -e '1d' \
    -e "s/<FILE>/$filename/" \
    -e "s/<YEAR>/$cur_yr/" \
    -e "s/<AUTHOR>/$copy_holder/" \
    -e "s/<ORG>/$work_org/" \
    -e "s/<EMAIL>/$email_addr/" \
    -e "s/<EMAIL1>/$email_addr1/" \
    -e "s/<TODAY>/$today/" \
    -e "s/<CODER>/$coder/" \
    -e "s/<LICENSE>/$license/" "$template_dir/$template_file" > "$filename"

# Set file permissions for the new script to -rwxr-xr-xr
chmod 755 "$filename"

printf "The %s script has been created.\n" "$filename"
edit_view_quit "$filename"

printf "\n"
leave ""
