#!/usr/bin/env bash
###############################################################################
# Script Name  : z-update
# Description  : Updates system automatically using anacron or cron
# Dependencies : None
# Arguments    : None
# Author       : Copyright (C) 2023, Richard B. Romig
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 20 Jun 2023
# Updated      : 04 Nov 2024
# Comments     : anacron job: Copy to /etc/cron.weekly as root (or sudo) user
#              : cron job: Copy to /usr/local/bin or /opt/bin as root (or sudo) user
# License      : GNU General Public License, version 2.0
###############################################################################

set -eu

log_dir="/var/log"
log_file="update.log"
sed_file="/usr/share/misc/updatelog.sed"
dashes="------------------------"
SECONDS=0

check_disk_space() {
	df_stats=$(df -h / | awk 'NR==2 {print $2,$3,$4,$5}')
	r_size=$(echo "$df_stats" | cut -d ' ' -f1)
	r_used=$(echo "$df_stats" | cut -d ' ' -f2)
	r_perc=$(echo "$df_stats" | cut -d ' ' -f4)
	r_avail=$(echo "$df_stats" | cut -d ' ' -f3)
  printf "\nDisk space used (root): %s/%s %s used, %s available.\n" "$r_used" "$r_size" "$r_perc" "$r_avail"
}

format_time() {
  local ET h m s
  ET="$1"
  ((h=ET/3600))
  ((m=(ET%3600)/60))
  ((s=ET%60))
  printf "%02d:%02d:%02d\n" $h $m $s
}

check_flatpak() {
  local fp_count
  fp_count=$(flatpak list | wc -l)
  printf "\n*** Flatpak ***\n"
  if [[ "$fp_count" -gt 0 ]]; then
    flatpak update --system --noninteractive --force-remove --assumeyes 2> /dev/null
  else
    printf "No Flatpaks installed.\n\n"
  fi
}

exists() {
  command -v "$1" > /dev/null 2>&1 && return 0 || return 1
}

get_updates() {
  local nupd
  /usr/bin/apt-get update
  nupd=$(apt-get -s dist-upgrade | grep "^[[:digit:]]\+ upgraded" | cut -d' ' -f1)
  if [[ "$nupd" -eq 1 ]]; then
    printf "%d package can be upgraded.\n" "$nupd"
  elif [[ "$nupd" -gt 1 ]]; then
    printf "%d packages can be upgraded.\n" "$nupd"
  else
    printf "All packages are up to date.\n"
  fi
  if [[ "$nupd" -gt 0 ]]; then
    printf "\n*** Installing updates ***\n"
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get dist-upgrade -yy
  else
    printf "\nNothing to update.\n"
  fi
}

autoremove_packages() {
  local npkgs
  npkgs=$(apt-get autoremove -s | awk 'NR==8 {print $6}')
  # nupd=$(apt-get autoremove -s | awk '/upgraded/ {print $6}')
  if [[ "$npkgs" -gt 0 ]]; then
    DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get autoremove -yy
  else
    printf "No packages to be removed.\n"
  fi
}

purge_rc_packages() {
  local rcpkg
  if dpkg -l | grep -c '^rc' > /dev/null; then
    for rcpkg in $(dpkg -l | awk '/^rc/ {print $2}'); do
      printf "Purging %s...\n" "$rcpkg"
      DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get remove --purge "$rcpkg" -yy
    done
  else
    printf "No packages in the 'rc' state.\n"
  fi
}

{
  printf "Date: %s\n" "$(date '+%F %R')"
	check_disk_space
  printf "\n*** Checking for updates ***\n"
  get_updates
  printf "\n*** Cleaning APT cache ***\n"
  /usr/bin/apt-get autoclean
  printf "\n*** Removing orphaned packages ***\n"
  autoremove_packages
  printf "\n*** Purging obsolete configuration files ***\n"
  purge_rc_packages
  exists flatpak && check_flatpak
	check_disk_space
  printf "Update completed in %s\n" "$(format_time $SECONDS)"
  [[ -f /var/run/reboot-required ]] && printf "Reboot required.\n"
  printf "%s\n" "$dashes"
} > "$log_dir/$log_file" 2>&1

# Clean up log file.
sed -i -f "$sed_file" "$log_dir/$log_file"
