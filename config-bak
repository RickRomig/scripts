#!/usr/bin/env bash
###############################################################################
# Script Name  : config-bak
# Description  : backup selected configuration files to ~/.config/backup
# Dependencies : none
# Arguments    : none
# Author       : Cepyright (C) 2019, Richard B. Romig, MosfaNet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 16 Jul 2019
# Updated      : 13 Jul 2025
# Comments     :
# TODO (rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly bu_dir="${HOME}/.config/backup"
readonly cfg_dir="${HOME}/.config"
count=0

## Functions ##

bu_home_cfg(){
	local file="$1"
	if [[ -f "$HOME/$file" && -f "$bu_dir/$file" ]]; then
		if [[ "$bu_dir/$file" -ot "$HOME/$file" ]]; then
	    cp -pv "$HOME/$file" "$bu_dir/" | awk -F"/" '{print "==> " $NF}' | sed "s/'$//"
			(( count++ ))
	  fi
	elif [[ -f "$HOME/$file" ]]; then
	  cp -pv "$HOME/$file" "$bu_dir/" | awk -F"/" '{print "==> " $NF}' | sed "s/'$//"
		(( count++ ))
	fi
}

bu_config_cfg() {
	local file folder
	folder="$1"
	file="$2"
	if [[ -f "$cfg_dir/$folder/$file" && -f "$bu_dir/$folder/$file" ]]; then
		if [[ "$bu_dir/$folder/$file" -ot "$cfg_dir/$folder/$file" ]]; then
			printf "==> "
			cp -pv "$cfg_dir/$folder/$file" "$bu_dir/$folder/" | awk '{print $NF}' | cut -d'/' -f6- | sed "s/'$//"
			(( count++ ))
		fi
	elif [[ -f "$cfg_dir/$folder/$file" ]]; then
		[[ -d "$bu_dir/$folder" ]] || mkdir -p "$bu_dir/$folder"
		printf "==> "
		cp -pv "$cfg_dir/$folder/$file" "$bu_dir/$folder/" | awk '{print $NF}' | cut -d'/' -f6- | sed "s/'$//"
		(( count++ ))
	fi
}

bu_misc_cfg() {
	local file folder
	folder="$1"
	file="$2"
	if [[ -f "$HOME/$folder/$file" && -f "$bu_dir/$folder/$file" ]]; then
	  if [[ "$bu_dir/$folder/$file" -ot "$HOME/$folder/$file" ]]; then
			printf "==> "
	    cp -pv "$HOME/$folder/$file" "$bu_dir/$folder/" | awk '{print $NF}' | cut -d'/' -f6- | sed "s/'$//"
			(( count++ ))
	  fi
	elif [[ -f "$HOME/$folder/$file" ]]; then
		[[ -d "$bu_dir/$folder" ]] || mkdir -p "$bu_dir/$folder"
		printf "==> "
	  cp -pv "$HOME/$folder/$file" "$bu_dir/$folder/" | awk '{print $NF}' | cut -d'/' -f6- | sed "s/'$//"
		(( count++ ))
	fi
}

bu_etc_cfg() {
	local file folder
	folder="$1"
	file="$2"
	if [[ -f "$folder/$file" && -f "$bu_dir/$file" ]]; then
		if [[ "$bu_dir/$file" -ot "$folder/$file" ]]; then
			printf "==> "
			cp -v "$folder/$file" "$bu_dir/$file" | awk '{print $NF}' | cut -d'/' -f6- | sed "s/'$//"
			(( count++ ))
		fi
	elif [[ -f "$folder/$file" ]]; then
		printf "==> "
		cp -v "$folder/$file" "$bu_dir/$file" | awk '{print $NF}' | cut -d'/' -f6- | sed "s/'$//"
		(( count++ ))
	fi
}

bu_cinnamon_keybindings() {
	local kb_bu_file="keybindings-backup.dconf"
	if [[ -f "$cfg_dir/$kb_bu_file" && -f "$bu_dir/$kb_bu_file" ]]; then
	  if [[ "$bu_dir/$kb_bu_file" -ot "$cfg_dir/$kb_bu_file" ]]; then
	    cp -pv "$cfg_dir/$kb_bu_file" "$bu_dir/" | awk -F"/" '{print "==> " $NF}' | sed "s/'$//"
			(( count++ ))
	  fi
	elif [[ -f "$cfg_dir/$kb_bu_file" ]]; then
	  cp -pv "$cfg_dir/$kb_bu_file" "$bu_dir/" | awk -F"/" '{print "==> "$NF}' | sed "s/'$//"
		(( count++ ))
	elif is_cinnamon; then
	  dconf dump /org/cinnamon/desktop/keybindings/ > "$HOME/.config/$kb_bu_file"
	  cp -pv "$cfg_dir/$kb_bu_file" "$bu_dir/" | awk -F"/" '{print "==> " $NF}' | sed "s/'$S//"
		(( count++ ))
	fi
}

bu_user_cfgs() {
	local lhost="${HOSTNAME:-$(hostname)}"
	[[ -f "$HOME/$lhost.info" ]] && bu_home_cfg "$lhost.info"
	[[ -f "$HOME/.profile" ]] && bu_home_cfg ".profile"
	[[ -f "$HOME/.bashrc" ]] && bu_home_cfg ".bashrc"
	[[ -f "$HOME/.bash_aliases" ]] && bu_home_cfg ".bash_aliases"
	[[ -f "$HOME/.bash_profile" ]] && bu_home_cfg ".bash_profile"
	[[ -f "$HOME/.bash_logout"  ]] && bu_home_cfg ".bash_logout"
	[[ -f "$HOME/.inputrc" ]] && bu_home_cfg ".inputrc"
	[[ -f "$HOME/.face" ]] && bu_home_cfg ".face"
	[[ -f "$HOME/.xinitrc" ]] && bu_home_cfg ".xinitrc"
	[[ -f "$HOME/.imwheelrc" ]] && bu_home_cfg ".imwheelrc"
}

bu_i3_cfgs() {
	[[ -f "$cfg_dir/i3/config" ]] && bu_config_cfg "i3" "config"
	[[ -f "$cfg_dir/i3/bindings.list" ]] && bu_config_cfg "i3" "bindings.list"
	[[ -f "$cfg_dir/i3/sxhkd/sxhkdrc" ]] && bu_config_cfg "i3/sxhkd" "sxhkdrc"
	[[ -f "$cfg_dir/i3/sxhkdrc" ]] && bu_config_cfg "i3" "sxhkdrc"
	[[ -f "$cfg_dir/i3/bar.conf" ]] && bu_config_cfg "i3" "bar.conf"
	[[ -f "$cfg_dir/i3/rules.conf" ]] && bu_config_cfg "i3" "rules.conf"
	[[ -f "$cfg_dir/i3/workspaces.conf" ]] && bu_config_cfg "i3" "workspaces.conf"
	[[ -f "$cfg_dir/i3/i3status.conf" ]] && bu_config_cfg "i3" "i3status.conf"
	[[ -f "$cfg_dir/i3/autostart.sh" ]] && bu_config_cfg "i3" "autostart.sh"
	[[ -f "$cfg_dir/i3/backgrounds.sh" ]] && bu_config_cfg "i3" "backgrounds.sh"
	[[ -f "$cfg_dir/i3/logout" ]] && bu_config_cfg "i3" "logout"
	[[ -f "$cfg_dir/dunst/dunstrc" ]] && bu_config_cfg "dunst" "dunstrc"
	[[ -f "$cfg_dir/polybar/i3bar.ini" ]] && bu_config_cfg "polybar" "i3bar.ini"
	[[ -f "$cfg_dir/polybar/config" ]] && bu_config_cfg "polybar" "config"
	[[ -f "$cfg_dir/polybar/config.ini" ]] && bu_config_cfg "polybar" "config.ini"
	[[ -f "$cfg_dir/rofi/config.rasi" ]] && bu_config_cfg "rofi" "config.rasi"
	[[ -f "$cfg_dir/rofi/arc_dark_colors.rasi" ]] && bu_config_cfg "rofi" "arc_dark_colors.rasi"
	[[ -f "$cfg_dir/rofi/arc_dark_transparent_colors.rasi" ]] && bu_config_cfg "rofi" "arc_dark_transparent_colors.rasi"
}

bu_editor_cfgs() {
	[[ -f "$HOME/.nanorc" ]] && bu_home_cfg ".nanorc"
	[[ -f "$cfg_dir/nano/nanorc" ]] && bu_config_cfg "nano" "nanorc"
	[[ -f "$cfg_dir/micro/settings.json" ]] && bu_config_cfg "micro" "settings.json"
	[[ -f "$cfg_dir/micro/bindings.json" ]] && bu_config_cfg "micro" "bindings.json"
	[[ -f "$cfg_dir/VSCodium/User/settings.json" ]] && bu_config_cfg "VSCodium/User" "settings.json"
	[[ -f "$cfg_dir/geany/geany.conf" ]] && bu_config_cfg "geany" "geany.conf"
	[[ -f "$cfg_dir/geany/keybindings.conf" ]] && bu_config_cfg "geany" "keybindings.conf"
	[[ -f "$cfg_dir/marktext/preferences.json" ]] && bu_config_cfg "marktext" "preferences.json"
	[[ -f "$HOME/.bluefish/rcfile-2.0" ]] && bu_misc_cfg ".bluefish" "rcfile-2.0"
}

bu_terminal_cfgs() {
	[[ -f "$cfg_dir/kitty/kitty.conf" ]] && bu_config_cfg "kitty" "kitty.conf"
	[[ -f "$cfg_dir/kitty/bindings.list" ]] && bu_config_cfg "kitty" "bindings.list"
	[[ -f "$cfg_dir/terminator/config" ]] && bu_config_cfg "terminator" "config"
}

bu_keybindings() {
	[[ -f "$cfg_dir/keybindings-backup.dconf" ]] && bu_cinnamon_keybindings
	[[ -f "$HOME/.xbindkeysrc" ]] && bu_home_cfg ".xbindkeysrc"
}

bu_conky_cfgs() {
	[[ -f "$HOME/.conkyrc" ]] && bu_home_cfg ".conkyrc"
	[[ -f "$cfg_dir/conky/conky.conf" ]] && bu_config_cfg "conky" "conky.conf"
}

bu_misc_cfgs() {
	[[ -f "$cfg_dir/bat/config" ]] && bu_config_cfg "bat" "config"
	[[ -f "$cfg_dir/neofetch/config.conf" ]] && bu_config_cfg "neofetch" "config.conf"
	[[ -f "$cfg_dir/fastfetch/config.jsonc" ]] && bu_config_cfg "fastfetch" "config.jsonc"
	[[ -f "$cfg_dir/clipit/clipitrc" ]] && bu_config_cfg "clipit" "clipitrc"
	[[ -f "$cfg_dir/keepassxc/keepassxc.ini" ]] && bu_config_cfg "keepassxc" "keepassxc.ini"
	[[ -f "$HOME/.gitconfig" ]] && bu_home_cfg ".gitconfig"
	[[ -f "$cfg_dir/git/config" ]] && bu_config_cfg "git" "config"
	[[ -f "$HOME/.git-credentials" ]] && bu_home_cfg ".git-credentials"
	[[ -f "$cfg_dir/git/credentials" ]] && bu_config_cfg "git" "credentials"
	[[ -f "$cfg_dir/picom/picom.conf" ]] && bu_config_cfg "picom" "picom.conf"
	[[ -f "$cfg_dir/picom.conf" ]] && bu_misc_cfg ".config" "picom.conf"
	[[ -f "$cfg_dir/compton.conf" ]] && bu_misc_cfg ".config" "compton.conf"
	[[ -f "$HOME/.ssh/id_rsa" ]] && bu_misc_cfg ".ssh" "id_rsa"
	[[ -f "$HOME/.ssh/id_rsa.pub" ]] && bu_misc_cfg ".ssh" "id_rsa.pub"
	[[ -f "$HOME/.ssh/config" ]] && bu_misc_cfg ".ssh" "config"
	[[ -f "$HOME/.config/redshift.conf" ]] && bu_misc_cfg ".config" "redshift.conf"
	[[ -f /etc/X11/xorg.conf.d/10-monitor.conf ]] && bu_etc_cfg "/etc/X11/xorg.conf.d" "10-monitor.conf"
	[[ -f /etc/X11/xorg.conf.d/10-force-vga1.conf ]] && bu_etc_cfg "/etc/X11/xorg.conf.d" "10-monitor.conf"
}

completion_status() {
	if (( count < 1 )); then
		printf "Configuration files are up to date. No backup required.\n"
	elif (( count > 1 )); then
		printf "%d configuration files were backed up.\n" "$count"
	else
		printf "1 configuration file was backed up.\n"
	fi
}

main() {
	local script="${0##*/}"
	local version="6.5.25193"
	[[ -d "$bu_dir" ]] || mkdir -p "$bu_dir"
	printf "Backing up configuration files...\n"
	bu_user_cfgs
	bu_i3_cfgs
	bu_editor_cfgs
	bu_terminal_cfgs
	bu_keybindings
	bu_conky_cfgs
	bu_misc_cfgs
	completion_status
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
