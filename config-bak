#!/usr/bin/env bash
###############################################################################
# Script Name  : config-bak
# Description  : backup selected configuration files to ~/.config/backup
# Dependencies : none
# Arguments    : none
# Author       : Cepyright (C) 2019, Richard B. Romig, 16 July 2019
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     :
# TODO (rick)  : 
# License      : GNU General Public License, version 2.0
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.5.0"
readonly _updated="15 Aug 2023"
readonly lhost="${HOSTNAME:-$(hostname)}"
readonly bu_dir="${HOME}/.config/backup"
readonly cfg_dir="${HOME}/.config"

count=0

## Functions ##

# Well-behaved configs

bu_home_cfg(){
	local file="$1"
	if [[ -f "$HOME/$file" && -f "$bu_dir/$file" ]]; then
		if [[ "$bu_dir/$file" -ot "$HOME/$file" ]]; then
	    cp -puv "$HOME/$file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$HOME/$file" ]]; then
	  cp -pv "$HOME/$file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	fi
}

bu_config_cfg() {
	local folder="$1"
	local file="$2"
	if [[ -f "$cfg_dir/$folder/$file" && -f "$bu_dir/$folder/$file" ]]; then
		if [[ "$bu_dir/$folder/$file" -ot "$cfg_dir/$folder/$file" ]]; then
			cp -puv "$cfg_dir/$folder/$file" "$bu_dir/$folder/$file" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
			count=1
		fi
	elif [[ -f "$cfg_dir/$folder/$file" ]]; then
		[[ -d "$bu_dir/$folder" ]] || mkdir -p "$bu_dir/$folder"
		cp -pv "$cfg_dir/$folder/$file" "$bu_dir/$folder/$file" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
		count=1
	fi
}

# Special cases

bu_nanorc() {
	if [[ -f "$HOME/.nanorc" && -f "$bu_dir/.nanorc" ]]; then
		if [[ "$bu_dir/.nanorc" -ot "$HOME/.nanorc" ]]; then
			cp -puv "$HOME/.nanorc" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
			count=1
		fi
	elif [[ -f "$HOME/.nanorc" ]]; then
		cp -pv "$HOME/.nanorc" "$bu_dir/" && (( count++ ))
	elif [[ -f "$cfg_dir/nano/nanorc" && -f "$bu_dir/nano/nanorc" ]]; then
		if [[ "$bu_dir/nano/nanorc" -ot "$cfg_dir/nano/nanorc" ]]; then
			cp -puv "$cfg_dir/nano/nanorc" "$bu_dir/nano/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}}' | sed "s/'//"
			count=1
		fi
	elif [[ -f "$cfg_dir/nano/nanorc" ]]; then
		[[ -d "$bu_dir/nano" ]] || mkdir -p "$bu_dir/nano"
		cp -pv "$cfg_dir/nano/nanorc" "$bu_dir/nano/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
		count=1
		[[ -f "$bu_dir/.nanorc" ]] && rm "$bu_dir/.nanorc"
	fi
}

bu_git_config() {
	if [[ -f "$HOME/.gitconfig" && -f "$bu_dir/.gitconfig" ]]; then
	  if [[ "$bu_dir/.gitconfig" -ot "$HOME/.gitconfig" ]]; then
	    cp -puv "$HOME/.gitconfig" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$HOME/.gitconfig" ]]; then
	  cp -pv "$HOME/.gitconfig" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	elif [[ -f "$cfg_dir/git/config" && -f "$bu_dir/git/config" ]]; then
	  if [[ "$bu_dir/git/config" -ot "$cfg_dir/git/config" ]]; then
	    cp -puv "$cfg_dir/git/config" "$bu_dir/git/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$cfg_dir/git/config" ]]; then
	  [[ -d "$bu_dir/git/" ]] || mkdir -p "$bu_dir/git/"
	  cp -pv "$cfg_dir/git/config" "$bu_dir/git/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	  [[ -f "$bu_dir/.gitconfig" ]] && rm "$bu_dir/.gitconfig"
	fi
}

bu_git_credentials() {
	if [[ -f "$HOME/.git-credentials" && -f "$bu_dir/.git-credentials" ]]; then
	  if [[ "$bu_dir/.git-credentials" -ot "$HOME/.git-credentials" ]]; then
	    cp -puv "$HOME/.git-credentials" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$HOME/.git-credentials" ]]; then
	  cp -puv "$HOME/.git-credentials" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	elif [[ -f "$cfg_dir/git/credentials" && -f "$bu_dir/git/credentials" ]]; then
	  if [[ "$bu_dir/git/credentials" -ot "$cfg_dir/git/credentials" ]]; then
	    cp -puv "$cfg_dir/git/credentials" "$bu_dir/git/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$cfg_dir/git/credentials" ]]; then
	  [[ -d "$bu_dir/git/" ]] || mkdir -p "$bu_dir/git/"
	  cp -pv "$cfg_dir/git/credentials" "$bu_dir/git/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	  [[ -f "$bu_dir/.git-credentials" ]] && rm "$bu_dir/.git-credentials"
	fi
}

bu_cinnamon_keybindings() {
	local kb_bu_file="keybindings-backup.dconf"
	if [[ -f "$cfg_dir/$kb_bu_file" && -f "$bu_dir/$kb_bu_file" ]]; then
	  if [[ "$bu_dir/$kb_bu_file" -ot "$cfg_dir/$kb_bu_file" ]]; then
	    cp -puv "$cfg_dir/$kb_bu_file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$cfg_dir/$kb_bu_file" ]]; then
	  cp -pv "$cfg_dir/$kb_bu_file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	elif is_cinnamon; then
	    dconf dump /org/cinnamon/desktop/keybindings/ > "$HOME/.config/$kb_bu_file"
	    cp -pv "$cfg_dir/$kb_bu_file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	fi
}

bu_sshpwd_file() {
	if [[ -f "$HOME/.local/share/sshpwd_file" && -f "$bu_dir/sshpwd_file" ]]; then
	  if [[ "$bu_dir/sshpwd_file" -ot "$HOME/.local/share/sshpwd_file" ]]; then
	    cp -puv "$HOME/.local/share/sshpwd_file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	    count=1
	  fi
	elif [[ -f "$HOME/.local/share/sshpwd_file" ]]; then
	  cp -pv "$HOME/.local/share/sshpwd_file" "$bu_dir/" | awk -F"/" '{print "=> " $(NF-1) "/" $NF}' | sed "s/'//"
	  count=1
	fi
}

## Execution ##

# Create the backup directory if it doesn't exist

[[ -d "$bu_dir" ]] || mkdir -p "$bu_dir"

# User configs
[[ -f "$HOME/$lhost.info" ]] && bu_home_cfg "$$lhost.info"
[[ -f "$HOME/.profile" ]] && bu_home_cfg ".profile"
[[ -f "$HOME/.bashrc" ]] && bu_home_cfg ".bashrc"
[[ -f "$HOME/.bash_aliases" ]] && bu_home_cfg ".bash_aliases"
[[ -f "$HOME/.bash_profile" ]] && bu_home_cfg ".bash_profile"
[[ -f "$HOME/.bash_logout"  ]] && bu_home_cfg ".bash_logout"
[[ -f "$HOME/.face" ]] && bu_home_cfg ".face"
[[ -f "$HOME/.gitconfig" || -f "$cfg_dir/git/config" ]] && bu_git_config
[[ -f "$HOME/.git-credentials" || -f "$cfg_dir/git/credentials" ]] && bu_git_credentials
# i3 and related configs
[[ -f "$cfg_dir/i3/config" ]] && bu_config_cfg "i3" "config"
[[ -f "$cfg_dir/i3/bindings.list" ]] && bu_config_cfg "i3" "bindings.list"
[[ -f "$cfg_dir/i3/sxhkd/sxhkdrc" ]] && bu_config_cfg "i3/sxhkd" "sxhkdrc"
[[ -f "$cfg_dir/i3/bar.conf" ]] && bu_config_cfg "i3" "bar.conf"
[[ -f "$cfg_dir/i3/workspaces.conf" ]] && bu_config_cfg "i3" "workspaces.conf"
[[ -f "$cfg_dir/i3/i3status.conf" ]] && bu_config_cfg "i3" "i3status.conf"
[[ -f "$cfg_dir/polybar/i3bar.ini" ]] && bu_config_cfg "polybar" "i3bar.ini"
[[ -f "$cfg_dir/polybar/config" ]] && bu_config_cfg "polybar" "config"
[[ -f "$cfg_dir/rofi/config.rasi" ]] && bu_config_cfg "rofi" "config.rasi"
[[ -f "$cfg_dir/rofi/arc_dark_colors.rasi" ]] && bu_config_cfg "rofi" "arc_dark_colors.rasi"
# Editor configs
[[ -f "$HOME/.nanorc" || -f "$cfg_dir/nano/nanorc" ]] && bu_nanorc
[[ -f "$cfg_dir/micro/settings.json" ]] && bu_config_cfg "micro" "settings.json"
[[ -f "$cfg_dir/micro/bindings.json" ]] && bu_config_cfg "micro" "bindings.json"
[[ -f "$cfg_dir/VSCodium/User/settings.json" ]] && bu_config_cfg "VSCodium/User" "settings.json"
[[ -f "$cfg_dir/geany/geany.conf" ]] && bu_config_cfg "geany" "geany.conf"
[[ -f "$cfg_dir/geany/keybindings.conf" ]] && bu_config_cfg "geany" "keybindings.conf"
[[ -f "$cfg_dir/marktext/preferences.json" ]] && bu_config_cfg "marktext" "preferences.json"
[[ -f "$HOME/.bluefish/rcfile-2.0" ]] && bu_home_cfg ".bluefish/rcfile-2.0"
# Terminal configs
[[ -f "$cfg_dir/kitty/kitty.conf" ]] && bu_config_cfg "kitty" "kitty.conf"
[[ -f "$cfg_dir/kitty/bindings.list" ]] && bu_config_cfg "kitty" "bindings.list"
[[ -f "$cfg_dir/terminator/config" ]] && bu_config_cfg "terminator" "config"
# Keybindings
[[ -f "$cfg_dir/keybindings-backup.dconf" ]] && bu_cinnamon_keybindings
[[ -f "$HOME/.xbindkeysrc" ]] && bu_home_cfg ".xbindkeysrc"
# Conky configs
[[ -f "$HOME/.conkyrc" ]] && bu_home_cfg ".conkyrc"
[[ -f "$cfg_dir/conky/conky.conf" ]] && bu_config_cfg "conky" "conky.conf"
# Miscellaneous config files
[[ -f "$cfg_dir/bat/config" ]] && bu_config_cfg "bat" "config"
[[ -f "$cfg_dir/neofetch/config.conf" ]] && bu_config_cfg "neofetch" "config.conf"
[[ -f "$cfg_dir/neofetch/config" ]] && bu_config_cfg "neofetch" "config.conf"
[[ -f "$cfg_dir/clipit/clipitrc" ]] && bu_config_cfg "clipit" "clipitrc"
[[ -f "$cfg_dir/keepassxc/keepassxc.ini" ]] && bu_config_cfg "keepassxc" "keepassxc.ini"
[[ -f "$HOME/.gorillarc" ]] && bu_home_cfg ".gorillarc"
[[ -f "$HOME/.local/share/sshpwd_file" ]] && bu_sshpwd_file

# Completion status

if (( count == 0 )); then
  printf "Configuration files are up to date. No backup required.\n"
else
  printf "Configuration files backed up.\n"
fi

leave "$_script v$_version ($_updated)"
