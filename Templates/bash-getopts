## Shell Template ##
#!/usr/bin/env bash
##########################################################################
# Script Name  : <FILE>
# Description  :
# Dependencies :
# Arguments    :
# Author       : Copyright (C) <YEAR> <AUTHOR>, <ORG>
# Email        : <EMAIL> | <EMAIL1>
# Created      : <TODAY>
# Last updated : <TODAY>
# Comments     :
# TODO (<CODER>)  :
# License      : <LICENSE>
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.1.0"
readonly _updated="<TODAY>"

## Functions ##

check_dependencies() {
  local packages=( gdebi wget )
  check_packages "${packages[@]}"
}

cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

help() {
	errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-h	Display help
	-i	Install application
	-r	Remove application
	-s	Apply settings
	-u	Update application
END_HELP
	printf "\U1F427 %s v%s (%s)\n" "$_script" "$_version" "$_updated"
  exit "$errcode"
}

app_version() {
	application --version
}

## Execution ##

# clear


noOpt=1
optstr=":hirsu"
# optstr=":h:i:r:s:u"
while getopts "$optstr" opt; do
	case "$opt" in
		h )
			help 0
			;;
		i )
			# argI="$OPTARG"
			exists application && leave "Application $(app_version) is already installed."
			install_application
			apply_settings	# optional custom configuration
			;;
		r )
			# argR="$OPTARG"
			exists application || leave "Application is not installed."
			remove_application
			;;
		s )
			apply_settings
			;;
		u )
			exists application || leave "Application is not installed."
			update_application
			;;
		: )
			# printf "%s Must supply an argument to -%s.\n" "$red_error" "$OPTARG" >&2
			  echo "${lightred}ERROR:${normal} Must supply an argument to -${OPTARG}." >&2
			  help 2
			  ;;
		? )
			# printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			echo "${lightred}ERROR:${normal} Invalid option -${OPTARG}" >&2
			help 2
			;;
	esac
	noOpt=0
done
# if [ $noOpt = 1 ];then echo "${lightred}ERROR:${normal} No argument passed." >&2;help 1;fi
if [ $noOpt = 1 ];then printf "%s No argument passed.\n" "$red_error" >&2;help 1;fi
# echo -e "$_script v$_version ($_updated)"
printf "%s v%s (%s)\n" "$_script" "$_version" "$_updated"
exit
