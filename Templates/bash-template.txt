## Shell Template ##
#!/usr/bin/env bash
##########################################################################
# Script Name  : <FILE>
# Description  :
# Dependencies :
# Arguments    : See help() function for available options.
# Author       : Copyright <YEAR>, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail | rick.romig@mymetronet.net
# Created      : <TODAY>
# Last updated : <TODAY>
# Version      : <VERSION>
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
# License URL  : https://github.com/RickRomig/scripts/blob/main/LICENSE
##########################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

# set -eu
# set -euo pipefail

## Global Variables ##

readonly script="${0##*/}"
readonly version="<VERSION>"
script_dir==$(dirname "$(readlink -f "${0}")"); readonly script_dir
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
tmp_dir=$(mktemp -qd) || die "Failed to create temporary directory." 1

## Functions ##

check_dependencies() {
  local packages=( gdebi wget )
  check_packages "${packages[@]}"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

app_version() {
	# application --version
	dpkg -l application | awk '/ii/ {print $3}' | sed 's/[~+-].*//'
}

help() {
	local errcode="${1:-2}"
	local -r updated="<TODAY>"
  cat << _HELP_
${orange}$script${normal} $version, Updated: $updated
Short description

${green}Usage:${normal} $script [-h|--help]
${orange}Available options:${normal}
  -h | --help]  Show this help message and exit

_HELP_
  exit "$errcode"
}

main() {
  local -r script="${0##*/}"
  local -r version="<VERSION>"
  # Check arguments
  if [[ "$#" -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 1
  elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
    help 0
  elif [[ -f "$1" ]]; then
    printf "%s %s already exists." "$RED_ERROR" "$1" >&2
    help 2
  elif [[ ! -f "$1" ]]; then
    printf "%s %s not found." "$RED_ERROR" "$1" >&2
  else
    filename="$1"
  fi

  trap cleanup EXIT	# for temp files and directories

  # printf "%s %s\n" "$script" "$version"
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
