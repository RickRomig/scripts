## Shell Template ##
#!/usr/bin/env bash
##########################################################################
# Script Name  : <FILE>
# Description  :
# Dependencies :
# Arguments    : See help() function for available options.
# Author       : Copyright <YEAR> <AUTHOR>, <ORG>
# Email        : <EMAIL> | <EMAIL1>
# Created      : <TODAY>
# Last updated : <TODAY>
# Comments     :
# TODO (<CODER>)  :
# License      : <LICENSE>
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu
# set -euo pipefail

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="<VERSION>"
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
tmp_dir=$(mktemp -qd) || die "Failed to create temporary directory." 1

## Functions ##

check_dependencies() {
  local packages=( gdebi wget )
  check_packages "${packages[@]}"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

app_version() {
	# application --version
	dpkg -l application | awk '/ii/ {print $3} | sed 's/[~+-].*//'
}

help() {
	local errcode updated
	errcode="${1:-2}"
	updated="<TODAY>"
  cat << _HELP_
${orange}$script${normal} $version, Updated: $updated
Short description

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -h  Show help

_HELP_
  exit "$errcode"
}

main() {
  # Check arguments
  if [[ "$#" -eq 0 ]]; then
    printf "%s No argument passed.\n" "$red_error" >&2
    help 1
  elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
    help 0
  elif [[ -f "$1" ]]; then
    printf "%s %s already exists." "$red_error" "$1" >&2
    help 2
  elif [[ ! -f "$1" ]]; then
    printf "%s %s not found." "$red_error" "$1" >&2
  else
    filename="$1"
  fi

  # echo "$script v$version"
  # printf "%s v%s\n" "$script" "$version"
  # exit
  leave "$script $version"

}

## Execution ##

trap cleanup EXIT	# for temp files and directories
main "$@"
