## Shell Template ##
#!/usr/bin/env bash
##########################################################################
# Script Name  : <FILE>
# Description  :
# Dependencies :
# Arguments    : See help() function for available options.
# Author       : Copyright <YEAR> <AUTHOR>, <ORG>
# Email        : <EMAIL> | <EMAIL1>
# Created      : <TODAY>
# Updated      : <TODAY>
# Comments     :
# TODO (<CODER>)  :
# License      : <LICENSE>
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu
# set -euo pipefail

## Global Variables ##

readonly script="${0##*/}"
readonly version="<VERSION>"
readonly script_dir==$(dirname "$(readlink -f "${0}")")
verbose_mode="$FALSE"
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
tmp_dir=$(mktemp -qd) || die "Failed to create temporary directory." 1

## Functions ##

check_dependencies() {
  local packages=( git wget )
  check_packages "${packages[@]}"
}

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

app_version() {
	# application --version
	dpkg -l application | awk '/ii/ {print $3}' | sed 's/[~+-].*//'
}

help() {
	local errcode="${1:-2}"
	local -r updated="<TODAY>"
	cat << _HELP_
${orange}$script${normal} $version, Upated: $updated
Short description

${green}Usage:${normal} $script [-h] [-i] [-r] [-s] [-u] [-v]

${orange}Available options:${normal}
	-h	Show this help message and exit.
	-i	Install application.
	-r	Remove application.
	-s	Apply settings.
	-u	Update application.
	-v	Enable verbose mode. If used, must precede other flags.
_HELP_
  exit "$errcode"
}

show_message() {
	local message="$1"
	[[ "$verbose_mode" == "$TRUE" ]] && echo "$message"
}

main() {
	local noOpt opt optstr
	noOpt=1
	optstr=":hirsuv"
	# optstr=":h:i:r:s:u:v"
	while getopts "$optstr" opt; do
		case "$opt" in
			h )
				help 0
			;;
			i )
				# argI="$OPTARG"
				if exists application; then
					printf "Application %s is already installed.\n" "$(app_version)" >&2
				else
					trap cleanup EXIT	# for temp files and directories
					install_application
					apply_settings	# optional custom configuration
				fi
				;;
			r )
				# argR="$OPTARG"
				if exists application; then
					remove_application
				else
					printf "Application is not installed.\n" >&2
				fi
				;;
			s )
				if exists application; then
					apply_settings
				else
					printf "Application is not installed.\n" >&2
				fi
				;;
			u )
				if exists application; then
					update_application
				else
					printf "Application is not installed.\n" >&2
				fi
				;;
			v )
				verbose_mode="$TRUE"
				show_message "Verbose mode enabled."
				;;
			: )
				printf "%s Must supply an argument to -%s.\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
	  		;;
			? )
				printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	# printf "%s %s\n" "$script" "$version"
	over_line "$script $version"
	exit
}

## Execution ##

main "$@"
