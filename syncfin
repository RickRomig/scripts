#!/usr/bin/env bash
##########################################################################
# Script Name  : syncfin
# Description  : Synchronize files between main PC and finance laptop.
# Dependencies : rsync
# Arguments    : none
# Author       : Copyright (C) 2022 Richard B. Romig, 11 Mar 2022
# Email        : rick.romig@gmail.com
# Comments     : Uses a configuration file to store hostnames & IP addresses.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

readonly local_host="${HOSTNAME:-$(hostname)}"
_script=$(basename "$0"); readonly _script
readonly _version="0.2.23"
readonly _updated="02 Feb 2024"
readonly conf_dir="$HOME/.config/scripts"
readonly conf_file="$_script.conf"

## Functions ##

create_conf() {
  [[ -d "$conf_dir" ]] || mkdir -p "$conf_dir"
  echo "Complete all fields"
  read -rp "Main hostname: " main_host
  read -rp "Main IP (last octect): " main_ip
  read -rp "Finance hostname: " fin_host
  read -rp "Finance IP (last octet): " fin_ip

  echo "
  main_host='$main_host'
  main_ip='$main_ip'
  fin_host='$fin_host'
  fin_ip='$fin_ip'
  " > "$conf_dir/$conf_file"
}

transfer_status() {
  # Exit script if transfer fails.
  xfr_status="$1"
  (( xfr_status != 0 )) && die "A transfer failed! Check network status." "$xfr_status"
}

transfer() {
  # Check remote host and sync if on line:
  if [[ "$local_host" == "$main_host" ]]; then
    if ping -c 3 "$localnet.$fin_ip" >/dev/null 2>&1; then
      echo "Syncing $main_host to $fin_host ..."
      sync_to_fin
      echo $'\n'$"$fin_host synced with $main_host."
    else
      echo $'\n'$"... $fin_host is not on the network."
    fi
  else
    if ping -c 3 "$localnet.$main_ip" >/dev/null 2>&1; then
      echo "Syncing $fin_host to $main_host ..."
      sync_to_main
      echo $'\n'$"$main_host synced with $fin_host."
    else
      echo $'\n'$"... $main_host is not on the network."
    fi
  fi
}

sync_to_main() {
  echo  $'\n'$"${orange}Syncing Finance directory...${normal}"
  rsync -avh --delete "$HOME"/Documents/Finance/ "$localnet.$main_ip":Documents/Finance/
  exit_status="$?"
  transfer_status "$exit_status"

  echo  $'\n'$"${orange}Syncing HomeBank directory...${normal}"
  rsync -avh --delete "$HOME"/Documents/HomeBank/ "$localnet.$main_ip":Documents/HomeBank/
  exit_status="$?"
  transfer_status "$exit_status"
}

sync_to_fin() {
  echo $'\n'$"${orange}Syncing bash aliases...${normal}"
  rsync -avh --delete "$HOME"/.bash_aliases "$localnet.$fin_ip":
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing bin directory...${normal}"
  rsync -avh --delete --exclude '.git' "$HOME"/bin/ "$localnet.$fin_ip":bin/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing script configuration files...${normal}"
  rsync -avh --delete "$HOME"/.config/scripts/ "$localnet.$fin_ip":.config/scripts/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing homepage directory...${normal}"
  rsync -avh --delete --exclude '.git' "$HOME"/Documents/homepage/ "$localnet.$fin_ip":Documents/homepage/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Password Databases...${normal}"
  rsync -avh --delete --include="*.kdbx" --exclude="*" "$HOME"/Documents/ "$localnet.$fin_ip":Documents/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing Templates directory...${normal}"
  rsync -avh --delete "$HOME"/Templates/ "$localnet.$fin_ip":Templates/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing wallpaper directory...${normal}"
  rsync -avh --delete "$HOME"/Pictures/wallpaper/ "$localnet.$fin_ip":Pictures/wallpaper/
  exit_status="$?"
  transfer_status "$exit_status"

  echo $'\n'$"${orange}Syncing .local/share/doc...${normal}"
  rsync -avh --delete "$HOME"/.local/share/doc/ "$localnet.$fin_ip":.local/share/doc/
  exit_status="$?"
  transfer_status "$exit_status"
}

## Execution ##

check_package rsync

SECONDS=0

box "$_script v$_version (Updated: $_updated)" "*"

[[ -f "$conf_dir/$conf_file" ]] || create_conf
source "$conf_dir/$conf_file"

# Check host
if [[ "$local_host" == "$main_host" || "$local_host" == "$fin_host" ]]; then
	transfer
else
	die "Invalid client. $_script must be run from $main_host or $fin_host."
fi

box "$_script completed in $(format_time $SECONDS)"

exit
